System.register("./__rootModule___commonjs-entry-51a55f66.js ./canvas-2fd3d40b.js ./top-bar.cp-fa0cb96d.js @babel/plugin-syntax-import-meta lively.collab ./index-61952933.js ./loading-indicator.cp-98e470a2.js ./tooltips.cp-3c41b378.js ./index-616023be.js ./ui.cp-8dfc076f.js ./index-42118cd5.js ./interface-1a7f3c67.js ./popups.cp-5b9fb681.js ./list.cp-840d1cf8.js ./messages.cp-817cc06d.js rollup @rollup/plugin-json ./editor-plugin-5397d87c.js ./editor-modes-aae4d878.js ./helpers-94ca076d.js @rollup/plugin-commonjs rollup-plugin-polyfill-node ./user-ui-98206202.js ./object-classes-06d7e61a.js".split(" "),function(bd){var Dd,
se,Rc,ad,Ne,Cb,Sd,ve,uc,dd,vd,Ed,fe,jc;return{setters:[function(Od){Dd=Od._;se=Od.M;Rc=Od.c;ad=Od.p;Ne=Od.e;Cb=Od.a;Sd=Od.C;ve=Od.b;uc=Od.W;dd=Od.d;vd=Od.i},function(Od){Ed=Od.C},function(Od){fe=Od.D;jc=Od.W},function(){},function(){},function(){},function(){},function(){},function(){},function(){},function(){},function(){},function(){},function(){},function(){},function(){},function(){},function(){},function(){},function(){},function(){},function(){},function(){},function(){}],execute:function(){function Od(){const t=
4294967295*Math.random()|0,A=4294967295*Math.random()|0,F=4294967295*Math.random()|0,Q=4294967295*Math.random()|0;return(zf[t&255]+zf[t>>8&255]+zf[t>>16&255]+zf[t>>24&255]+"-"+zf[A&255]+zf[A>>8&255]+"-"+zf[A>>16&15|64]+zf[A>>24&255]+"-"+zf[F&63|128]+zf[F>>8&255]+"-"+zf[F>>16&255]+zf[F>>24&255]+zf[Q&255]+zf[Q>>8&255]+zf[Q>>16&255]+zf[Q>>24&255]).toLowerCase()}function qb(t,A,F){return Math.max(A,Math.min(F,t))}function ic(t){return 0===(t&t-1)&&0!==t}function Wb(t){return Math.pow(2,Math.floor(Math.log(t)/
Math.LN2))}function lc(t){for(let A=t.length-1;0<=A;--A)if(65535<t[A])return!0;return!1}function db(t){return document.createElementNS("http://www.w3.org/1999/xhtml",t)}function Xa(t){return.04045>t?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function Gb(t){return.0031308>t?12.92*t:1.055*Math.pow(t,.41666)-.055}function sc(t,A,F){0>F&&(F+=1);1<F&&--F;return F<1/6?t+6*(A-t)*F:.5>F?A:F<2/3?t+6*(A-t)*(2/3-F):t}function ub(t,A){A.r=t.r;A.g=t.g;A.b=t.b;return A}function sb(t){if("undefined"!==
typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!==typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!==typeof ImageBitmap&&t instanceof ImageBitmap)return bf.getDataURL(t);if(t.data)return{data:Array.from(t.data),width:t.width,height:t.height,type:t.data.constructor.name};console.warn("THREE.Texture: Unable to serialize Texture.");return{}}function fa(t,A,F,Q,X){for(let bb=0,Wa=t.length-3;bb<=Wa;bb+=3){yg.fromArray(t,bb);const Ab=X.x*Math.abs(yg.x)+X.y*Math.abs(yg.y)+
X.z*Math.abs(yg.z),fc=A.dot(yg),Lc=F.dot(yg),wd=Q.dot(yg);if(Math.max(-Math.max(fc,Lc,wd),Math.min(fc,Lc,wd))>Ab)return!1}return!0}function Db(t,A,F,Q,X,bb,Wa,Ab,fc,Lc,wd,le){vj.fromBufferAttribute(X,Lc);pj.fromBufferAttribute(X,wd);kj.fromBufferAttribute(X,le);X=t.morphTargetInfluences;if(bb&&X){Al.set(0,0,0);rg.set(0,0,0);Sg.set(0,0,0);for(let pe=0,qe=bb.length;pe<qe;pe++){var je=X[pe];const nc=bb[pe];0!==je&&(Ih.fromBufferAttribute(nc,Lc),mk.fromBufferAttribute(nc,wd),fl.fromBufferAttribute(nc,
le),Wa?(Al.addScaledVector(Ih,je),rg.addScaledVector(mk,je),Sg.addScaledVector(fl,je)):(Al.addScaledVector(Ih.sub(vj),je),rg.addScaledVector(mk.sub(pj),je),Sg.addScaledVector(fl.sub(kj),je)))}vj.add(Al);pj.add(rg);kj.add(Sg)}t.isSkinnedMesh&&(t.boneTransform(Lc,vj),t.boneTransform(wd,pj),t.boneTransform(le,kj));bb=vj;Wa=pj;X=kj;je=Dn;null===(1===A.side?Q.intersectTriangle(X,Wa,bb,!0,je):Q.intersectTriangle(bb,Wa,X,2!==A.side,je))?t=null:(xm.copy(je),xm.applyMatrix4(t.matrixWorld),A=F.ray.origin.distanceTo(xm),
t=A<F.near||A>F.far?null:{distance:A,point:xm.clone(),object:t});t&&(Ab&&(Lj.fromBufferAttribute(Ab,Lc),gl.fromBufferAttribute(Ab,wd),ao.fromBufferAttribute(Ab,le),t.uv=xf.getUV(Dn,vj,pj,kj,Lj,gl,ao,new tg)),fc&&(Lj.fromBufferAttribute(fc,Lc),gl.fromBufferAttribute(fc,wd),ao.fromBufferAttribute(fc,le),t.uv2=xf.getUV(Dn,vj,pj,kj,Lj,gl,ao,new tg)),Ab={a:Lc,b:wd,c:le,normal:new Tb,materialIndex:0},xf.getNormal(vj,pj,kj,Ab.normal),t.face=Ab);return t}function ab(t){const A={};for(const F in t){A[F]={};
for(const Q in t[F]){const X=t[F][Q];X&&(X.isColor||X.isMatrix3||X.isMatrix4||X.isVector2||X.isVector3||X.isVector4||X.isTexture||X.isQuaternion)?A[F][Q]=X.clone():Array.isArray(X)?A[F][Q]=X.slice():A[F][Q]=X}}return A}function eb(t){const A={};for(let F=0;F<t.length;F++){const Q=ab(t[F]);for(const X in Q)A[X]=Q[X]}return A}function kc(){function t(bb,Wa){Q(bb,Wa);X=A.requestAnimationFrame(t)}let A=null,F=!1,Q=null,X=null;return{start:function(){!0!==F&&null!==Q&&(X=A.requestAnimationFrame(t),F=!0)},
stop:function(){A.cancelAnimationFrame(X);F=!1},setAnimationLoop:function(bb){Q=bb},setContext:function(bb){A=bb}}}function Vb(t,A){function F(bb,Wa){const Ab=bb.array,fc=bb.usage,Lc=t.createBuffer();t.bindBuffer(Wa,Lc);t.bufferData(Wa,Ab,fc);bb.onUploadCallback();if(Ab instanceof Float32Array)Wa=5126;else if(Ab instanceof Uint16Array)if(bb.isFloat16BufferAttribute)if(Q)Wa=5131;else throw Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");else Wa=5123;else if(Ab instanceof
Int16Array)Wa=5122;else if(Ab instanceof Uint32Array)Wa=5125;else if(Ab instanceof Int32Array)Wa=5124;else if(Ab instanceof Int8Array)Wa=5120;else if(Ab instanceof Uint8Array)Wa=5121;else if(Ab instanceof Uint8ClampedArray)Wa=5121;else throw Error("THREE.WebGLAttributes: Unsupported buffer data format: "+Ab);return{buffer:Lc,type:Wa,bytesPerElement:Ab.BYTES_PER_ELEMENT,version:bb.version}}const Q=A.isWebGL2,X=new WeakMap;return{get:function(bb){bb.isInterleavedBufferAttribute&&(bb=bb.data);return X.get(bb)},
remove:function(bb){bb.isInterleavedBufferAttribute&&(bb=bb.data);const Wa=X.get(bb);Wa&&(t.deleteBuffer(Wa.buffer),X.delete(bb))},update:function(bb,Wa){if(bb.isGLBufferAttribute)Wa=X.get(bb),(!Wa||Wa.version<bb.version)&&X.set(bb,{buffer:bb.buffer,type:bb.type,bytesPerElement:bb.elementSize,version:bb.version});else{bb.isInterleavedBufferAttribute&&(bb=bb.data);var Ab=X.get(bb);if(void 0===Ab)X.set(bb,F(bb,Wa));else if(Ab.version<bb.version){{const fc=bb.array,Lc=bb.updateRange;t.bindBuffer(Wa,
Ab.buffer);-1===Lc.count?t.bufferSubData(Wa,0,fc):(Q?t.bufferSubData(Wa,Lc.offset*fc.BYTES_PER_ELEMENT,fc,Lc.offset,Lc.count):t.bufferSubData(Wa,Lc.offset*fc.BYTES_PER_ELEMENT,fc.subarray(Lc.offset,Lc.offset+Lc.count)),Lc.count=-1)}Ab.version=bb.version}}}}}function pb(t,A,F,Q,X,bb){function Wa(qe,nc){F.buffers.color.setClear(qe.r,qe.g,qe.b,nc,bb)}const Ab=new Cd(0);let fc=!0===X?0:1,Lc,wd,le=null,je=0,pe=null;return{getClearColor:function(){return Ab},setClearColor:function(qe,nc=1){Ab.set(qe);fc=
nc;Wa(Ab,fc)},getClearAlpha:function(){return fc},setClearAlpha:function(qe){fc=qe;Wa(Ab,fc)},render:function(qe,nc){let Ke=!1;(nc=!0===nc.isScene?nc.background:null)&&nc.isTexture&&(nc=A.get(nc));var $f=t.xr;($f=$f.getSession&&$f.getSession())&&"additive"===$f.environmentBlendMode&&(nc=null);null===nc?Wa(Ab,fc):nc&&nc.isColor&&(Wa(nc,1),Ke=!0);(t.autoClear||Ke)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil);if(nc&&(nc.isCubeTexture||306===nc.mapping)){void 0===wd&&(wd=new Nl(new En(1,
1,1),new lm({name:"BackgroundCubeMaterial",uniforms:ab(ym.cube.uniforms),vertexShader:ym.cube.vertexShader,fragmentShader:ym.cube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1})),wd.geometry.deleteAttribute("normal"),wd.geometry.deleteAttribute("uv"),wd.onBeforeRender=function(Te,ug,Jf){this.matrixWorld.copyPosition(Jf.matrixWorld)},Object.defineProperty(wd.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),Q.update(wd));wd.material.uniforms.envMap.value=nc;wd.material.uniforms.flipEnvMap.value=
nc.isCubeTexture&&!1===nc.isRenderTargetTexture?-1:1;if(le!==nc||je!==nc.version||pe!==t.toneMapping)wd.material.needsUpdate=!0,le=nc,je=nc.version,pe=t.toneMapping;wd.layers.enableAll();qe.unshift(wd,wd.geometry,wd.material,0,0,null)}else if(nc&&nc.isTexture){void 0===Lc&&(Lc=new Nl(new op(2,2),new lm({name:"BackgroundMaterial",uniforms:ab(ym.background.uniforms),vertexShader:ym.background.vertexShader,fragmentShader:ym.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1})),Lc.geometry.deleteAttribute("normal"),
Object.defineProperty(Lc.material,"map",{get:function(){return this.uniforms.t2D.value}}),Q.update(Lc));Lc.material.uniforms.t2D.value=nc;!0===nc.matrixAutoUpdate&&nc.updateMatrix();Lc.material.uniforms.uvTransform.value.copy(nc.matrix);if(le!==nc||je!==nc.version||pe!==t.toneMapping)Lc.material.needsUpdate=!0,le=nc,je=nc.version,pe=t.toneMapping;Lc.layers.enableAll();qe.unshift(Lc,Lc.geometry,Lc.material,0,0,null)}}}}function Nb(t,A,F,Q){function X(Jf){return Q.isWebGL2?t.bindVertexArray(Jf):qe.bindVertexArrayOES(Jf)}
function bb(Jf){return Q.isWebGL2?t.deleteVertexArray(Jf):qe.deleteVertexArrayOES(Jf)}function Wa(Jf){const Hf=[],Ig=[],Tg=[];for(let Lf=0;Lf<pe;Lf++)Hf[Lf]=0,Ig[Lf]=0,Tg[Lf]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:Hf,enabledAttributes:Ig,attributeDivisors:Tg,object:Jf,attributes:{},index:null}}function Ab(){const Jf=Te.newAttributes;for(let Hf=0,Ig=Jf.length;Hf<Ig;Hf++)Jf[Hf]=0}function fc(Jf){Lc(Jf,0)}function Lc(Jf,Hf){const Ig=Te.enabledAttributes,Tg=Te.attributeDivisors;
Te.newAttributes[Jf]=1;0===Ig[Jf]&&(t.enableVertexAttribArray(Jf),Ig[Jf]=1);Tg[Jf]!==Hf&&((Q.isWebGL2?t:A.get("ANGLE_instanced_arrays"))[Q.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](Jf,Hf),Tg[Jf]=Hf)}function wd(){const Jf=Te.newAttributes,Hf=Te.enabledAttributes;for(let Ig=0,Tg=Hf.length;Ig<Tg;Ig++)Hf[Ig]!==Jf[Ig]&&(t.disableVertexAttribArray(Ig),Hf[Ig]=0)}function le(){je();ug=!0;Te!==$f&&(Te=$f,X(Te.object))}function je(){$f.geometry=null;$f.program=null;$f.wireframe=!1}const pe=
t.getParameter(34921),qe=Q.isWebGL2?null:A.get("OES_vertex_array_object"),nc=Q.isWebGL2||null!==qe,Ke={},$f=Wa(null);let Te=$f,ug=!1;return{setup:function(Jf,Hf,Ig,Tg,Lf){var yf=!1;if(nc){yf=!0===Hf.wireframe;var Qe=Ke[Tg.id];void 0===Qe&&(Qe={},Ke[Tg.id]=Qe);var zg=Qe[Ig.id];void 0===zg&&(zg={},Qe[Ig.id]=zg);Qe=zg[yf];void 0===Qe&&(Qe=Wa(Q.isWebGL2?t.createVertexArray():qe.createVertexArrayOES()),zg[yf]=Qe);yf=Qe;Te!==yf&&(Te=yf,X(Te.object));a:{yf=Te.attributes;zg=Tg.attributes;Qe=0;var Dh=Ig.getAttributes();
for(var Jg in Dh)if(0<=Dh[Jg].location){var zh=yf[Jg],jh=zg[Jg];void 0===jh&&("instanceMatrix"===Jg&&Jf.instanceMatrix&&(jh=Jf.instanceMatrix),"instanceColor"===Jg&&Jf.instanceColor&&(jh=Jf.instanceColor));if(void 0===zh||zh.attribute!==jh||jh&&zh.data!==jh.data){yf=!0;break a}Qe++}yf=Te.attributesNum!==Qe||Te.index!==Lf?!0:!1}if(yf){Jg={};zg=Tg.attributes;Qe=0;Dh=Ig.getAttributes();for(var Pg in Dh)0<=Dh[Pg].location&&(zh=zg[Pg],void 0===zh&&("instanceMatrix"===Pg&&Jf.instanceMatrix&&(zh=Jf.instanceMatrix),
"instanceColor"===Pg&&Jf.instanceColor&&(zh=Jf.instanceColor)),jh={},(jh.attribute=zh)&&zh.data&&(jh.data=zh.data),Jg[Pg]=jh,Qe++);Te.attributes=Jg;Te.attributesNum=Qe;Te.index=Lf}}else if(Pg=!0===Hf.wireframe,Te.geometry!==Tg.id||Te.program!==Ig.id||Te.wireframe!==Pg)Te.geometry=Tg.id,Te.program=Ig.id,Te.wireframe=Pg,yf=!0;null!==Lf&&F.update(Lf,34963);if(yf||ug){ug=!1;if(!1!==Q.isWebGL2||!Jf.isInstancedMesh&&!Tg.isInstancedBufferGeometry||null!==A.get("ANGLE_instanced_arrays")){Ab();Pg=Tg.attributes;
Ig=Ig.getAttributes();Hf=Hf.defaultAttributeValues;for(const lj in Ig)if(Jg=Ig[lj],0<=Jg.location)if(jh=Pg[lj],void 0===jh&&("instanceMatrix"===lj&&Jf.instanceMatrix&&(jh=Jf.instanceMatrix),"instanceColor"===lj&&Jf.instanceColor&&(jh=Jf.instanceColor)),void 0!==jh){if(yf=jh.normalized,zg=jh.itemSize,Dh=F.get(jh),void 0!==Dh){var ah=Dh.buffer;Qe=Dh.type;Dh=Dh.bytesPerElement;if(jh.isInterleavedBufferAttribute){var nh=jh.data;zh=nh.stride;jh=jh.offset;if(nh.isInstancedInterleavedBuffer){for(var Fi=
0;Fi<Jg.locationSize;Fi++)Lc(Jg.location+Fi,nh.meshPerAttribute);!0!==Jf.isInstancedMesh&&void 0===Tg._maxInstanceCount&&(Tg._maxInstanceCount=nh.meshPerAttribute*nh.count)}else for(nh=0;nh<Jg.locationSize;nh++)fc(Jg.location+nh);t.bindBuffer(34962,ah);for(let sj=0;sj<Jg.locationSize;sj++){ah=Jg.location+sj;nh=zg/Jg.locationSize;Fi=Qe;var vi=zh*Dh,Bj=(jh+zg/Jg.locationSize*sj)*Dh;!0!==Q.isWebGL2||5124!==Fi&&5125!==Fi?t.vertexAttribPointer(ah,nh,Fi,yf,vi,Bj):t.vertexAttribIPointer(ah,nh,Fi,vi,Bj)}}else{if(jh.isInstancedBufferAttribute){for(zh=
0;zh<Jg.locationSize;zh++)Lc(Jg.location+zh,jh.meshPerAttribute);!0!==Jf.isInstancedMesh&&void 0===Tg._maxInstanceCount&&(Tg._maxInstanceCount=jh.meshPerAttribute*jh.count)}else for(zh=0;zh<Jg.locationSize;zh++)fc(Jg.location+zh);t.bindBuffer(34962,ah);for(vi=0;vi<Jg.locationSize;vi++)zh=Jg.location+vi,jh=zg/Jg.locationSize,ah=Qe,nh=zg*Dh,Fi=zg/Jg.locationSize*vi*Dh,!0!==Q.isWebGL2||5124!==ah&&5125!==ah?t.vertexAttribPointer(zh,jh,ah,yf,nh,Fi):t.vertexAttribIPointer(zh,jh,ah,nh,Fi)}}}else if(void 0!==
Hf&&(yf=Hf[lj],void 0!==yf))switch(yf.length){case 2:t.vertexAttrib2fv(Jg.location,yf);break;case 3:t.vertexAttrib3fv(Jg.location,yf);break;case 4:t.vertexAttrib4fv(Jg.location,yf);break;default:t.vertexAttrib1fv(Jg.location,yf)}wd()}null!==Lf&&t.bindBuffer(34963,F.get(Lf).buffer)}},reset:le,resetDefaultState:je,dispose:function(){le();for(const Jf in Ke){const Hf=Ke[Jf];for(const Ig in Hf){const Tg=Hf[Ig];for(const Lf in Tg)bb(Tg[Lf].object),delete Tg[Lf];delete Hf[Ig]}delete Ke[Jf]}},releaseStatesOfGeometry:function(Jf){if(void 0!==
Ke[Jf.id]){var Hf=Ke[Jf.id];for(const Ig in Hf){const Tg=Hf[Ig];for(const Lf in Tg)bb(Tg[Lf].object),delete Tg[Lf];delete Hf[Ig]}delete Ke[Jf.id]}},releaseStatesOfProgram:function(Jf){for(const Hf in Ke){const Ig=Ke[Hf];if(void 0===Ig[Jf.id])continue;const Tg=Ig[Jf.id];for(const Lf in Tg)bb(Tg[Lf].object),delete Tg[Lf];delete Ig[Jf.id]}},initAttributes:Ab,enableAttribute:fc,disableUnusedAttributes:wd}}function zb(t,A,F,Q){const X=Q.isWebGL2;let bb;this.setMode=function(Wa){bb=Wa};this.render=function(Wa,
Ab){t.drawArrays(bb,Wa,Ab);F.update(Ab,bb,1)};this.renderInstances=function(Wa,Ab,fc){if(0!==fc){if(X){var Lc=t;var wd="drawArraysInstanced"}else if(Lc=A.get("ANGLE_instanced_arrays"),wd="drawArraysInstancedANGLE",null===Lc){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}Lc[wd](bb,Wa,Ab,fc);F.update(Ab,bb,fc)}}}function rb(t,A,F){function Q(Jf){if("highp"===Jf){if(0<t.getShaderPrecisionFormat(35633,
36338).precision&&0<t.getShaderPrecisionFormat(35632,36338).precision)return"highp";Jf="mediump"}return"mediump"===Jf&&0<t.getShaderPrecisionFormat(35633,36337).precision&&0<t.getShaderPrecisionFormat(35632,36337).precision?"mediump":"lowp"}let X;const bb="undefined"!==typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext||"undefined"!==typeof WebGL2ComputeRenderingContext&&t instanceof WebGL2ComputeRenderingContext;let Wa=void 0!==F.precision?F.precision:"highp";var Ab=Q(Wa);Ab!==Wa&&
(console.warn("THREE.WebGLRenderer:",Wa,"not supported, using",Ab,"instead."),Wa=Ab);Ab=bb||A.has("WEBGL_draw_buffers");F=!0===F.logarithmicDepthBuffer;const fc=t.getParameter(34930),Lc=t.getParameter(35660),wd=t.getParameter(3379),le=t.getParameter(34076),je=t.getParameter(34921),pe=t.getParameter(36347),qe=t.getParameter(36348),nc=t.getParameter(36349),Ke=0<Lc,$f=bb||A.has("OES_texture_float"),Te=Ke&&$f,ug=bb?t.getParameter(36183):0;return{isWebGL2:bb,drawBuffers:Ab,getMaxAnisotropy:function(){if(void 0!==
X)return X;if(!0===A.has("EXT_texture_filter_anisotropic")){const Jf=A.get("EXT_texture_filter_anisotropic");X=t.getParameter(Jf.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else X=0;return X},getMaxPrecision:Q,precision:Wa,logarithmicDepthBuffer:F,maxTextures:fc,maxVertexTextures:Lc,maxTextureSize:wd,maxCubemapSize:le,maxAttributes:je,maxVertexUniforms:pe,maxVaryings:qe,maxFragmentUniforms:nc,vertexTextures:Ke,floatFragmentTextures:$f,floatVertexTextures:Te,maxSamples:ug}}function Ib(t){function A(){wd.value!==
X&&(wd.value=X,wd.needsUpdate=0<bb);Q.numPlanes=bb;Q.numIntersection=0}function F(le,je,pe,qe){const nc=null!==le?le.length:0;let Ke=null;if(0!==nc){Ke=wd.value;if(!0!==qe||null===Ke){qe=pe+4*nc;je=je.matrixWorldInverse;Lc.getNormalMatrix(je);if(null===Ke||Ke.length<qe)Ke=new Float32Array(qe);for(let $f=0,Te=pe;$f!==nc;++$f,Te+=4)fc.copy(le[$f]).applyMatrix4(je,Lc),fc.normal.toArray(Ke,Te),Ke[Te+3]=fc.constant}wd.value=Ke;wd.needsUpdate=!0}Q.numPlanes=nc;Q.numIntersection=0;return Ke}const Q=this;
let X=null,bb=0,Wa=!1,Ab=!1;const fc=new Ym,Lc=new pd,wd={value:null,needsUpdate:!1};this.uniform=wd;this.numIntersection=this.numPlanes=0;this.init=function(le,je,pe){const qe=0!==le.length||je||0!==bb||Wa;Wa=je;X=F(le,pe,0);bb=le.length;return qe};this.beginShadows=function(){Ab=!0;F(null)};this.endShadows=function(){Ab=!1;A()};this.setState=function(le,je,pe){const qe=le.clippingPlanes,nc=le.clipIntersection;var Ke=le.clipShadows;le=t.get(le);if(!Wa||null===qe||0===qe.length||Ab&&!Ke)Ab?F(null):
A();else{Ke=Ab?0:bb;const $f=4*Ke;let Te=le.clippingState||null;wd.value=Te;Te=F(qe,je,$f,pe);for(je=0;je!==$f;++je)Te[je]=X[je];le.clippingState=Te;this.numIntersection=nc?this.numPlanes:0;this.numPlanes+=Ke}}}function da(t){function A(X,bb){303===bb?X.mapping=301:304===bb&&(X.mapping=302);return X}function F(X){X=X.target;X.removeEventListener("dispose",F);const bb=Q.get(X);void 0!==bb&&(Q.delete(X),bb.dispose())}let Q=new WeakMap;return{get:function(X){if(X&&X.isTexture&&!1===X.isRenderTargetTexture){var bb=
X.mapping;if(303===bb||304===bb)return Q.has(X)?(bb=Q.get(X).texture,A(bb,X.mapping)):(bb=X.image)&&0<bb.height?(bb=new bo(bb.height/2),bb.fromEquirectangularTexture(t,X),Q.set(X,bb),X.addEventListener("dispose",F),A(bb.texture,X.mapping)):null}return X},dispose:function(){Q=new WeakMap}}}function ka(t,A,F){t=new be(t,A,F);t.texture.mapping=306;t.texture.name="PMREM.cubeUv";t.scissorTest=!0;return t}function va(t,A,F,Q,X){t.viewport.set(A,F,Q,X);t.scissor.set(A,F,Q,X)}function Fa(){return new lm({name:"EquirectangularToCubeUV",
uniforms:{envMap:{value:null}},vertexShader:Aa(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function M(){return new lm({name:"CubemapToCubeUV",
uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:Aa(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function Aa(){return"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t"}
function wb(t){function A(X){X=X.target;X.removeEventListener("dispose",A);const bb=F.get(X);void 0!==bb&&(F.delete(X),bb.dispose())}let F=new WeakMap,Q=null;return{get:function(X){if(X&&X.isTexture){var bb=X.mapping,Wa=303===bb||304===bb,Ab=301===bb||302===bb;if(Wa||Ab){if(X.isRenderTargetTexture&&!0===X.needsPMREMUpdate)return X.needsPMREMUpdate=!1,bb=F.get(X),null===Q&&(Q=new qp(t)),bb=Wa?Q.fromEquirectangular(X,bb):Q.fromCubemap(X,bb),F.set(X,bb),bb.texture;if(F.has(X))return F.get(X).texture;
bb=X.image;var fc;if(!(fc=Wa&&bb&&0<bb.height)&&(fc=Ab&&bb)){fc=0;for(Ab=0;6>Ab;Ab++)void 0!==bb[Ab]&&fc++;fc=6===fc}return fc?(null===Q&&(Q=new qp(t)),Wa=Wa?Q.fromEquirectangular(X):Q.fromCubemap(X),F.set(X,Wa),X.addEventListener("dispose",A),Wa.texture):null}}return X},dispose:function(){F=new WeakMap;null!==Q&&(Q.dispose(),Q=null)}}}function Na(t){function A(Q){if(void 0!==F[Q])return F[Q];let X;switch(Q){case "WEBGL_depth_texture":X=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||
t.getExtension("WEBKIT_WEBGL_depth_texture");break;case "EXT_texture_filter_anisotropic":X=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case "WEBGL_compressed_texture_s3tc":X=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case "WEBGL_compressed_texture_pvrtc":X=t.getExtension("WEBGL_compressed_texture_pvrtc")||
t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:X=t.getExtension(Q)}return F[Q]=X}const F={};return{has:function(Q){return null!==A(Q)},init:function(Q){Q.isWebGL2?A("EXT_color_buffer_float"):(A("WEBGL_depth_texture"),A("OES_texture_float"),A("OES_texture_half_float"),A("OES_texture_half_float_linear"),A("OES_standard_derivatives"),A("OES_element_index_uint"),A("OES_vertex_array_object"),A("ANGLE_instanced_arrays"));A("OES_texture_float_linear");A("EXT_color_buffer_half_float");
A("WEBGL_multisampled_render_to_texture")},get:function(Q){const X=A(Q);null===X&&console.warn("THREE.WebGLRenderer: "+Q+" extension not supported.");return X}}}function hb(t,A,F,Q){function X(fc){fc=fc.target;null!==fc.index&&A.remove(fc.index);for(var Lc in fc.attributes)A.remove(fc.attributes[Lc]);fc.removeEventListener("dispose",X);delete Wa[fc.id];if(Lc=Ab.get(fc))A.remove(Lc),Ab.delete(fc);Q.releaseStatesOfGeometry(fc);!0===fc.isInstancedBufferGeometry&&delete fc._maxInstanceCount;F.memory.geometries--}
function bb(fc){var Lc=[],wd=fc.index,le=fc.attributes.position;if(null!==wd){le=wd.array;wd=wd.version;for(let qe=0,nc=le.length;qe<nc;qe+=3){var je=le[qe+0],pe=le[qe+1];const Ke=le[qe+2];Lc.push(je,pe,pe,Ke,Ke,je)}}else{je=le.array;wd=le.version;for(let qe=0,nc=je.length/3-1;qe<nc;qe+=3)le=qe+0,je=qe+1,pe=qe+2,Lc.push(le,je,je,pe,pe,le)}Lc=new (lc(Lc)?wg:Wh)(Lc,1);Lc.version=wd;(wd=Ab.get(fc))&&A.remove(wd);Ab.set(fc,Lc)}const Wa={},Ab=new WeakMap;return{get:function(fc,Lc){if(!0===Wa[Lc.id])return Lc;
Lc.addEventListener("dispose",X);Wa[Lc.id]=!0;F.memory.geometries++;return Lc},update:function(fc){var Lc=fc.attributes;for(const wd in Lc)A.update(Lc[wd],34962);fc=fc.morphAttributes;for(const wd in fc){Lc=fc[wd];for(let le=0,je=Lc.length;le<je;le++)A.update(Lc[le],34962)}},getWireframeAttribute:function(fc){const Lc=Ab.get(fc);if(Lc){const wd=fc.index;null!==wd&&Lc.version<wd.version&&bb(fc)}else bb(fc);return Ab.get(fc)}}}function Bb(t,A,F,Q){const X=Q.isWebGL2;let bb,Wa,Ab;this.setMode=function(fc){bb=
fc};this.setIndex=function(fc){Wa=fc.type;Ab=fc.bytesPerElement};this.render=function(fc,Lc){t.drawElements(bb,Lc,Wa,fc*Ab);F.update(Lc,bb,1)};this.renderInstances=function(fc,Lc,wd){if(0!==wd){if(X){var le=t;var je="drawElementsInstanced"}else if(le=A.get("ANGLE_instanced_arrays"),je="drawElementsInstancedANGLE",null===le){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}le[je](bb,Lc,Wa,fc*
Ab,wd);F.update(Lc,bb,wd)}}}function ba(t){const A={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:A,programs:null,autoReset:!0,reset:function(){A.frame++;A.calls=0;A.triangles=0;A.points=0;A.lines=0},update:function(F,Q,X){A.calls++;switch(Q){case 4:A.triangles+=F/3*X;break;case 1:A.lines+=F/2*X;break;case 3:A.lines+=X*(F-1);break;case 2:A.lines+=X*F;break;case 0:A.points+=X*F;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",Q)}}}}function dc(t,
A){return t[0]-A[0]}function la(t,A){return Math.abs(A[1])-Math.abs(t[1])}function Fb(t,A){let F=1;A=A.isInterleavedBufferAttribute?A.data.array:A.array;A instanceof Int8Array?F=127:A instanceof Uint8Array?F=255:A instanceof Uint16Array?F=65535:A instanceof Int16Array?F=32767:A instanceof Int32Array?F=2147483647:console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ",A);t.divideScalar(F)}function vb(t,A,F){const Q={},X=new Float32Array(8),bb=new WeakMap,Wa=new eg,Ab=[];for(let fc=
0;8>fc;fc++)Ab[fc]=[fc,0];return{update:function(fc,Lc,wd,le){fc=fc.morphTargetInfluences;if(!0===A.isWebGL2){wd=Lc.morphAttributes.position||Lc.morphAttributes.normal||Lc.morphAttributes.color;wd=void 0!==wd?wd.length:0;var je=bb.get(Lc);if(void 0===je||je.count!==wd){void 0!==je&&je.texture.dispose();je=void 0!==Lc.morphAttributes.position;var pe=void 0!==Lc.morphAttributes.normal,qe=void 0!==Lc.morphAttributes.color,nc=Lc.morphAttributes.position||[];const $f=Lc.morphAttributes.normal||[],Te=Lc.morphAttributes.color||
[];var Ke=0;!0===je&&(Ke=1);!0===pe&&(Ke=2);!0===qe&&(Ke=3);let ug=Lc.attributes.position.count*Ke,Jf=1;ug>A.maxTextureSize&&(Jf=Math.ceil(ug/A.maxTextureSize),ug=A.maxTextureSize);const Hf=new Float32Array(ug*Jf*4*wd),Ig=new v(Hf,ug,Jf,wd);Ig.type=1015;Ig.needsUpdate=!0;Ke*=4;for(let Lf=0;Lf<wd;Lf++){const yf=nc[Lf],Qe=$f[Lf],zg=Te[Lf],Dh=ug*Jf*4*Lf;for(let Jg=0;Jg<yf.count;Jg++){const zh=Jg*Ke;!0===je&&(Wa.fromBufferAttribute(yf,Jg),!0===yf.normalized&&Fb(Wa,yf),Hf[Dh+zh+0]=Wa.x,Hf[Dh+zh+1]=Wa.y,
Hf[Dh+zh+2]=Wa.z,Hf[Dh+zh+3]=0);!0===pe&&(Wa.fromBufferAttribute(Qe,Jg),!0===Qe.normalized&&Fb(Wa,Qe),Hf[Dh+zh+4]=Wa.x,Hf[Dh+zh+5]=Wa.y,Hf[Dh+zh+6]=Wa.z,Hf[Dh+zh+7]=0);!0===qe&&(Wa.fromBufferAttribute(zg,Jg),!0===zg.normalized&&Fb(Wa,zg),Hf[Dh+zh+8]=Wa.x,Hf[Dh+zh+9]=Wa.y,Hf[Dh+zh+10]=Wa.z,Hf[Dh+zh+11]=4===zg.itemSize?Wa.w:1)}}je={count:wd,texture:Ig,size:new tg(ug,Jf)};bb.set(Lc,je);function Tg(){Ig.dispose();bb.delete(Lc);Lc.removeEventListener("dispose",Tg)}Lc.addEventListener("dispose",Tg)}wd=
0;for(pe=0;pe<fc.length;pe++)wd+=fc[pe];wd=Lc.morphTargetsRelative?1:1-wd;le.getUniforms().setValue(t,"morphTargetBaseInfluence",wd);le.getUniforms().setValue(t,"morphTargetInfluences",fc);le.getUniforms().setValue(t,"morphTargetsTexture",je.texture,F);le.getUniforms().setValue(t,"morphTargetsTextureSize",je.size)}else{wd=void 0===fc?0:fc.length;je=Q[Lc.id];if(void 0===je||je.length!==wd){je=[];for(pe=0;pe<wd;pe++)je[pe]=[pe,0];Q[Lc.id]=je}for(pe=0;pe<wd;pe++)qe=je[pe],qe[0]=pe,qe[1]=fc[pe];je.sort(la);
for(fc=0;8>fc;fc++)fc<wd&&je[fc][1]?(Ab[fc][0]=je[fc][0],Ab[fc][1]=je[fc][1]):(Ab[fc][0]=Number.MAX_SAFE_INTEGER,Ab[fc][1]=0);Ab.sort(dc);fc=Lc.morphAttributes.position;wd=Lc.morphAttributes.normal;je=0;for(pe=0;8>pe;pe++)nc=Ab[pe],qe=nc[0],nc=nc[1],qe!==Number.MAX_SAFE_INTEGER&&nc?(fc&&Lc.getAttribute("morphTarget"+pe)!==fc[qe]&&Lc.setAttribute("morphTarget"+pe,fc[qe]),wd&&Lc.getAttribute("morphNormal"+pe)!==wd[qe]&&Lc.setAttribute("morphNormal"+pe,wd[qe]),X[pe]=nc,je+=nc):(fc&&!0===Lc.hasAttribute("morphTarget"+
pe)&&Lc.deleteAttribute("morphTarget"+pe),wd&&!0===Lc.hasAttribute("morphNormal"+pe)&&Lc.deleteAttribute("morphNormal"+pe),X[pe]=0);fc=Lc.morphTargetsRelative?1:1-je;le.getUniforms().setValue(t,"morphTargetBaseInfluence",fc);le.getUniforms().setValue(t,"morphTargetInfluences",X)}}}}function Ia(t,A,F,Q){function X(Wa){Wa=Wa.target;Wa.removeEventListener("dispose",X);F.remove(Wa.instanceMatrix);null!==Wa.instanceColor&&F.remove(Wa.instanceColor)}let bb=new WeakMap;return{update:function(Wa){const Ab=
Q.render.frame,fc=A.get(Wa,Wa.geometry);bb.get(fc)!==Ab&&(A.update(fc),bb.set(fc,Ab));Wa.isInstancedMesh&&(!1===Wa.hasEventListener("dispose",X)&&Wa.addEventListener("dispose",X),F.update(Wa.instanceMatrix,34962),null!==Wa.instanceColor&&F.update(Wa.instanceColor,34962));return fc},dispose:function(){bb=new WeakMap}}}function xb(t,A,F){const Q=t[0];if(0>=Q||0<Q)return t;const X=A*F;let bb=rn[X];void 0===bb&&(bb=new Float32Array(X),rn[X]=bb);if(0!==A){Q.toArray(bb,0);for(let Wa=1,Ab=0;Wa!==A;++Wa)Ab+=
F,t[Wa].toArray(bb,Ab)}return bb}function Rb(t,A){if(t.length!==A.length)return!1;for(let F=0,Q=t.length;F<Q;F++)if(t[F]!==A[F])return!1;return!0}function yc(t,A){for(let F=0,Q=A.length;F<Q;F++)t[F]=A[F]}function id(t,A){let F=up[A];void 0===F&&(F=new Int32Array(A),up[A]=F);for(let Q=0;Q!==A;++Q)F[Q]=t.allocateTextureUnit();return F}function ob(t,A){const F=this.cache;F[0]!==A&&(t.uniform1f(this.addr,A),F[0]=A)}function Pb(t,A){const F=this.cache;if(void 0!==A.x){if(F[0]!==A.x||F[1]!==A.y)t.uniform2f(this.addr,
A.x,A.y),F[0]=A.x,F[1]=A.y}else Rb(F,A)||(t.uniform2fv(this.addr,A),yc(F,A))}function tb(t,A){const F=this.cache;if(void 0!==A.x){if(F[0]!==A.x||F[1]!==A.y||F[2]!==A.z)t.uniform3f(this.addr,A.x,A.y,A.z),F[0]=A.x,F[1]=A.y,F[2]=A.z}else if(void 0!==A.r){if(F[0]!==A.r||F[1]!==A.g||F[2]!==A.b)t.uniform3f(this.addr,A.r,A.g,A.b),F[0]=A.r,F[1]=A.g,F[2]=A.b}else Rb(F,A)||(t.uniform3fv(this.addr,A),yc(F,A))}function xc(t,A){const F=this.cache;if(void 0!==A.x){if(F[0]!==A.x||F[1]!==A.y||F[2]!==A.z||F[3]!==
A.w)t.uniform4f(this.addr,A.x,A.y,A.z,A.w),F[0]=A.x,F[1]=A.y,F[2]=A.z,F[3]=A.w}else Rb(F,A)||(t.uniform4fv(this.addr,A),yc(F,A))}function Pc(t,A){const F=this.cache,Q=A.elements;void 0===Q?Rb(F,A)||(t.uniformMatrix2fv(this.addr,!1,A),yc(F,A)):Rb(F,Q)||(Gn.set(Q),t.uniformMatrix2fv(this.addr,!1,Gn),yc(F,Q))}function nd(t,A){const F=this.cache,Q=A.elements;void 0===Q?Rb(F,A)||(t.uniformMatrix3fv(this.addr,!1,A),yc(F,A)):Rb(F,Q)||(vp.set(Q),t.uniformMatrix3fv(this.addr,!1,vp),yc(F,Q))}function Id(t,
A){const F=this.cache,Q=A.elements;void 0===Q?Rb(F,A)||(t.uniformMatrix4fv(this.addr,!1,A),yc(F,A)):Rb(F,Q)||(sn.set(Q),t.uniformMatrix4fv(this.addr,!1,sn),yc(F,Q))}function Hb(t,A){const F=this.cache;F[0]!==A&&(t.uniform1i(this.addr,A),F[0]=A)}function Kd(t,A){const F=this.cache;Rb(F,A)||(t.uniform2iv(this.addr,A),yc(F,A))}function vc(t,A){const F=this.cache;Rb(F,A)||(t.uniform3iv(this.addr,A),yc(F,A))}function Qc(t,A){const F=this.cache;Rb(F,A)||(t.uniform4iv(this.addr,A),yc(F,A))}function kb(t,
A){const F=this.cache;F[0]!==A&&(t.uniform1ui(this.addr,A),F[0]=A)}function Cc(t,A){const F=this.cache;Rb(F,A)||(t.uniform2uiv(this.addr,A),yc(F,A))}function zc(t,A){const F=this.cache;Rb(F,A)||(t.uniform3uiv(this.addr,A),yc(F,A))}function Fc(t,A){const F=this.cache;Rb(F,A)||(t.uniform4uiv(this.addr,A),yc(F,A))}function xd(t,A,F){const Q=this.cache,X=F.allocateTextureUnit();Q[0]!==X&&(t.uniform1i(this.addr,X),Q[0]=X);F.setTexture2D(A||rp,X)}function Uc(t,A,F){const Q=this.cache,X=F.allocateTextureUnit();
Q[0]!==X&&(t.uniform1i(this.addr,X),Q[0]=X);F.setTexture3D(A||Bo,X)}function Md(t,A,F){const Q=this.cache,X=F.allocateTextureUnit();Q[0]!==X&&(t.uniform1i(this.addr,X),Q[0]=X);F.setTextureCube(A||tp,X)}function Ob(t,A,F){const Q=this.cache,X=F.allocateTextureUnit();Q[0]!==X&&(t.uniform1i(this.addr,X),Q[0]=X);F.setTexture2DArray(A||sp,X)}function Le(t){switch(t){case 5126:return ob;case 35664:return Pb;case 35665:return tb;case 35666:return xc;case 35674:return Pc;case 35675:return nd;case 35676:return Id;
case 5124:case 35670:return Hb;case 35667:case 35671:return Kd;case 35668:case 35672:return vc;case 35669:case 35673:return Qc;case 5125:return kb;case 36294:return Cc;case 36295:return zc;case 36296:return Fc;case 35678:case 36198:case 36298:case 36306:case 35682:return xd;case 35679:case 36299:case 36307:return Uc;case 35680:case 36300:case 36308:case 36293:return Md;case 36289:case 36303:case 36311:case 36292:return Ob}}function We(t,A){t.uniform1fv(this.addr,A)}function xe(t,A){A=xb(A,this.size,
2);t.uniform2fv(this.addr,A)}function Fg(t,A){A=xb(A,this.size,3);t.uniform3fv(this.addr,A)}function Zc(t,A){A=xb(A,this.size,4);t.uniform4fv(this.addr,A)}function rd(t,A){A=xb(A,this.size,4);t.uniformMatrix2fv(this.addr,!1,A)}function ti(t,A){A=xb(A,this.size,9);t.uniformMatrix3fv(this.addr,!1,A)}function dg(t,A){A=xb(A,this.size,16);t.uniformMatrix4fv(this.addr,!1,A)}function Of(t,A){t.uniform1iv(this.addr,A)}function mg(t,A){t.uniform2iv(this.addr,A)}function wf(t,A){t.uniform3iv(this.addr,A)}
function mf(t,A){t.uniform4iv(this.addr,A)}function Mb(t,A){t.uniform1uiv(this.addr,A)}function gd(t,A){t.uniform2uiv(this.addr,A)}function Vd(t,A){t.uniform3uiv(this.addr,A)}function sf(t,A){t.uniform4uiv(this.addr,A)}function hg(t,A,F){const Q=A.length,X=id(F,Q);t.uniform1iv(this.addr,X);for(t=0;t!==Q;++t)F.setTexture2D(A[t]||rp,X[t])}function bh(t,A,F){const Q=A.length,X=id(F,Q);t.uniform1iv(this.addr,X);for(t=0;t!==Q;++t)F.setTexture3D(A[t]||Bo,X[t])}function Qf(t,A,F){const Q=A.length,X=id(F,
Q);t.uniform1iv(this.addr,X);for(t=0;t!==Q;++t)F.setTextureCube(A[t]||tp,X[t])}function he(t,A,F){const Q=A.length,X=id(F,Q);t.uniform1iv(this.addr,X);for(t=0;t!==Q;++t)F.setTexture2DArray(A[t]||sp,X[t])}function Uf(t){switch(t){case 5126:return We;case 35664:return xe;case 35665:return Fg;case 35666:return Zc;case 35674:return rd;case 35675:return ti;case 35676:return dg;case 5124:case 35670:return Of;case 35667:case 35671:return mg;case 35668:case 35672:return wf;case 35669:case 35673:return mf;
case 5125:return Mb;case 36294:return gd;case 36295:return Vd;case 36296:return sf;case 35678:case 36198:case 36298:case 36306:case 35682:return hg;case 35679:case 36299:case 36307:return bh;case 35680:case 36300:case 36308:case 36293:return Qf;case 36289:case 36303:case 36311:case 36292:return he}}function $g(t,A,F){A=t.createShader(A);t.shaderSource(A,F);t.compileShader(A);return A}function Ta(t,A,F){var Q=t.getShaderParameter(A,35713),X=t.getShaderInfoLog(A).trim();if(Q&&""===X)return"";if(Q=/ERROR: 0:(\d+)/.exec(X)){Q=
parseInt(Q[1]);F=F.toUpperCase()+"\n\n"+X+"\n\n";A=t.getShaderSource(A);t=Q;A=A.split("\n");X=[];var bb=Math.max(t-6,0);for(Q=Math.min(t+6,A.length);bb<Q;bb++){const Wa=bb+1;X.push(`${Wa===t?">":" "} ${Wa}: ${A[bb]}`)}t=X.join("\n");return F+t}return X}function th(t,A){a:switch(A){case 3E3:A=["Linear","( value )"];break a;case 3001:A=["sRGB","( value )"];break a;default:console.warn("THREE.WebGLProgram: Unsupported encoding:",A),A=["Linear","( value )"]}return"vec4 "+t+"( vec4 value ) { return LinearTo"+
A[0]+A[1]+"; }"}function Be(t,A){switch(A){case 1:A="Linear";break;case 2:A="Reinhard";break;case 3:A="OptimizedCineon";break;case 4:A="ACESFilmic";break;case 5:A="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",A),A="Linear"}return"vec3 "+t+"( vec3 color ) { return "+A+"ToneMapping( color ); }"}function cb(t){const A=[];for(const F in t){const Q=t[F];!1!==Q&&A.push("#define "+F+" "+Q)}return A.join("\n")}function Yb(t){return""!==t}function de(t,A){return t.replace(/NUM_DIR_LIGHTS/g,
A.numDirLights).replace(/NUM_SPOT_LIGHTS/g,A.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,A.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,A.numPointLights).replace(/NUM_HEMI_LIGHTS/g,A.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,A.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,A.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,A.numPointLightShadows)}function P(t,A){return t.replace(/NUM_CLIPPING_PLANES/g,A.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,A.numClippingPlanes-
A.numClipIntersection)}function pa(t,A){t=zj[A];if(void 0===t)throw Error("Can not resolve #include <"+A+">");return t.replace(Jn,pa)}function wa(t,A,F,Q){console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.");return Ea(t,A,F,Q)}function Ea(t,A,F,Q){t="";for(A=parseInt(A);A<parseInt(F);A++)t+=Q.replace(/\[\s*i\s*\]/g,"[ "+A+" ]").replace(/UNROLLED_LOOP_INDEX/g,A);return t}function ia(t){let A="precision "+t.precision+" float;\nprecision "+
t.precision+" int;";"highp"===t.precision?A+="\n#define HIGH_PRECISION":"mediump"===t.precision?A+="\n#define MEDIUM_PRECISION":"lowp"===t.precision&&(A+="\n#define LOW_PRECISION");return A}function Ca(t){let A="SHADOWMAP_TYPE_BASIC";1===t.shadowMapType?A="SHADOWMAP_TYPE_PCF":2===t.shadowMapType?A="SHADOWMAP_TYPE_PCF_SOFT":3===t.shadowMapType&&(A="SHADOWMAP_TYPE_VSM");return A}function w(t){let A="ENVMAP_TYPE_CUBE";if(t.envMap)switch(t.envMapMode){case 301:case 302:A="ENVMAP_TYPE_CUBE";break;case 306:A=
"ENVMAP_TYPE_CUBE_UV"}return A}function ma(t){let A="ENVMAP_MODE_REFLECTION";if(t.envMap)switch(t.envMapMode){case 302:A="ENVMAP_MODE_REFRACTION"}return A}function ua(t){let A="ENVMAP_BLENDING_NONE";if(t.envMap)switch(t.combine){case 0:A="ENVMAP_BLENDING_MULTIPLY";break;case 1:A="ENVMAP_BLENDING_MIX";break;case 2:A="ENVMAP_BLENDING_ADD"}return A}function ha(t){t=t.envMapCubeUVHeight;if(null===t)return null;const A=Math.log2(t)-2;return{texelWidth:1/(3*Math.max(Math.pow(2,A),112)),texelHeight:1/t,
maxMip:A}}function ra(t,A,F,Q){const X=t.getContext();var bb=F.defines,Wa=F.vertexShader,Ab=F.fragmentShader,fc=Ca(F),Lc=w(F),wd=ma(F),le=ua(F),je=ha(F),pe=F.isWebGL2?"":[F.extensionDerivatives||F.envMapCubeUVHeight||F.bumpMap||F.tangentSpaceNormalMap||F.clearcoatNormalMap||F.flatShading||"physical"===F.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(F.extensionFragDepth||F.logarithmicDepthBuffer)&&F.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",F.extensionDrawBuffers&&
F.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(F.extensionShaderTextureLOD||F.envMap||F.transmission)&&F.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Yb).join("\n");const qe=cb(bb),nc=X.createProgram();var Ke=F.glslVersion?"#version "+F.glslVersion+"\n":"";F.isRawShaderMaterial?(bb=[qe].filter(Yb).join("\n"),0<bb.length&&(bb+="\n"),fc=[pe,qe].filter(Yb).join("\n"),0<fc.length&&(fc+="\n")):(bb=[ia(F),"#define SHADER_NAME "+
F.shaderName,qe,F.instancing?"#define USE_INSTANCING":"",F.instancingColor?"#define USE_INSTANCING_COLOR":"",F.supportsVertexTextures?"#define VERTEX_TEXTURES":"",F.useFog&&F.fog?"#define USE_FOG":"",F.useFog&&F.fogExp2?"#define FOG_EXP2":"",F.map?"#define USE_MAP":"",F.envMap?"#define USE_ENVMAP":"",F.envMap?"#define "+wd:"",F.lightMap?"#define USE_LIGHTMAP":"",F.aoMap?"#define USE_AOMAP":"",F.emissiveMap?"#define USE_EMISSIVEMAP":"",F.bumpMap?"#define USE_BUMPMAP":"",F.normalMap?"#define USE_NORMALMAP":
"",F.normalMap&&F.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",F.normalMap&&F.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",F.clearcoatMap?"#define USE_CLEARCOATMAP":"",F.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",F.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",F.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",F.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",F.displacementMap&&F.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":
"",F.specularMap?"#define USE_SPECULARMAP":"",F.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",F.specularColorMap?"#define USE_SPECULARCOLORMAP":"",F.roughnessMap?"#define USE_ROUGHNESSMAP":"",F.metalnessMap?"#define USE_METALNESSMAP":"",F.alphaMap?"#define USE_ALPHAMAP":"",F.transmission?"#define USE_TRANSMISSION":"",F.transmissionMap?"#define USE_TRANSMISSIONMAP":"",F.thicknessMap?"#define USE_THICKNESSMAP":"",F.sheenColorMap?"#define USE_SHEENCOLORMAP":"",F.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":
"",F.vertexTangents?"#define USE_TANGENT":"",F.vertexColors?"#define USE_COLOR":"",F.vertexAlphas?"#define USE_COLOR_ALPHA":"",F.vertexUvs?"#define USE_UV":"",F.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",F.flatShading?"#define FLAT_SHADED":"",F.skinning?"#define USE_SKINNING":"",F.morphTargets?"#define USE_MORPHTARGETS":"",F.morphNormals&&!1===F.flatShading?"#define USE_MORPHNORMALS":"",F.morphColors&&F.isWebGL2?"#define USE_MORPHCOLORS":"",0<F.morphTargetsCount&&F.isWebGL2?"#define MORPHTARGETS_TEXTURE":
"",0<F.morphTargetsCount&&F.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+F.morphTextureStride:"",0<F.morphTargetsCount&&F.isWebGL2?"#define MORPHTARGETS_COUNT "+F.morphTargetsCount:"",F.doubleSided?"#define DOUBLE_SIDED":"",F.flipSided?"#define FLIP_SIDED":"",F.shadowMapEnabled?"#define USE_SHADOWMAP":"",F.shadowMapEnabled?"#define "+fc:"",F.sizeAttenuation?"#define USE_SIZEATTENUATION":"",F.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",F.logarithmicDepthBuffer&&F.rendererExtensionFragDepth?
"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;",
"#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;",
"\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Yb).join("\n"),fc=[pe,ia(F),"#define SHADER_NAME "+F.shaderName,qe,F.useFog&&F.fog?"#define USE_FOG":"",F.useFog&&F.fogExp2?"#define FOG_EXP2":"",F.map?"#define USE_MAP":"",F.matcap?"#define USE_MATCAP":"",F.envMap?"#define USE_ENVMAP":
"",F.envMap?"#define "+Lc:"",F.envMap?"#define "+wd:"",F.envMap?"#define "+le:"",je?"#define CUBEUV_TEXEL_WIDTH "+je.texelWidth:"",je?"#define CUBEUV_TEXEL_HEIGHT "+je.texelHeight:"",je?"#define CUBEUV_MAX_MIP "+je.maxMip+".0":"",F.lightMap?"#define USE_LIGHTMAP":"",F.aoMap?"#define USE_AOMAP":"",F.emissiveMap?"#define USE_EMISSIVEMAP":"",F.bumpMap?"#define USE_BUMPMAP":"",F.normalMap?"#define USE_NORMALMAP":"",F.normalMap&&F.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",F.normalMap&&F.tangentSpaceNormalMap?
"#define TANGENTSPACE_NORMALMAP":"",F.clearcoat?"#define USE_CLEARCOAT":"",F.clearcoatMap?"#define USE_CLEARCOATMAP":"",F.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",F.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",F.iridescence?"#define USE_IRIDESCENCE":"",F.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",F.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",F.specularMap?"#define USE_SPECULARMAP":"",F.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":
"",F.specularColorMap?"#define USE_SPECULARCOLORMAP":"",F.roughnessMap?"#define USE_ROUGHNESSMAP":"",F.metalnessMap?"#define USE_METALNESSMAP":"",F.alphaMap?"#define USE_ALPHAMAP":"",F.alphaTest?"#define USE_ALPHATEST":"",F.sheen?"#define USE_SHEEN":"",F.sheenColorMap?"#define USE_SHEENCOLORMAP":"",F.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",F.transmission?"#define USE_TRANSMISSION":"",F.transmissionMap?"#define USE_TRANSMISSIONMAP":"",F.thicknessMap?"#define USE_THICKNESSMAP":"",F.decodeVideoTexture?
"#define DECODE_VIDEO_TEXTURE":"",F.vertexTangents?"#define USE_TANGENT":"",F.vertexColors||F.instancingColor?"#define USE_COLOR":"",F.vertexAlphas?"#define USE_COLOR_ALPHA":"",F.vertexUvs?"#define USE_UV":"",F.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",F.gradientMap?"#define USE_GRADIENTMAP":"",F.flatShading?"#define FLAT_SHADED":"",F.doubleSided?"#define DOUBLE_SIDED":"",F.flipSided?"#define FLIP_SIDED":"",F.shadowMapEnabled?"#define USE_SHADOWMAP":"",F.shadowMapEnabled?"#define "+fc:"",F.premultipliedAlpha?
"#define PREMULTIPLIED_ALPHA":"",F.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",F.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",F.logarithmicDepthBuffer&&F.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==F.toneMapping?"#define TONE_MAPPING":"",0!==F.toneMapping?zj.tonemapping_pars_fragment:"",0!==F.toneMapping?Be("toneMapping",F.toneMapping):"",F.dithering?"#define DITHERING":
"",F.opaque?"#define OPAQUE":"",zj.encodings_pars_fragment,th("linearToOutputTexel",F.outputEncoding),F.useDepthPacking?"#define DEPTH_PACKING "+F.depthPacking:"","\n"].filter(Yb).join("\n"));Wa=Wa.replace(Jn,pa);Wa=de(Wa,F);Wa=P(Wa,F);Ab=Ab.replace(Jn,pa);Ab=de(Ab,F);Ab=P(Ab,F);Wa=Wa.replace(Kn,Ea).replace(xp,wa);Ab=Ab.replace(Kn,Ea).replace(xp,wa);F.isWebGL2&&!0!==F.isRawShaderMaterial&&(Ke="#version 300 es\n",bb="precision mediump sampler2DArray;\n#define attribute in\n#define varying out\n#define texture2D texture\n"+
bb,fc=["#define varying in","300 es"===F.glslVersion?"":"layout(location = 0) out highp vec4 pc_fragColor;","300 es"===F.glslVersion?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth\n#define texture2D texture\n#define textureCube texture\n#define texture2DProj textureProj\n#define texture2DLodEXT textureLod\n#define texture2DProjLodEXT textureProjLod\n#define textureCubeLodEXT textureLod\n#define texture2DGradEXT textureGrad\n#define texture2DProjGradEXT textureProjGrad\n#define textureCubeGradEXT textureGrad"].join("\n")+
"\n"+fc);Ab=Ke+fc+Ab;Wa=$g(X,35633,Ke+bb+Wa);Ab=$g(X,35632,Ab);X.attachShader(nc,Wa);X.attachShader(nc,Ab);void 0!==F.index0AttributeName?X.bindAttribLocation(nc,0,F.index0AttributeName):!0===F.morphTargets&&X.bindAttribLocation(nc,0,"position");X.linkProgram(nc);if(t.debug.checkShaderErrors){t=X.getProgramInfoLog(nc).trim();Ke=X.getShaderInfoLog(Wa).trim();Lc=X.getShaderInfoLog(Ab).trim();le=wd=!0;if(!1===X.getProgramParameter(nc,35714))wd=!1,je=Ta(X,Wa,"vertex"),pe=Ta(X,Ab,"fragment"),console.error("THREE.WebGLProgram: Shader Error "+
X.getError()+" - VALIDATE_STATUS "+X.getProgramParameter(nc,35715)+"\n\nProgram Info Log: "+t+"\n"+je+"\n"+pe);else if(""!==t)console.warn("THREE.WebGLProgram: Program Info Log:",t);else if(""===Ke||""===Lc)le=!1;le&&(this.diagnostics={runnable:wd,programLog:t,vertexShader:{log:Ke,prefix:bb},fragmentShader:{log:Lc,prefix:fc}})}X.deleteShader(Wa);X.deleteShader(Ab);let $f;this.getUniforms=function(){void 0===$f&&($f=new In(X,nc));return $f};let Te;this.getAttributes=function(){if(void 0===Te){{const ug=
{},Jf=X.getProgramParameter(nc,35721);for(let Hf=0;Hf<Jf;Hf++){const Ig=X.getActiveAttrib(nc,Hf),Tg=Ig.name;let Lf=1;35674===Ig.type&&(Lf=2);35675===Ig.type&&(Lf=3);35676===Ig.type&&(Lf=4);ug[Tg]={type:Ig.type,location:X.getAttribLocation(nc,Tg),locationSize:Lf}}Te=ug}}return Te};this.destroy=function(){Q.releaseStatesOfProgram(this);X.deleteProgram(nc);this.program=void 0};this.name=F.shaderName;this.id=nq++;this.cacheKey=A;this.usedTimes=1;this.program=nc;this.vertexShader=Wa;this.fragmentShader=
Ab;return this}function mb(t,A,F,Q,X,bb,Wa){const Ab=new Rh,fc=new Eo,Lc=[],wd=X.isWebGL2,le=X.logarithmicDepthBuffer,je=X.vertexTextures;let pe=X.precision;const qe={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",
PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};return{getParameters:function(nc,Ke,$f,Te,ug){const Jf=Te.fog,Hf=ug.geometry;Te=nc.isMeshStandardMaterial?Te.environment:null;const Ig=(Te=(nc.isMeshStandardMaterial?F:A).get(nc.envMap||Te))&&306===Te.mapping?Te.image.height:null,Tg=qe[nc.type];null!==nc.precision&&(pe=X.getMaxPrecision(nc.precision),pe!==nc.precision&&console.warn("THREE.WebGLProgram.getParameters:",nc.precision,"not supported, using",pe,"instead."));var Lf=
Hf.morphAttributes.position||Hf.morphAttributes.normal||Hf.morphAttributes.color;Lf=void 0!==Lf?Lf.length:0;let yf=0;void 0!==Hf.morphAttributes.position&&(yf=1);void 0!==Hf.morphAttributes.normal&&(yf=2);void 0!==Hf.morphAttributes.color&&(yf=3);let Qe;let zg,Dh;if(Tg){var Jg=ym[Tg];Qe=Jg.vertexShader;Jg=Jg.fragmentShader}else Qe=nc.vertexShader,Jg=nc.fragmentShader,fc.update(nc),zg=fc.getVertexShaderID(nc),Dh=fc.getFragmentShaderID(nc);const zh=t.getRenderTarget(),jh=0<nc.clearcoat,Pg=0<nc.iridescence;
return{isWebGL2:wd,shaderID:Tg,shaderName:nc.type,vertexShader:Qe,fragmentShader:Jg,defines:nc.defines,customVertexShaderID:zg,customFragmentShaderID:Dh,isRawShaderMaterial:!0===nc.isRawShaderMaterial,glslVersion:nc.glslVersion,precision:pe,instancing:!0===ug.isInstancedMesh,instancingColor:!0===ug.isInstancedMesh&&null!==ug.instanceColor,supportsVertexTextures:je,outputEncoding:null===zh?t.outputEncoding:!0===zh.isXRRenderTarget?zh.texture.encoding:3E3,map:!!nc.map,matcap:!!nc.matcap,envMap:!!Te,
envMapMode:Te&&Te.mapping,envMapCubeUVHeight:Ig,lightMap:!!nc.lightMap,aoMap:!!nc.aoMap,emissiveMap:!!nc.emissiveMap,bumpMap:!!nc.bumpMap,normalMap:!!nc.normalMap,objectSpaceNormalMap:1===nc.normalMapType,tangentSpaceNormalMap:0===nc.normalMapType,decodeVideoTexture:!!nc.map&&!0===nc.map.isVideoTexture&&3001===nc.map.encoding,clearcoat:jh,clearcoatMap:jh&&!!nc.clearcoatMap,clearcoatRoughnessMap:jh&&!!nc.clearcoatRoughnessMap,clearcoatNormalMap:jh&&!!nc.clearcoatNormalMap,iridescence:Pg,iridescenceMap:Pg&&
!!nc.iridescenceMap,iridescenceThicknessMap:Pg&&!!nc.iridescenceThicknessMap,displacementMap:!!nc.displacementMap,roughnessMap:!!nc.roughnessMap,metalnessMap:!!nc.metalnessMap,specularMap:!!nc.specularMap,specularIntensityMap:!!nc.specularIntensityMap,specularColorMap:!!nc.specularColorMap,opaque:!1===nc.transparent&&1===nc.blending,alphaMap:!!nc.alphaMap,alphaTest:0<nc.alphaTest,gradientMap:!!nc.gradientMap,sheen:0<nc.sheen,sheenColorMap:!!nc.sheenColorMap,sheenRoughnessMap:!!nc.sheenRoughnessMap,
transmission:0<nc.transmission,transmissionMap:!!nc.transmissionMap,thicknessMap:!!nc.thicknessMap,combine:nc.combine,vertexTangents:!!nc.normalMap&&!!Hf.attributes.tangent,vertexColors:nc.vertexColors,vertexAlphas:!0===nc.vertexColors&&!!Hf.attributes.color&&4===Hf.attributes.color.itemSize,vertexUvs:!!nc.map||!!nc.bumpMap||!!nc.normalMap||!!nc.specularMap||!!nc.alphaMap||!!nc.emissiveMap||!!nc.roughnessMap||!!nc.metalnessMap||!!nc.clearcoatMap||!!nc.clearcoatRoughnessMap||!!nc.clearcoatNormalMap||
!!nc.iridescenceMap||!!nc.iridescenceThicknessMap||!!nc.displacementMap||!!nc.transmissionMap||!!nc.thicknessMap||!!nc.specularIntensityMap||!!nc.specularColorMap||!!nc.sheenColorMap||!!nc.sheenRoughnessMap,uvsVertexOnly:!(nc.map||nc.bumpMap||nc.normalMap||nc.specularMap||nc.alphaMap||nc.emissiveMap||nc.roughnessMap||nc.metalnessMap||nc.clearcoatNormalMap||nc.iridescenceMap||nc.iridescenceThicknessMap||0<nc.transmission||nc.transmissionMap||nc.thicknessMap||nc.specularIntensityMap||nc.specularColorMap||
0<nc.sheen||nc.sheenColorMap||nc.sheenRoughnessMap)&&!!nc.displacementMap,fog:!!Jf,useFog:!0===nc.fog,fogExp2:Jf&&Jf.isFogExp2,flatShading:!!nc.flatShading,sizeAttenuation:nc.sizeAttenuation,logarithmicDepthBuffer:le,skinning:!0===ug.isSkinnedMesh,morphTargets:void 0!==Hf.morphAttributes.position,morphNormals:void 0!==Hf.morphAttributes.normal,morphColors:void 0!==Hf.morphAttributes.color,morphTargetsCount:Lf,morphTextureStride:yf,numDirLights:Ke.directional.length,numPointLights:Ke.point.length,
numSpotLights:Ke.spot.length,numRectAreaLights:Ke.rectArea.length,numHemiLights:Ke.hemi.length,numDirLightShadows:Ke.directionalShadowMap.length,numPointLightShadows:Ke.pointShadowMap.length,numSpotLightShadows:Ke.spotShadowMap.length,numClippingPlanes:Wa.numPlanes,numClipIntersection:Wa.numIntersection,dithering:nc.dithering,shadowMapEnabled:t.shadowMap.enabled&&0<$f.length,shadowMapType:t.shadowMap.type,toneMapping:nc.toneMapped?t.toneMapping:0,physicallyCorrectLights:t.physicallyCorrectLights,
premultipliedAlpha:nc.premultipliedAlpha,doubleSided:2===nc.side,flipSided:1===nc.side,useDepthPacking:!!nc.depthPacking,depthPacking:nc.depthPacking||0,index0AttributeName:nc.index0AttributeName,extensionDerivatives:nc.extensions&&nc.extensions.derivatives,extensionFragDepth:nc.extensions&&nc.extensions.fragDepth,extensionDrawBuffers:nc.extensions&&nc.extensions.drawBuffers,extensionShaderTextureLOD:nc.extensions&&nc.extensions.shaderTextureLOD,rendererExtensionFragDepth:wd||Q.has("EXT_frag_depth"),
rendererExtensionDrawBuffers:wd||Q.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:wd||Q.has("EXT_shader_texture_lod"),customProgramCacheKey:nc.customProgramCacheKey()}},getProgramCacheKey:function(nc){const Ke=[];nc.shaderID?Ke.push(nc.shaderID):(Ke.push(nc.customVertexShaderID),Ke.push(nc.customFragmentShaderID));if(void 0!==nc.defines)for(const $f in nc.defines)Ke.push($f),Ke.push(nc.defines[$f]);!1===nc.isRawShaderMaterial&&(Ke.push(nc.precision),Ke.push(nc.outputEncoding),Ke.push(nc.envMapMode),
Ke.push(nc.envMapCubeUVHeight),Ke.push(nc.combine),Ke.push(nc.vertexUvs),Ke.push(nc.fogExp2),Ke.push(nc.sizeAttenuation),Ke.push(nc.morphTargetsCount),Ke.push(nc.morphAttributeCount),Ke.push(nc.numDirLights),Ke.push(nc.numPointLights),Ke.push(nc.numSpotLights),Ke.push(nc.numHemiLights),Ke.push(nc.numRectAreaLights),Ke.push(nc.numDirLightShadows),Ke.push(nc.numPointLightShadows),Ke.push(nc.numSpotLightShadows),Ke.push(nc.shadowMapType),Ke.push(nc.toneMapping),Ke.push(nc.numClippingPlanes),Ke.push(nc.numClipIntersection),
Ke.push(nc.depthPacking),Ab.disableAll(),nc.isWebGL2&&Ab.enable(0),nc.supportsVertexTextures&&Ab.enable(1),nc.instancing&&Ab.enable(2),nc.instancingColor&&Ab.enable(3),nc.map&&Ab.enable(4),nc.matcap&&Ab.enable(5),nc.envMap&&Ab.enable(6),nc.lightMap&&Ab.enable(7),nc.aoMap&&Ab.enable(8),nc.emissiveMap&&Ab.enable(9),nc.bumpMap&&Ab.enable(10),nc.normalMap&&Ab.enable(11),nc.objectSpaceNormalMap&&Ab.enable(12),nc.tangentSpaceNormalMap&&Ab.enable(13),nc.clearcoat&&Ab.enable(14),nc.clearcoatMap&&Ab.enable(15),
nc.clearcoatRoughnessMap&&Ab.enable(16),nc.clearcoatNormalMap&&Ab.enable(17),nc.iridescence&&Ab.enable(18),nc.iridescenceMap&&Ab.enable(19),nc.iridescenceThicknessMap&&Ab.enable(20),nc.displacementMap&&Ab.enable(21),nc.specularMap&&Ab.enable(22),nc.roughnessMap&&Ab.enable(23),nc.metalnessMap&&Ab.enable(24),nc.gradientMap&&Ab.enable(25),nc.alphaMap&&Ab.enable(26),nc.alphaTest&&Ab.enable(27),nc.vertexColors&&Ab.enable(28),nc.vertexAlphas&&Ab.enable(29),nc.vertexUvs&&Ab.enable(30),nc.vertexTangents&&
Ab.enable(31),nc.uvsVertexOnly&&Ab.enable(32),nc.fog&&Ab.enable(33),Ke.push(Ab.mask),Ab.disableAll(),nc.useFog&&Ab.enable(0),nc.flatShading&&Ab.enable(1),nc.logarithmicDepthBuffer&&Ab.enable(2),nc.skinning&&Ab.enable(3),nc.morphTargets&&Ab.enable(4),nc.morphNormals&&Ab.enable(5),nc.morphColors&&Ab.enable(6),nc.premultipliedAlpha&&Ab.enable(7),nc.shadowMapEnabled&&Ab.enable(8),nc.physicallyCorrectLights&&Ab.enable(9),nc.doubleSided&&Ab.enable(10),nc.flipSided&&Ab.enable(11),nc.useDepthPacking&&Ab.enable(12),
nc.dithering&&Ab.enable(13),nc.specularIntensityMap&&Ab.enable(14),nc.specularColorMap&&Ab.enable(15),nc.transmission&&Ab.enable(16),nc.transmissionMap&&Ab.enable(17),nc.thicknessMap&&Ab.enable(18),nc.sheen&&Ab.enable(19),nc.sheenColorMap&&Ab.enable(20),nc.sheenRoughnessMap&&Ab.enable(21),nc.decodeVideoTexture&&Ab.enable(22),nc.opaque&&Ab.enable(23),Ke.push(Ab.mask),Ke.push(t.outputEncoding));Ke.push(nc.customProgramCacheKey);return Ke.join()},getUniforms:function(nc){const Ke=qe[nc.type];return Ke?
lq.clone(ym[Ke].uniforms):nc.uniforms},acquireProgram:function(nc,Ke){let $f;for(let Te=0,ug=Lc.length;Te<ug;Te++){const Jf=Lc[Te];if(Jf.cacheKey===Ke){$f=Jf;++$f.usedTimes;break}}void 0===$f&&($f=new ra(t,Ke,nc,bb),Lc.push($f));return $f},releaseProgram:function(nc){if(0===--nc.usedTimes){const Ke=Lc.indexOf(nc);Lc[Ke]=Lc[Lc.length-1];Lc.pop();nc.destroy()}},releaseShaderCache:function(nc){fc.remove(nc)},programs:Lc,dispose:function(){fc.dispose()}}}function E(){let t=new WeakMap;return{get:function(A){let F=
t.get(A);void 0===F&&(F={},t.set(A,F));return F},remove:function(A){t.delete(A)},update:function(A,F,Q){t.get(A)[F]=Q},dispose:function(){t=new WeakMap}}}function R(t,A){return t.groupOrder!==A.groupOrder?t.groupOrder-A.groupOrder:t.renderOrder!==A.renderOrder?t.renderOrder-A.renderOrder:t.material.id!==A.material.id?t.material.id-A.material.id:t.z!==A.z?t.z-A.z:t.id-A.id}function Ya(t,A){return t.groupOrder!==A.groupOrder?t.groupOrder-A.groupOrder:t.renderOrder!==A.renderOrder?t.renderOrder-A.renderOrder:
t.z!==A.z?A.z-t.z:t.id-A.id}function gb(){function t(Wa,Ab,fc,Lc,wd,le){let je=A[F];void 0===je?(je={id:Wa.id,object:Wa,geometry:Ab,material:fc,groupOrder:Lc,renderOrder:Wa.renderOrder,z:wd,group:le},A[F]=je):(je.id=Wa.id,je.object=Wa,je.geometry=Ab,je.material=fc,je.groupOrder=Lc,je.renderOrder=Wa.renderOrder,je.z=wd,je.group=le);F++;return je}const A=[];let F=0;const Q=[],X=[],bb=[];return{opaque:Q,transmissive:X,transparent:bb,init:function(){F=0;Q.length=0;X.length=0;bb.length=0},push:function(Wa,
Ab,fc,Lc,wd,le){Wa=t(Wa,Ab,fc,Lc,wd,le);0<fc.transmission?X.push(Wa):!0===fc.transparent?bb.push(Wa):Q.push(Wa)},unshift:function(Wa,Ab,fc,Lc,wd,le){Wa=t(Wa,Ab,fc,Lc,wd,le);0<fc.transmission?X.unshift(Wa):!0===fc.transparent?bb.unshift(Wa):Q.unshift(Wa)},finish:function(){for(let Wa=F,Ab=A.length;Wa<Ab;Wa++){const fc=A[Wa];if(null===fc.id)break;fc.id=null;fc.object=null;fc.geometry=null;fc.material=null;fc.group=null}},sort:function(Wa,Ab){1<Q.length&&Q.sort(Wa||R);1<X.length&&X.sort(Ab||Ya);1<bb.length&&
bb.sort(Ab||Ya)}}}function $b(){let t=new WeakMap;return{get:function(A,F){!1===t.has(A)?(F=new gb,t.set(A,[F])):F>=t.get(A).length?(F=new gb,t.get(A).push(F)):F=t.get(A)[F];return F},dispose:function(){t=new WeakMap}}}function Sc(){const t={};return{get:function(A){if(void 0!==t[A.id])return t[A.id];let F;switch(A.type){case "DirectionalLight":F={direction:new Tb,color:new Cd};break;case "SpotLight":F={position:new Tb,direction:new Tb,color:new Cd,distance:0,coneCos:0,penumbraCos:0,decay:0};break;
case "PointLight":F={position:new Tb,color:new Cd,distance:0,decay:0};break;case "HemisphereLight":F={direction:new Tb,skyColor:new Cd,groundColor:new Cd};break;case "RectAreaLight":F={color:new Cd,position:new Tb,halfWidth:new Tb,halfHeight:new Tb}}return t[A.id]=F}}}function Ic(){const t={};return{get:function(A){if(void 0!==t[A.id])return t[A.id];let F;switch(A.type){case "DirectionalLight":F={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new tg};break;case "SpotLight":F={shadowBias:0,
shadowNormalBias:0,shadowRadius:1,shadowMapSize:new tg};break;case "PointLight":F={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new tg,shadowCameraNear:1,shadowCameraFar:1E3}}return t[A.id]=F}}}function Pd(t,A){return(A.castShadow?1:0)-(t.castShadow?1:0)}function Zd(t,A){const F=new Sc,Q=Ic(),X={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],
directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let fc=0;9>fc;fc++)X.probe.push(new Tb);const bb=new Tb,Wa=new Ub,Ab=new Ub;return{setup:function(fc,Lc){let wd=0,le=0,je=0;for(var pe=0;9>pe;pe++)X.probe[pe].set(0,0,0);let qe=pe=0,nc=0,Ke=0,$f=0,Te=0,ug=0,Jf=0;fc.sort(Pd);Lc=!0!==Lc?Math.PI:1;for(let yf=
0,Qe=fc.length;yf<Qe;yf++){const zg=fc[yf];var Hf=zg.color,Ig=zg.intensity;const Dh=zg.distance;var Tg=zg.shadow&&zg.shadow.map?zg.shadow.map.texture:null;if(zg.isAmbientLight)wd+=Hf.r*Ig*Lc,le+=Hf.g*Ig*Lc,je+=Hf.b*Ig*Lc;else if(zg.isLightProbe)for(Tg=0;9>Tg;Tg++)X.probe[Tg].addScaledVector(zg.sh.coefficients[Tg],Ig);else if(zg.isDirectionalLight){Ig=F.get(zg);Ig.color.copy(zg.color).multiplyScalar(zg.intensity*Lc);if(zg.castShadow){var Lf=zg.shadow;Hf=Q.get(zg);Hf.shadowBias=Lf.bias;Hf.shadowNormalBias=
Lf.normalBias;Hf.shadowRadius=Lf.radius;Hf.shadowMapSize=Lf.mapSize;X.directionalShadow[pe]=Hf;X.directionalShadowMap[pe]=Tg;X.directionalShadowMatrix[pe]=zg.shadow.matrix;Te++}X.directional[pe]=Ig;pe++}else zg.isSpotLight?(Lf=F.get(zg),Lf.position.setFromMatrixPosition(zg.matrixWorld),Lf.color.copy(Hf).multiplyScalar(Ig*Lc),Lf.distance=Dh,Lf.coneCos=Math.cos(zg.angle),Lf.penumbraCos=Math.cos(zg.angle*(1-zg.penumbra)),Lf.decay=zg.decay,zg.castShadow&&(Ig=zg.shadow,Hf=Q.get(zg),Hf.shadowBias=Ig.bias,
Hf.shadowNormalBias=Ig.normalBias,Hf.shadowRadius=Ig.radius,Hf.shadowMapSize=Ig.mapSize,X.spotShadow[nc]=Hf,X.spotShadowMap[nc]=Tg,X.spotShadowMatrix[nc]=zg.shadow.matrix,Jf++),X.spot[nc]=Lf,nc++):zg.isRectAreaLight?(Tg=F.get(zg),Tg.color.copy(Hf).multiplyScalar(Ig),Tg.halfWidth.set(.5*zg.width,0,0),Tg.halfHeight.set(0,.5*zg.height,0),X.rectArea[Ke]=Tg,Ke++):zg.isPointLight?(Ig=F.get(zg),Ig.color.copy(zg.color).multiplyScalar(zg.intensity*Lc),Ig.distance=zg.distance,Ig.decay=zg.decay,zg.castShadow&&
(Lf=zg.shadow,Hf=Q.get(zg),Hf.shadowBias=Lf.bias,Hf.shadowNormalBias=Lf.normalBias,Hf.shadowRadius=Lf.radius,Hf.shadowMapSize=Lf.mapSize,Hf.shadowCameraNear=Lf.camera.near,Hf.shadowCameraFar=Lf.camera.far,X.pointShadow[qe]=Hf,X.pointShadowMap[qe]=Tg,X.pointShadowMatrix[qe]=zg.shadow.matrix,ug++),X.point[qe]=Ig,qe++):zg.isHemisphereLight&&(Tg=F.get(zg),Tg.skyColor.copy(zg.color).multiplyScalar(Ig*Lc),Tg.groundColor.copy(zg.groundColor).multiplyScalar(Ig*Lc),X.hemi[$f]=Tg,$f++)}0<Ke&&(A.isWebGL2?(X.rectAreaLTC1=
Oh.LTC_FLOAT_1,X.rectAreaLTC2=Oh.LTC_FLOAT_2):!0===t.has("OES_texture_float_linear")?(X.rectAreaLTC1=Oh.LTC_FLOAT_1,X.rectAreaLTC2=Oh.LTC_FLOAT_2):!0===t.has("OES_texture_half_float_linear")?(X.rectAreaLTC1=Oh.LTC_HALF_1,X.rectAreaLTC2=Oh.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions."));X.ambient[0]=wd;X.ambient[1]=le;X.ambient[2]=je;fc=X.hash;if(fc.directionalLength!==pe||fc.pointLength!==qe||fc.spotLength!==nc||fc.rectAreaLength!==Ke||fc.hemiLength!==
$f||fc.numDirectionalShadows!==Te||fc.numPointShadows!==ug||fc.numSpotShadows!==Jf)X.directional.length=pe,X.spot.length=nc,X.rectArea.length=Ke,X.point.length=qe,X.hemi.length=$f,X.directionalShadow.length=Te,X.directionalShadowMap.length=Te,X.pointShadow.length=ug,X.pointShadowMap.length=ug,X.spotShadow.length=Jf,X.spotShadowMap.length=Jf,X.directionalShadowMatrix.length=Te,X.pointShadowMatrix.length=ug,X.spotShadowMatrix.length=Jf,fc.directionalLength=pe,fc.pointLength=qe,fc.spotLength=nc,fc.rectAreaLength=
Ke,fc.hemiLength=$f,fc.numDirectionalShadows=Te,fc.numPointShadows=ug,fc.numSpotShadows=Jf,X.version=Bc++},setupView:function(fc,Lc){let wd=0,le=0,je=0,pe=0,qe=0;Lc=Lc.matrixWorldInverse;for(let Ke=0,$f=fc.length;Ke<$f;Ke++){const Te=fc[Ke];if(Te.isDirectionalLight){var nc=X.directional[wd];nc.direction.setFromMatrixPosition(Te.matrixWorld);bb.setFromMatrixPosition(Te.target.matrixWorld);nc.direction.sub(bb);nc.direction.transformDirection(Lc);wd++}else Te.isSpotLight?(nc=X.spot[je],nc.position.setFromMatrixPosition(Te.matrixWorld),
nc.position.applyMatrix4(Lc),nc.direction.setFromMatrixPosition(Te.matrixWorld),bb.setFromMatrixPosition(Te.target.matrixWorld),nc.direction.sub(bb),nc.direction.transformDirection(Lc),je++):Te.isRectAreaLight?(nc=X.rectArea[pe],nc.position.setFromMatrixPosition(Te.matrixWorld),nc.position.applyMatrix4(Lc),Ab.identity(),Wa.copy(Te.matrixWorld),Wa.premultiply(Lc),Ab.extractRotation(Wa),nc.halfWidth.set(.5*Te.width,0,0),nc.halfHeight.set(0,.5*Te.height,0),nc.halfWidth.applyMatrix4(Ab),nc.halfHeight.applyMatrix4(Ab),
pe++):Te.isPointLight?(nc=X.point[le],nc.position.setFromMatrixPosition(Te.matrixWorld),nc.position.applyMatrix4(Lc),le++):Te.isHemisphereLight&&(nc=X.hemi[qe],nc.direction.setFromMatrixPosition(Te.matrixWorld),nc.direction.transformDirection(Lc),qe++)}},state:X}}function ge(t,A){const F=new Zd(t,A),Q=[],X=[];return{init:function(){Q.length=0;X.length=0},state:{lightsArray:Q,shadowsArray:X,lights:F},setupLights:function(bb){F.setup(Q,bb)},setupLightsView:function(bb){F.setupView(Q,bb)},pushLight:function(bb){Q.push(bb)},
pushShadow:function(bb){X.push(bb)}}}function Ce(t,A){let F=new WeakMap;return{get:function(Q,X=0){!1===F.has(Q)?(X=new ge(t,A),F.set(Q,[X])):X>=F.get(Q).length?(X=new ge(t,A),F.get(Q).push(X)):X=F.get(Q)[X];return X},dispose:function(){F=new WeakMap}}}function $e(t,A,F){function Q(Te,ug,Jf,Hf,Ig,Tg){Te=!0===Jf.isPointLight?Te.customDistanceMaterial:Te.customDepthMaterial;Te=void 0!==Te?Te:!0===Jf.isPointLight?wd:Lc;if(t.localClippingEnabled&&!0===ug.clipShadows&&Array.isArray(ug.clippingPlanes)&&
0!==ug.clippingPlanes.length||ug.displacementMap&&0!==ug.displacementScale||ug.alphaMap&&0<ug.alphaTest){var Lf=Te.uuid;const yf=ug.uuid;let Qe=le[Lf];void 0===Qe&&(Qe={},le[Lf]=Qe);Lf=Qe[yf];void 0===Lf&&(Lf=Te.clone(),Qe[yf]=Lf);Te=Lf}Te.visible=ug.visible;Te.wireframe=ug.wireframe;Te.side=3===Tg?null!==ug.shadowSide?ug.shadowSide:ug.side:null!==ug.shadowSide?ug.shadowSide:pe[ug.side];Te.alphaMap=ug.alphaMap;Te.alphaTest=ug.alphaTest;Te.clipShadows=ug.clipShadows;Te.clippingPlanes=ug.clippingPlanes;
Te.clipIntersection=ug.clipIntersection;Te.displacementMap=ug.displacementMap;Te.displacementScale=ug.displacementScale;Te.displacementBias=ug.displacementBias;Te.wireframeLinewidth=ug.wireframeLinewidth;Te.linewidth=ug.linewidth;!0===Jf.isPointLight&&!0===Te.isMeshDistanceMaterial&&(Te.referencePosition.setFromMatrixPosition(Jf.matrixWorld),Te.nearDistance=Hf,Te.farDistance=Ig);return Te}function X(Te,ug,Jf,Hf,Ig){if(!1!==Te.visible){if(Te.layers.test(ug.layers)&&(Te.isMesh||Te.isLine||Te.isPoints)&&
(Te.castShadow||Te.receiveShadow&&3===Ig)&&(!Te.frustumCulled||bb.intersectsObject(Te))){Te.modelViewMatrix.multiplyMatrices(Jf.matrixWorldInverse,Te.matrixWorld);const yf=A.update(Te);var Tg=Te.material;if(Array.isArray(Tg)){const Qe=yf.groups;for(let zg=0,Dh=Qe.length;zg<Dh;zg++){const Jg=Qe[zg];var Lf=Tg[Jg.materialIndex];Lf&&Lf.visible&&(Lf=Q(Te,Lf,Hf,Jf.near,Jf.far,Ig),t.renderBufferDirect(Jf,null,yf,Lf,Te,Jg))}}else Tg.visible&&(Tg=Q(Te,Tg,Hf,Jf.near,Jf.far,Ig),t.renderBufferDirect(Jf,null,
yf,Tg,Te,null))}Te=Te.children;for(let yf=0,Qe=Te.length;yf<Qe;yf++)X(Te[yf],ug,Jf,Hf,Ig)}}let bb=new zo;const Wa=new tg,Ab=new tg,fc=new eg,Lc=new Gc({depthPacking:3201}),wd=new ed,le={},je=F.maxTextureSize,pe={0:1,1:0,2:2},qe=new lm({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new tg},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),
nc=qe.clone();nc.defines.HORIZONTAL_PASS=1;F=new Gf;F.setAttribute("position",new gg(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const Ke=new Nl(F,qe),$f=this;this.enabled=!1;this.autoUpdate=!0;this.needsUpdate=!1;this.type=1;this.render=function(Te,ug,Jf){if(!1!==$f.enabled&&(!1!==$f.autoUpdate||!1!==$f.needsUpdate)&&0!==Te.length){var Hf=t.getRenderTarget(),Ig=t.getActiveCubeFace(),Tg=t.getActiveMipmapLevel(),Lf=t.state;Lf.setBlending(0);Lf.buffers.color.setClear(1,1,1,1);Lf.buffers.depth.setTest(!0);
Lf.setScissorTest(!1);for(let Dh=0,Jg=Te.length;Dh<Jg;Dh++){var yf=Te[Dh];const zh=yf.shadow;if(void 0===zh)console.warn("THREE.WebGLShadowMap:",yf,"has no shadow.");else if(!1!==zh.autoUpdate||!1!==zh.needsUpdate){Wa.copy(zh.mapSize);var Qe=zh.getFrameExtents();Wa.multiply(Qe);Ab.copy(zh.mapSize);if(Wa.x>je||Wa.y>je)Wa.x>je&&(Ab.x=Math.floor(je/Qe.x),Wa.x=Ab.x*Qe.x,zh.mapSize.x=Ab.x),Wa.y>je&&(Ab.y=Math.floor(je/Qe.y),Wa.y=Ab.y*Qe.y,zh.mapSize.y=Ab.y);null===zh.map&&(zh.map=new be(Wa.x,Wa.y,3!==
this.type?{minFilter:1003,magFilter:1003}:{}),zh.map.texture.name=yf.name+".shadowMap",zh.camera.updateProjectionMatrix());t.setRenderTarget(zh.map);t.clear();Qe=zh.getViewportCount();for(var zg=0;zg<Qe;zg++){const jh=zh.getViewport(zg);fc.set(Ab.x*jh.x,Ab.y*jh.y,Ab.x*jh.z,Ab.y*jh.w);Lf.viewport(fc);zh.updateMatrices(yf,zg);bb=zh.getFrustum();X(ug,Jf,zh.camera,yf,this.type)}!0!==zh.isPointLightShadow&&3===this.type&&(yf=zh,Qe=Jf,zg=A.update(Ke),qe.defines.VSM_SAMPLES!==yf.blurSamples&&(qe.defines.VSM_SAMPLES=
yf.blurSamples,nc.defines.VSM_SAMPLES=yf.blurSamples,qe.needsUpdate=!0,nc.needsUpdate=!0),null===yf.mapPass&&(yf.mapPass=new be(Wa.x,Wa.y)),qe.uniforms.shadow_pass.value=yf.map.texture,qe.uniforms.resolution.value=yf.mapSize,qe.uniforms.radius.value=yf.radius,t.setRenderTarget(yf.mapPass),t.clear(),t.renderBufferDirect(Qe,null,zg,qe,Ke,null),nc.uniforms.shadow_pass.value=yf.mapPass.texture,nc.uniforms.resolution.value=yf.mapSize,nc.uniforms.radius.value=yf.radius,t.setRenderTarget(yf.map),t.clear(),
t.renderBufferDirect(Qe,null,zg,nc,Ke,null));zh.needsUpdate=!1}}$f.needsUpdate=!1;t.setRenderTarget(Hf,Ig,Tg)}}}function pf(t,A,F){function Q(Xe,Bg,G){const ca=new Uint8Array(4),lb=t.createTexture();t.bindTexture(Xe,lb);t.texParameteri(Xe,10241,9728);t.texParameteri(Xe,10240,9728);for(Xe=0;Xe<G;Xe++)t.texImage2D(Bg+Xe,0,6408,1,1,0,6408,5121,ca);return lb}function X(Xe){!0!==$f[Xe]&&(t.enable(Xe),$f[Xe]=!0)}function bb(Xe){!1!==$f[Xe]&&(t.disable(Xe),$f[Xe]=!1)}function Wa(Xe,Bg,G,ca,lb,S,Ra,Da){if(0===
Xe)!0===Ig&&(bb(3042),Ig=!1);else if(!1===Ig&&(X(3042),Ig=!0),5!==Xe){if(Xe!==Tg||Da!==zh){if(100!==Lf||100!==zg)t.blendEquation(32774),zg=Lf=100;if(Da)switch(Xe){case 1:t.blendFuncSeparate(1,771,1,771);break;case 2:t.blendFunc(1,1);break;case 3:t.blendFuncSeparate(0,769,0,1);break;case 4:t.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",Xe)}else switch(Xe){case 1:t.blendFuncSeparate(770,771,1,771);break;case 2:t.blendFunc(770,1);break;case 3:t.blendFuncSeparate(0,
769,0,1);break;case 4:t.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",Xe)}Jg=Dh=Qe=yf=null;Tg=Xe;zh=Da}}else{lb=lb||Bg;S=S||G;Ra=Ra||ca;if(Bg!==Lf||lb!==zg)t.blendEquationSeparate(Ei[Bg],Ei[lb]),Lf=Bg,zg=lb;if(G!==yf||ca!==Qe||S!==Dh||Ra!==Jg)t.blendFuncSeparate(oh[G],oh[ca],oh[S],oh[Ra]),yf=G,Qe=ca,Dh=S,Jg=Ra;Tg=Xe;zh=null}}function Ab(Xe){jh!==Xe&&(Xe?t.frontFace(2304):t.frontFace(2305),jh=Xe)}function fc(Xe){0!==Xe?(X(2884),Xe!==Pg&&(1===Xe?t.cullFace(1029):
2===Xe?t.cullFace(1028):t.cullFace(1032))):bb(2884);Pg=Xe}function Lc(Xe,Bg,G){if(Xe){if(X(32823),nh!==Bg||Fi!==G)t.polygonOffset(Bg,G),nh=Bg,Fi=G}else bb(32823)}function wd(Xe){void 0===Xe&&(Xe=33984+vi-1);sj!==Xe&&(t.activeTexture(Xe),sj=Xe)}const le=F.isWebGL2,je=new function(){let Xe=!1;const Bg=new eg;let G=null;const ca=new eg(0,0,0,0);return{setMask:function(lb){G===lb||Xe||(t.colorMask(lb,lb,lb,lb),G=lb)},setLocked:function(lb){Xe=lb},setClear:function(lb,S,Ra,Da,Ja){!0===Ja&&(lb*=Da,S*=Da,
Ra*=Da);Bg.set(lb,S,Ra,Da);!1===ca.equals(Bg)&&(t.clearColor(lb,S,Ra,Da),ca.copy(Bg))},reset:function(){Xe=!1;G=null;ca.set(-1,0,0,0)}}},pe=new function(){let Xe=!1,Bg=null,G=null,ca=null;return{setTest:function(lb){lb?X(2929):bb(2929)},setMask:function(lb){Bg===lb||Xe||(t.depthMask(lb),Bg=lb)},setFunc:function(lb){if(G!==lb){if(lb)switch(lb){case 0:t.depthFunc(512);break;case 1:t.depthFunc(519);break;case 2:t.depthFunc(513);break;case 3:t.depthFunc(515);break;case 4:t.depthFunc(514);break;case 5:t.depthFunc(518);
break;case 6:t.depthFunc(516);break;case 7:t.depthFunc(517);break;default:t.depthFunc(515)}else t.depthFunc(515);G=lb}},setLocked:function(lb){Xe=lb},setClear:function(lb){ca!==lb&&(t.clearDepth(lb),ca=lb)},reset:function(){Xe=!1;ca=G=Bg=null}}},qe=new function(){let Xe=!1,Bg=null,G=null,ca=null,lb=null,S=null,Ra=null,Da=null,Ja=null;return{setTest:function(Pa){Xe||(Pa?X(2960):bb(2960))},setMask:function(Pa){Bg===Pa||Xe||(t.stencilMask(Pa),Bg=Pa)},setFunc:function(Pa,Za,Zb){if(G!==Pa||ca!==Za||lb!==
Zb)t.stencilFunc(Pa,Za,Zb),G=Pa,ca=Za,lb=Zb},setOp:function(Pa,Za,Zb){if(S!==Pa||Ra!==Za||Da!==Zb)t.stencilOp(Pa,Za,Zb),S=Pa,Ra=Za,Da=Zb},setLocked:function(Pa){Xe=Pa},setClear:function(Pa){Ja!==Pa&&(t.clearStencil(Pa),Ja=Pa)},reset:function(){Xe=!1;Ja=Da=Ra=S=lb=ca=G=Bg=null}}},nc=new WeakMap,Ke=new WeakMap;let $f={},Te={},ug=new WeakMap,Jf=[],Hf=null,Ig=!1,Tg=null,Lf=null,yf=null,Qe=null,zg=null,Dh=null,Jg=null,zh=!1,jh=null,Pg=null,ah=null,nh=null,Fi=null;const vi=t.getParameter(35661);let Bj=
!1;var lj=0;lj=t.getParameter(7938);-1!==lj.indexOf("WebGL")?(lj=parseFloat(/^WebGL (\d)/.exec(lj)[1]),Bj=1<=lj):-1!==lj.indexOf("OpenGL ES")&&(lj=parseFloat(/^OpenGL ES (\d)/.exec(lj)[1]),Bj=2<=lj);let sj=null,Qd={};lj=t.getParameter(3088);const Ec=t.getParameter(2978),If=(new eg).fromArray(lj),Mf=(new eg).fromArray(Ec),sg={};sg[3553]=Q(3553,3553,1);sg[34067]=Q(34067,34069,6);je.setClear(0,0,0,1);pe.setClear(1);qe.setClear(0);X(2929);pe.setFunc(3);Ab(!1);fc(1);X(2884);Wa(0);const Ei={[100]:32774,
[101]:32778,[102]:32779};le?(Ei[103]=32775,Ei[104]=32776):(lj=A.get("EXT_blend_minmax"),null!==lj&&(Ei[103]=lj.MIN_EXT,Ei[104]=lj.MAX_EXT));const oh={[200]:0,[201]:1,[202]:768,[204]:770,[210]:776,[208]:774,[206]:772,[203]:769,[205]:771,[209]:775,[207]:773};return{buffers:{color:je,depth:pe,stencil:qe},enable:X,disable:bb,bindFramebuffer:function(Xe,Bg){return Te[Xe]!==Bg?(t.bindFramebuffer(Xe,Bg),Te[Xe]=Bg,le&&(36009===Xe&&(Te[36160]=Bg),36160===Xe&&(Te[36009]=Bg)),!0):!1},drawBuffers:function(Xe,
Bg){let G=Jf,ca=!1;if(Xe)if(G=ug.get(Bg),void 0===G&&(G=[],ug.set(Bg,G)),Xe.isWebGLMultipleRenderTargets){if(Xe=Xe.texture,G.length!==Xe.length||36064!==G[0]){for(let lb=0,S=Xe.length;lb<S;lb++)G[lb]=36064+lb;G.length=Xe.length;ca=!0}}else 36064!==G[0]&&(G[0]=36064,ca=!0);else 1029!==G[0]&&(G[0]=1029,ca=!0);ca&&(F.isWebGL2?t.drawBuffers(G):A.get("WEBGL_draw_buffers").drawBuffersWEBGL(G))},useProgram:function(Xe){return Hf!==Xe?(t.useProgram(Xe),Hf=Xe,!0):!1},setBlending:Wa,setMaterial:function(Xe,
Bg){2===Xe.side?bb(2884):X(2884);let G=1===Xe.side;Bg&&(G=!G);Ab(G);1===Xe.blending&&!1===Xe.transparent?Wa(0):Wa(Xe.blending,Xe.blendEquation,Xe.blendSrc,Xe.blendDst,Xe.blendEquationAlpha,Xe.blendSrcAlpha,Xe.blendDstAlpha,Xe.premultipliedAlpha);pe.setFunc(Xe.depthFunc);pe.setTest(Xe.depthTest);pe.setMask(Xe.depthWrite);je.setMask(Xe.colorWrite);Bg=Xe.stencilWrite;qe.setTest(Bg);Bg&&(qe.setMask(Xe.stencilWriteMask),qe.setFunc(Xe.stencilFunc,Xe.stencilRef,Xe.stencilFuncMask),qe.setOp(Xe.stencilFail,
Xe.stencilZFail,Xe.stencilZPass));Lc(Xe.polygonOffset,Xe.polygonOffsetFactor,Xe.polygonOffsetUnits);!0===Xe.alphaToCoverage?X(32926):bb(32926)},setFlipSided:Ab,setCullFace:fc,setLineWidth:function(Xe){Xe!==ah&&(Bj&&t.lineWidth(Xe),ah=Xe)},setPolygonOffset:Lc,setScissorTest:function(Xe){Xe?X(3089):bb(3089)},activeTexture:wd,bindTexture:function(Xe,Bg){null===sj&&wd();let G=Qd[sj];void 0===G&&(G={type:void 0,texture:void 0},Qd[sj]=G);if(G.type!==Xe||G.texture!==Bg)t.bindTexture(Xe,Bg||sg[Xe]),G.type=
Xe,G.texture=Bg},unbindTexture:function(){const Xe=Qd[sj];void 0!==Xe&&void 0!==Xe.type&&(t.bindTexture(Xe.type,null),Xe.type=void 0,Xe.texture=void 0)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(Xe){console.error("THREE.WebGLState:",Xe)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(Xe){console.error("THREE.WebGLState:",Xe)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(Xe){console.error("THREE.WebGLState:",Xe)}},updateUBOMapping:function(Xe,
Bg){let G=Ke.get(Bg);void 0===G&&(G=new WeakMap,Ke.set(Bg,G));let ca=G.get(Xe);void 0===ca&&(ca=t.getUniformBlockIndex(Bg,Xe.name),G.set(Xe,ca))},uniformBlockBinding:function(Xe,Bg){const G=Ke.get(Bg).get(Xe);nc.get(Xe)!==G&&(t.uniformBlockBinding(Bg,G,Xe.__bindingPointIndex),nc.set(Xe,G))},texStorage2D:function(){try{t.texStorage2D.apply(t,arguments)}catch(Xe){console.error("THREE.WebGLState:",Xe)}},texStorage3D:function(){try{t.texStorage3D.apply(t,arguments)}catch(Xe){console.error("THREE.WebGLState:",
Xe)}},texSubImage2D:function(){try{t.texSubImage2D.apply(t,arguments)}catch(Xe){console.error("THREE.WebGLState:",Xe)}},texSubImage3D:function(){try{t.texSubImage3D.apply(t,arguments)}catch(Xe){console.error("THREE.WebGLState:",Xe)}},compressedTexSubImage2D:function(){try{t.compressedTexSubImage2D.apply(t,arguments)}catch(Xe){console.error("THREE.WebGLState:",Xe)}},scissor:function(Xe){!1===If.equals(Xe)&&(t.scissor(Xe.x,Xe.y,Xe.z,Xe.w),If.copy(Xe))},viewport:function(Xe){!1===Mf.equals(Xe)&&(t.viewport(Xe.x,
Xe.y,Xe.z,Xe.w),Mf.copy(Xe))},reset:function(){t.disable(3042);t.disable(2884);t.disable(2929);t.disable(32823);t.disable(3089);t.disable(2960);t.disable(32926);t.blendEquation(32774);t.blendFunc(1,0);t.blendFuncSeparate(1,0,1,0);t.colorMask(!0,!0,!0,!0);t.clearColor(0,0,0,0);t.depthMask(!0);t.depthFunc(513);t.clearDepth(1);t.stencilMask(4294967295);t.stencilFunc(519,0,4294967295);t.stencilOp(7680,7680,7680);t.clearStencil(0);t.cullFace(1029);t.frontFace(2305);t.polygonOffset(0,0);t.activeTexture(33984);
t.bindFramebuffer(36160,null);!0===le&&(t.bindFramebuffer(36009,null),t.bindFramebuffer(36008,null));t.useProgram(null);t.lineWidth(1);t.scissor(0,0,t.canvas.width,t.canvas.height);t.viewport(0,0,t.canvas.width,t.canvas.height);$f={};sj=null;Qd={};Te={};ug=new WeakMap;Jf=[];Hf=null;Ig=!1;Jg=Dh=zg=Qe=yf=Lf=Tg=null;zh=!1;Fi=nh=ah=Pg=jh=null;If.set(0,0,t.canvas.width,t.canvas.height);Mf.set(0,0,t.canvas.width,t.canvas.height);je.reset();pe.reset();qe.reset()}}}function ig(t,A,F,Q,X,bb,Wa){function Ab(Qd,
Ec,If,Mf){var sg=1;if(Qd.width>Mf||Qd.height>Mf)sg=Mf/Math.max(Qd.width,Qd.height);if(1>sg||!0===Ec){if("undefined"!==typeof HTMLImageElement&&Qd instanceof HTMLImageElement||"undefined"!==typeof HTMLCanvasElement&&Qd instanceof HTMLCanvasElement||"undefined"!==typeof ImageBitmap&&Qd instanceof ImageBitmap)return Mf=Ec?Wb:Math.floor,Ec=Mf(sg*Qd.width),sg=Mf(sg*Qd.height),void 0===nh&&(nh=vi?new OffscreenCanvas(Ec,sg):db("canvas")),If=If?vi?new OffscreenCanvas(Ec,sg):db("canvas"):nh,If.width=Ec,If.height=
sg,If.getContext("2d").drawImage(Qd,0,0,Ec,sg),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+Qd.width+"x"+Qd.height+") to ("+Ec+"x"+sg+")."),If;"data"in Qd&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+Qd.width+"x"+Qd.height+").")}return Qd}function fc(Qd){return ic(Qd.width)&&ic(Qd.height)}function Lc(Qd,Ec){return Qd.generateMipmaps&&Ec&&1003!==Qd.minFilter&&1006!==Qd.minFilter}function wd(Qd,Ec,If,Mf,sg=!1){if(!1===Qe)return Ec;if(null!==Qd){if(void 0!==
t[Qd])return t[Qd];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+Qd+"'")}Qd=Ec;6403===Ec&&(5126===If&&(Qd=33326),5131===If&&(Qd=33325),5121===If&&(Qd=33321));33319===Ec&&(5126===If&&(Qd=33328),5131===If&&(Qd=33327),5121===If&&(Qd=33323));6408===Ec&&(5126===If&&(Qd=34836),5131===If&&(Qd=34842),5121===If&&(Qd=3001===Mf&&!1===sg?35907:32856),32819===If&&(Qd=32854),32820===If&&(Qd=32855));33325!==Qd&&33326!==Qd&&33327!==Qd&&33328!==Qd&&34842!==Qd&&34836!==Qd||
A.get("EXT_color_buffer_float");return Qd}function le(Qd,Ec,If){return!0===Lc(Qd,If)||Qd.isFramebufferTexture&&1003!==Qd.minFilter&&1006!==Qd.minFilter?Math.log2(Math.max(Ec.width,Ec.height))+1:void 0!==Qd.mipmaps&&0<Qd.mipmaps.length?Qd.mipmaps.length:Qd.isCompressedTexture&&Array.isArray(Qd.image)?Ec.mipmaps.length:1}function je(Qd){return 1003===Qd||1004===Qd||1005===Qd?9728:9729}function pe(Qd){Qd=Qd.target;Qd.removeEventListener("dispose",pe);var Ec=Q.get(Qd);if(void 0!==Ec.__webglInit){var If=
Qd.source,Mf=Fi.get(If);Mf&&(Ec=Mf[Ec.__cacheKey],Ec.usedTimes--,0===Ec.usedTimes&&nc(Qd),0===Object.keys(Mf).length&&Fi.delete(If));Q.remove(Qd)}Qd.isVideoTexture&&ah.delete(Qd)}function qe(Qd){Qd=Qd.target;Qd.removeEventListener("dispose",qe);{const Mf=Qd.texture;var Ec=Q.get(Qd),If=Q.get(Mf);void 0!==If.__webglTexture&&(t.deleteTexture(If.__webglTexture),Wa.memory.textures--);Qd.depthTexture&&Qd.depthTexture.dispose();if(Qd.isWebGLCubeRenderTarget)for(If=0;6>If;If++)t.deleteFramebuffer(Ec.__webglFramebuffer[If]),
Ec.__webglDepthbuffer&&t.deleteRenderbuffer(Ec.__webglDepthbuffer[If]);else{t.deleteFramebuffer(Ec.__webglFramebuffer);Ec.__webglDepthbuffer&&t.deleteRenderbuffer(Ec.__webglDepthbuffer);Ec.__webglMultisampledFramebuffer&&t.deleteFramebuffer(Ec.__webglMultisampledFramebuffer);if(Ec.__webglColorRenderbuffer)for(If=0;If<Ec.__webglColorRenderbuffer.length;If++)Ec.__webglColorRenderbuffer[If]&&t.deleteRenderbuffer(Ec.__webglColorRenderbuffer[If]);Ec.__webglDepthRenderbuffer&&t.deleteRenderbuffer(Ec.__webglDepthRenderbuffer)}if(Qd.isWebGLMultipleRenderTargets)for(let sg=
0,Ei=Mf.length;sg<Ei;sg++)Ec=Q.get(Mf[sg]),Ec.__webglTexture&&(t.deleteTexture(Ec.__webglTexture),Wa.memory.textures--),Q.remove(Mf[sg]);Q.remove(Mf);Q.remove(Qd)}}function nc(Qd){const Ec=Q.get(Qd);t.deleteTexture(Ec.__webglTexture);delete Fi.get(Qd.source)[Ec.__cacheKey];Wa.memory.textures--}function Ke(Qd,Ec){const If=Q.get(Qd);if(Qd.isVideoTexture){var Mf=Wa.render.frame;ah.get(Qd)!==Mf&&(ah.set(Qd,Mf),Qd.update())}if(!1===Qd.isRenderTargetTexture&&0<Qd.version&&If.__version!==Qd.version)if(Mf=
Qd.image,null===Mf)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(!1===Mf.complete)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{ug(If,Qd,Ec);return}F.activeTexture(33984+Ec);F.bindTexture(3553,If.__webglTexture)}function $f(Qd,Ec,If){If?(t.texParameteri(Qd,10242,lj[Ec.wrapS]),t.texParameteri(Qd,10243,lj[Ec.wrapT]),32879!==Qd&&35866!==Qd||t.texParameteri(Qd,32882,lj[Ec.wrapR]),t.texParameteri(Qd,10240,sj[Ec.magFilter]),
t.texParameteri(Qd,10241,sj[Ec.minFilter])):(t.texParameteri(Qd,10242,33071),t.texParameteri(Qd,10243,33071),32879!==Qd&&35866!==Qd||t.texParameteri(Qd,32882,33071),1001===Ec.wrapS&&1001===Ec.wrapT||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),t.texParameteri(Qd,10240,je(Ec.magFilter)),t.texParameteri(Qd,10241,je(Ec.minFilter)),1003!==Ec.minFilter&&1006!==Ec.minFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));
!0===A.has("EXT_texture_filter_anisotropic")&&(If=A.get("EXT_texture_filter_anisotropic"),1015===Ec.type&&!1===A.has("OES_texture_float_linear")||!1===Qe&&1016===Ec.type&&!1===A.has("OES_texture_half_float_linear")||!(1<Ec.anisotropy||Q.get(Ec).__currentAnisotropy)||(t.texParameterf(Qd,If.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(Ec.anisotropy,X.getMaxAnisotropy())),Q.get(Ec).__currentAnisotropy=Ec.anisotropy))}function Te(Qd,Ec){let If=!1;void 0===Qd.__webglInit&&(Qd.__webglInit=!0,Ec.addEventListener("dispose",
pe));var Mf=Ec.source;let sg=Fi.get(Mf);void 0===sg&&(sg={},Fi.set(Mf,sg));Mf=[];Mf.push(Ec.wrapS);Mf.push(Ec.wrapT);Mf.push(Ec.magFilter);Mf.push(Ec.minFilter);Mf.push(Ec.anisotropy);Mf.push(Ec.internalFormat);Mf.push(Ec.format);Mf.push(Ec.type);Mf.push(Ec.generateMipmaps);Mf.push(Ec.premultiplyAlpha);Mf.push(Ec.flipY);Mf.push(Ec.unpackAlignment);Mf.push(Ec.encoding);Mf=Mf.join();if(Mf!==Qd.__cacheKey){void 0===sg[Mf]&&(sg[Mf]={texture:t.createTexture(),usedTimes:0},Wa.memory.textures++,If=!0);sg[Mf].usedTimes++;
const Ei=sg[Qd.__cacheKey];void 0!==Ei&&(sg[Qd.__cacheKey].usedTimes--,0===Ei.usedTimes&&nc(Ec));Qd.__cacheKey=Mf;Qd.__webglTexture=sg[Mf].texture}return If}function ug(Qd,Ec,If){let Mf=3553;Ec.isDataArrayTexture&&(Mf=35866);Ec.isData3DTexture&&(Mf=32879);var sg=Te(Qd,Ec);const Ei=Ec.source;F.activeTexture(33984+If);F.bindTexture(Mf,Qd.__webglTexture);if(Ei.version!==Ei.__currentVersion||!0===sg){t.pixelStorei(37440,Ec.flipY);t.pixelStorei(37441,Ec.premultiplyAlpha);t.pixelStorei(3317,Ec.unpackAlignment);
t.pixelStorei(37443,0);If=Qe?!1:1001!==Ec.wrapS||1001!==Ec.wrapT||1003!==Ec.minFilter&&1006!==Ec.minFilter;If=If&&!1===fc(Ec.image);var oh=Ab(Ec.image,If,!1,Jg);oh=yf(Ec,oh);If=fc(oh)||Qe;const G=bb.convert(Ec.format,Ec.encoding);let ca=bb.convert(Ec.type),lb=wd(Ec.internalFormat,G,ca,Ec.encoding,Ec.isVideoTexture);$f(Mf,Ec,If);var Xe=Ec.mipmaps,Bg=Qe&&!0!==Ec.isVideoTexture;const S=void 0===Ei.__currentVersion||!0===sg;sg=le(Ec,oh,If);if(Ec.isDepthTexture)lb=6402,Qe?lb=1015===Ec.type?36012:1014===
Ec.type?33190:1020===Ec.type?35056:33189:1015===Ec.type&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),1026===Ec.format&&6402===lb&&1012!==Ec.type&&1014!==Ec.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),Ec.type=1014,ca=bb.convert(Ec.type)),1027===Ec.format&&6402===lb&&(lb=34041,1020!==Ec.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),Ec.type=
1020,ca=bb.convert(Ec.type))),S&&(Bg?F.texStorage2D(3553,1,lb,oh.width,oh.height):F.texImage2D(3553,0,lb,oh.width,oh.height,0,G,ca,null));else if(Ec.isDataTexture)if(0<Xe.length&&If){Bg&&S&&F.texStorage2D(3553,sg,lb,Xe[0].width,Xe[0].height);for(let Ra=0,Da=Xe.length;Ra<Da;Ra++)sg=Xe[Ra],Bg?F.texSubImage2D(3553,Ra,0,0,sg.width,sg.height,G,ca,sg.data):F.texImage2D(3553,Ra,lb,sg.width,sg.height,0,G,ca,sg.data);Ec.generateMipmaps=!1}else Bg?(S&&F.texStorage2D(3553,sg,lb,oh.width,oh.height),F.texSubImage2D(3553,
0,0,0,oh.width,oh.height,G,ca,oh.data)):F.texImage2D(3553,0,lb,oh.width,oh.height,0,G,ca,oh.data);else if(Ec.isCompressedTexture){Bg&&S&&F.texStorage2D(3553,sg,lb,Xe[0].width,Xe[0].height);for(let Ra=0,Da=Xe.length;Ra<Da;Ra++)sg=Xe[Ra],1023!==Ec.format?null!==G?Bg?F.compressedTexSubImage2D(3553,Ra,0,0,sg.width,sg.height,G,sg.data):F.compressedTexImage2D(3553,Ra,lb,sg.width,sg.height,0,sg.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):
Bg?F.texSubImage2D(3553,Ra,0,0,sg.width,sg.height,G,ca,sg.data):F.texImage2D(3553,Ra,lb,sg.width,sg.height,0,G,ca,sg.data)}else if(Ec.isDataArrayTexture)Bg?(S&&F.texStorage3D(35866,sg,lb,oh.width,oh.height,oh.depth),F.texSubImage3D(35866,0,0,0,0,oh.width,oh.height,oh.depth,G,ca,oh.data)):F.texImage3D(35866,0,lb,oh.width,oh.height,oh.depth,0,G,ca,oh.data);else if(Ec.isData3DTexture)Bg?(S&&F.texStorage3D(32879,sg,lb,oh.width,oh.height,oh.depth),F.texSubImage3D(32879,0,0,0,0,oh.width,oh.height,oh.depth,
G,ca,oh.data)):F.texImage3D(32879,0,lb,oh.width,oh.height,oh.depth,0,G,ca,oh.data);else if(Ec.isFramebufferTexture){if(S)if(Bg)F.texStorage2D(3553,sg,lb,oh.width,oh.height);else for(Xe=oh.width,oh=oh.height,Bg=0;Bg<sg;Bg++)F.texImage2D(3553,Bg,lb,Xe,oh,0,G,ca,null),Xe>>=1,oh>>=1}else if(0<Xe.length&&If){Bg&&S&&F.texStorage2D(3553,sg,lb,Xe[0].width,Xe[0].height);for(let Ra=0,Da=Xe.length;Ra<Da;Ra++)sg=Xe[Ra],Bg?F.texSubImage2D(3553,Ra,0,0,G,ca,sg):F.texImage2D(3553,Ra,lb,G,ca,sg);Ec.generateMipmaps=
!1}else Bg?(S&&F.texStorage2D(3553,sg,lb,oh.width,oh.height),F.texSubImage2D(3553,0,0,0,G,ca,oh)):F.texImage2D(3553,0,lb,G,ca,oh);Lc(Ec,If)&&t.generateMipmap(Mf);Ei.__currentVersion=Ei.version;if(Ec.onUpdate)Ec.onUpdate(Ec)}Qd.__version=Ec.version}function Jf(Qd,Ec,If,Mf,sg){const Ei=bb.convert(If.format,If.encoding),oh=bb.convert(If.type),Xe=wd(If.internalFormat,Ei,oh,If.encoding);Q.get(Ec).__hasExternalTextures||(32879===sg||35866===sg?F.texImage3D(sg,0,Xe,Ec.width,Ec.height,Ec.depth,0,Ei,oh,null):
F.texImage2D(sg,0,Xe,Ec.width,Ec.height,0,Ei,oh,null));F.bindFramebuffer(36160,Qd);Lf(Ec)?jh.framebufferTexture2DMultisampleEXT(36160,Mf,sg,Q.get(If).__webglTexture,0,Tg(Ec)):t.framebufferTexture2D(36160,Mf,sg,Q.get(If).__webglTexture,0);F.bindFramebuffer(36160,null)}function Hf(Qd,Ec,If){t.bindRenderbuffer(36161,Qd);if(Ec.depthBuffer&&!Ec.stencilBuffer){var Mf=33189;If||Lf(Ec)?((If=Ec.depthTexture)&&If.isDepthTexture&&(1015===If.type?Mf=36012:1014===If.type&&(Mf=33190)),If=Tg(Ec),Lf(Ec)?jh.renderbufferStorageMultisampleEXT(36161,
If,Mf,Ec.width,Ec.height):t.renderbufferStorageMultisample(36161,If,Mf,Ec.width,Ec.height)):t.renderbufferStorage(36161,Mf,Ec.width,Ec.height);t.framebufferRenderbuffer(36160,36096,36161,Qd)}else if(Ec.depthBuffer&&Ec.stencilBuffer)Mf=Tg(Ec),If&&!1===Lf(Ec)?t.renderbufferStorageMultisample(36161,Mf,35056,Ec.width,Ec.height):Lf(Ec)?jh.renderbufferStorageMultisampleEXT(36161,Mf,35056,Ec.width,Ec.height):t.renderbufferStorage(36161,34041,Ec.width,Ec.height),t.framebufferRenderbuffer(36160,33306,36161,
Qd);else for(Qd=!0===Ec.isWebGLMultipleRenderTargets?Ec.texture:[Ec.texture],Mf=0;Mf<Qd.length;Mf++){var sg=Qd[Mf],Ei=bb.convert(sg.format,sg.encoding);const oh=bb.convert(sg.type);sg=wd(sg.internalFormat,Ei,oh,sg.encoding);Ei=Tg(Ec);If&&!1===Lf(Ec)?t.renderbufferStorageMultisample(36161,Ei,sg,Ec.width,Ec.height):Lf(Ec)?jh.renderbufferStorageMultisampleEXT(36161,Ei,sg,Ec.width,Ec.height):t.renderbufferStorage(36161,sg,Ec.width,Ec.height)}t.bindRenderbuffer(36161,null)}function Ig(Qd){var Ec=Q.get(Qd),
If=!0===Qd.isWebGLCubeRenderTarget;if(Qd.depthTexture&&!Ec.__autoAllocateDepthBuffer){if(If)throw Error("target.depthTexture not supported in Cube render targets");if(Qd&&Qd.isWebGLCubeRenderTarget)throw Error("Depth Texture with cube render targets is not supported");F.bindFramebuffer(36160,Ec.__webglFramebuffer);if(!Qd.depthTexture||!Qd.depthTexture.isDepthTexture)throw Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");Q.get(Qd.depthTexture).__webglTexture&&Qd.depthTexture.image.width===
Qd.width&&Qd.depthTexture.image.height===Qd.height||(Qd.depthTexture.image.width=Qd.width,Qd.depthTexture.image.height=Qd.height,Qd.depthTexture.needsUpdate=!0);Ke(Qd.depthTexture,0);Ec=Q.get(Qd.depthTexture).__webglTexture;If=Tg(Qd);if(1026===Qd.depthTexture.format)Lf(Qd)?jh.framebufferTexture2DMultisampleEXT(36160,36096,3553,Ec,0,If):t.framebufferTexture2D(36160,36096,3553,Ec,0);else if(1027===Qd.depthTexture.format)Lf(Qd)?jh.framebufferTexture2DMultisampleEXT(36160,33306,3553,Ec,0,If):t.framebufferTexture2D(36160,
33306,3553,Ec,0);else throw Error("Unknown depthTexture format");}else if(If)for(Ec.__webglDepthbuffer=[],If=0;6>If;If++)F.bindFramebuffer(36160,Ec.__webglFramebuffer[If]),Ec.__webglDepthbuffer[If]=t.createRenderbuffer(),Hf(Ec.__webglDepthbuffer[If],Qd,!1);else F.bindFramebuffer(36160,Ec.__webglFramebuffer),Ec.__webglDepthbuffer=t.createRenderbuffer(),Hf(Ec.__webglDepthbuffer,Qd,!1);F.bindFramebuffer(36160,null)}function Tg(Qd){return Math.min(zh,Qd.samples)}function Lf(Qd){const Ec=Q.get(Qd);return Qe&&
0<Qd.samples&&!0===A.has("WEBGL_multisampled_render_to_texture")&&!1!==Ec.__useRenderToTexture}function yf(Qd,Ec){const If=Qd.encoding,Mf=Qd.format,sg=Qd.type;if(!0===Qd.isCompressedTexture||!0===Qd.isVideoTexture||1035===Qd.format)return Ec;3E3!==If&&(3001===If?!1===Qe?!0===A.has("EXT_sRGB")&&1023===Mf?(Qd.format=1035,Qd.minFilter=1006,Qd.generateMipmaps=!1):Ec=bf.sRGBToLinear(Ec):1023===Mf&&1009===sg||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):
console.error("THREE.WebGLTextures: Unsupported texture encoding:",If));return Ec}const Qe=X.isWebGL2,zg=X.maxTextures,Dh=X.maxCubemapSize,Jg=X.maxTextureSize,zh=X.maxSamples,jh=A.has("WEBGL_multisampled_render_to_texture")?A.get("WEBGL_multisampled_render_to_texture"):null,Pg=/OculusBrowser/g.test(navigator.userAgent),ah=new WeakMap;let nh;const Fi=new WeakMap;let vi=!1;try{vi="undefined"!==typeof OffscreenCanvas&&null!==(new OffscreenCanvas(1,1)).getContext("2d")}catch(Qd){}let Bj=0;const lj={[1E3]:10497,
[1001]:33071,[1002]:33648},sj={[1003]:9728,[1004]:9984,[1005]:9986,[1006]:9729,[1007]:9985,[1008]:9987};this.allocateTextureUnit=function(){const Qd=Bj;Qd>=zg&&console.warn("THREE.WebGLTextures: Trying to use "+Qd+" texture units while this GPU supports only "+zg);Bj+=1;return Qd};this.resetTextureUnits=function(){Bj=0};this.setTexture2D=Ke;this.setTexture2DArray=function(Qd,Ec){const If=Q.get(Qd);0<Qd.version&&If.__version!==Qd.version?ug(If,Qd,Ec):(F.activeTexture(33984+Ec),F.bindTexture(35866,
If.__webglTexture))};this.setTexture3D=function(Qd,Ec){const If=Q.get(Qd);0<Qd.version&&If.__version!==Qd.version?ug(If,Qd,Ec):(F.activeTexture(33984+Ec),F.bindTexture(32879,If.__webglTexture))};this.setTextureCube=function(Qd,Ec){const If=Q.get(Qd);if(0<Qd.version&&If.__version!==Qd.version){if(6===Qd.image.length){var Mf=Te(If,Qd),sg=Qd.source;F.activeTexture(33984+Ec);F.bindTexture(34067,If.__webglTexture);if(sg.version!==sg.__currentVersion||!0===Mf){t.pixelStorei(37440,Qd.flipY);t.pixelStorei(37441,
Qd.premultiplyAlpha);t.pixelStorei(3317,Qd.unpackAlignment);t.pixelStorei(37443,0);var Ei=Qd.isCompressedTexture||Qd.image[0].isCompressedTexture,oh=Qd.image[0]&&Qd.image[0].isDataTexture;Ec=[];for(var Xe=0;6>Xe;Xe++)Ec[Xe]=Ei||oh?oh?Qd.image[Xe].image:Qd.image[Xe]:Ab(Qd.image[Xe],!1,!0,Dh),Ec[Xe]=yf(Qd,Ec[Xe]);var Bg=Ec[0];Xe=fc(Bg)||Qe;const ca=bb.convert(Qd.format,Qd.encoding),lb=bb.convert(Qd.type),S=wd(Qd.internalFormat,ca,lb,Qd.encoding),Ra=Qe&&!0!==Qd.isVideoTexture;Mf=void 0===sg.__currentVersion||
!0===Mf;var G=le(Qd,Bg,Xe);$f(34067,Qd,Xe);if(Ei)for(Ra&&Mf&&F.texStorage2D(34067,G,S,Bg.width,Bg.height),oh=0;6>oh;oh++)for(Ei=Ec[oh].mipmaps,Mf=0;Mf<Ei.length;Mf++)Bg=Ei[Mf],1023!==Qd.format?null!==ca?Ra?F.compressedTexSubImage2D(34069+oh,Mf,0,0,Bg.width,Bg.height,ca,Bg.data):F.compressedTexImage2D(34069+oh,Mf,S,Bg.width,Bg.height,0,Bg.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):Ra?F.texSubImage2D(34069+oh,Mf,0,0,Bg.width,
Bg.height,ca,lb,Bg.data):F.texImage2D(34069+oh,Mf,S,Bg.width,Bg.height,0,ca,lb,Bg.data);else for(Ei=Qd.mipmaps,Ra&&Mf&&(0<Ei.length&&G++,F.texStorage2D(34067,G,S,Ec[0].width,Ec[0].height)),Mf=0;6>Mf;Mf++)if(oh)for(Ra?F.texSubImage2D(34069+Mf,0,0,0,Ec[Mf].width,Ec[Mf].height,ca,lb,Ec[Mf].data):F.texImage2D(34069+Mf,0,S,Ec[Mf].width,Ec[Mf].height,0,ca,lb,Ec[Mf].data),Bg=0;Bg<Ei.length;Bg++)G=Ei[Bg].image[Mf].image,Ra?F.texSubImage2D(34069+Mf,Bg+1,0,0,G.width,G.height,ca,lb,G.data):F.texImage2D(34069+
Mf,Bg+1,S,G.width,G.height,0,ca,lb,G.data);else for(Ra?F.texSubImage2D(34069+Mf,0,0,0,ca,lb,Ec[Mf]):F.texImage2D(34069+Mf,0,S,ca,lb,Ec[Mf]),Bg=0;Bg<Ei.length;Bg++)G=Ei[Bg],Ra?F.texSubImage2D(34069+Mf,Bg+1,0,0,ca,lb,G.image[Mf]):F.texImage2D(34069+Mf,Bg+1,S,ca,lb,G.image[Mf]);Lc(Qd,Xe)&&t.generateMipmap(34067);sg.__currentVersion=sg.version;if(Qd.onUpdate)Qd.onUpdate(Qd)}If.__version=Qd.version}}else F.activeTexture(33984+Ec),F.bindTexture(34067,If.__webglTexture)};this.rebindTextures=function(Qd,
Ec,If){const Mf=Q.get(Qd);void 0!==Ec&&Jf(Mf.__webglFramebuffer,Qd,Qd.texture,36064,3553);void 0!==If&&Ig(Qd)};this.setupRenderTarget=function(Qd){var Ec=Qd.texture;const If=Q.get(Qd);var Mf=Q.get(Ec);Qd.addEventListener("dispose",qe);!0!==Qd.isWebGLMultipleRenderTargets&&(void 0===Mf.__webglTexture&&(Mf.__webglTexture=t.createTexture()),Mf.__version=Ec.version,Wa.memory.textures++);var sg=!0===Qd.isWebGLCubeRenderTarget;const Ei=!0===Qd.isWebGLMultipleRenderTargets,oh=fc(Qd)||Qe;if(sg){If.__webglFramebuffer=
[];for(var Xe=0;6>Xe;Xe++)If.__webglFramebuffer[Xe]=t.createFramebuffer()}else{If.__webglFramebuffer=t.createFramebuffer();if(Ei)if(X.drawBuffers){Xe=Qd.texture;for(let lb=0,S=Xe.length;lb<S;lb++){var Bg=Q.get(Xe[lb]);void 0===Bg.__webglTexture&&(Bg.__webglTexture=t.createTexture(),Wa.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(Qe&&0<Qd.samples&&!1===Lf(Qd)){Xe=Ei?Ec:[Ec];If.__webglMultisampledFramebuffer=
t.createFramebuffer();If.__webglColorRenderbuffer=[];F.bindFramebuffer(36160,If.__webglMultisampledFramebuffer);for(Bg=0;Bg<Xe.length;Bg++){var G=Xe[Bg];If.__webglColorRenderbuffer[Bg]=t.createRenderbuffer();t.bindRenderbuffer(36161,If.__webglColorRenderbuffer[Bg]);var ca=bb.convert(G.format,G.encoding);const lb=bb.convert(G.type);G=wd(G.internalFormat,ca,lb,G.encoding);ca=Tg(Qd);t.renderbufferStorageMultisample(36161,ca,G,Qd.width,Qd.height);t.framebufferRenderbuffer(36160,36064+Bg,36161,If.__webglColorRenderbuffer[Bg])}t.bindRenderbuffer(36161,
null);Qd.depthBuffer&&(If.__webglDepthRenderbuffer=t.createRenderbuffer(),Hf(If.__webglDepthRenderbuffer,Qd,!0));F.bindFramebuffer(36160,null)}}if(sg){F.bindTexture(34067,Mf.__webglTexture);$f(34067,Ec,oh);for(Mf=0;6>Mf;Mf++)Jf(If.__webglFramebuffer[Mf],Qd,Ec,36064,34069+Mf);Lc(Ec,oh)&&t.generateMipmap(34067)}else if(Ei){Ec=Qd.texture;for(let lb=0,S=Ec.length;lb<S;lb++)Mf=Ec[lb],sg=Q.get(Mf),F.bindTexture(3553,sg.__webglTexture),$f(3553,Mf,oh),Jf(If.__webglFramebuffer,Qd,Mf,36064+lb,3553),Lc(Mf,oh)&&
t.generateMipmap(3553)}else{sg=3553;if(Qd.isWebGL3DRenderTarget||Qd.isWebGLArrayRenderTarget)Qe?sg=Qd.isWebGL3DRenderTarget?32879:35866:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.");F.bindTexture(sg,Mf.__webglTexture);$f(sg,Ec,oh);Jf(If.__webglFramebuffer,Qd,Ec,36064,sg);Lc(Ec,oh)&&t.generateMipmap(sg)}F.unbindTexture();Qd.depthBuffer&&Ig(Qd)};this.updateRenderTargetMipmap=function(Qd){const Ec=fc(Qd)||Qe,If=!0===Qd.isWebGLMultipleRenderTargets?
Qd.texture:[Qd.texture];for(let sg=0,Ei=If.length;sg<Ei;sg++){var Mf=If[sg];if(Lc(Mf,Ec)){const oh=Qd.isWebGLCubeRenderTarget?34067:3553;Mf=Q.get(Mf).__webglTexture;F.bindTexture(oh,Mf);t.generateMipmap(oh);F.unbindTexture()}}};this.updateMultisampleRenderTarget=function(Qd){if(Qe&&0<Qd.samples&&!1===Lf(Qd)){const sg=Qd.isWebGLMultipleRenderTargets?Qd.texture:[Qd.texture];var Ec=Qd.width;const Ei=Qd.height;let oh=16384;const Xe=[],Bg=Qd.stencilBuffer?33306:36096,G=Q.get(Qd),ca=!0===Qd.isWebGLMultipleRenderTargets;
if(ca)for(var If=0;If<sg.length;If++)F.bindFramebuffer(36160,G.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(36160,36064+If,36161,null),F.bindFramebuffer(36160,G.__webglFramebuffer),t.framebufferTexture2D(36009,36064+If,3553,null,0);F.bindFramebuffer(36008,G.__webglMultisampledFramebuffer);F.bindFramebuffer(36009,G.__webglFramebuffer);for(If=0;If<sg.length;If++){Xe.push(36064+If);Qd.depthBuffer&&Xe.push(Bg);var Mf=void 0!==G.__ignoreDepthValues?G.__ignoreDepthValues:!1;!1===Mf&&(Qd.depthBuffer&&
(oh|=256),Qd.stencilBuffer&&(oh|=1024));ca&&t.framebufferRenderbuffer(36008,36064,36161,G.__webglColorRenderbuffer[If]);!0===Mf&&(t.invalidateFramebuffer(36008,[Bg]),t.invalidateFramebuffer(36009,[Bg]));ca&&(Mf=Q.get(sg[If]).__webglTexture,t.framebufferTexture2D(36009,36064,3553,Mf,0));t.blitFramebuffer(0,0,Ec,Ei,0,0,Ec,Ei,oh,9728);Pg&&t.invalidateFramebuffer(36008,Xe)}F.bindFramebuffer(36008,null);F.bindFramebuffer(36009,null);if(ca)for(Qd=0;Qd<sg.length;Qd++)F.bindFramebuffer(36160,G.__webglMultisampledFramebuffer),
t.framebufferRenderbuffer(36160,36064+Qd,36161,G.__webglColorRenderbuffer[Qd]),Ec=Q.get(sg[Qd]).__webglTexture,F.bindFramebuffer(36160,G.__webglFramebuffer),t.framebufferTexture2D(36009,36064+Qd,3553,Ec,0);F.bindFramebuffer(36009,G.__webglMultisampledFramebuffer)}};this.setupDepthRenderbuffer=Ig;this.setupFrameBufferTexture=Jf;this.useMultisampledRTT=Lf}function Xf(t,A,F){const Q=F.isWebGL2;return{convert:function(X,bb=null){let Wa;if(1009===X)return 5121;if(1017===X)return 32819;if(1018===X)return 32820;
if(1010===X)return 5120;if(1011===X)return 5122;if(1012===X)return 5123;if(1013===X)return 5124;if(1014===X)return 5125;if(1015===X)return 5126;if(1016===X){if(Q)return 5131;Wa=A.get("OES_texture_half_float");return null!==Wa?Wa.HALF_FLOAT_OES:null}if(1021===X)return 6406;if(1023===X)return 6408;if(1024===X)return 6409;if(1025===X)return 6410;if(1026===X)return 6402;if(1027===X)return 34041;if(1028===X)return 6403;if(1022===X)return console.warn("THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228"),
6408;if(1035===X)return Wa=A.get("EXT_sRGB"),null!==Wa?Wa.SRGB_ALPHA_EXT:null;if(1029===X)return 36244;if(1030===X)return 33319;if(1031===X)return 33320;if(1033===X)return 36249;if(33776===X||33777===X||33778===X||33779===X)if(3001===bb)if(Wa=A.get("WEBGL_compressed_texture_s3tc_srgb"),null!==Wa){if(33776===X)return Wa.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(33777===X)return Wa.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(33778===X)return Wa.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(33779===X)return Wa.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;
else if(Wa=A.get("WEBGL_compressed_texture_s3tc"),null!==Wa){if(33776===X)return Wa.COMPRESSED_RGB_S3TC_DXT1_EXT;if(33777===X)return Wa.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(33778===X)return Wa.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(33779===X)return Wa.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(35840===X||35841===X||35842===X||35843===X)if(Wa=A.get("WEBGL_compressed_texture_pvrtc"),null!==Wa){if(35840===X)return Wa.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===X)return Wa.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
if(35842===X)return Wa.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===X)return Wa.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(36196===X)return Wa=A.get("WEBGL_compressed_texture_etc1"),null!==Wa?Wa.COMPRESSED_RGB_ETC1_WEBGL:null;if(37492===X||37496===X)if(Wa=A.get("WEBGL_compressed_texture_etc"),null!==Wa){if(37492===X)return 3001===bb?Wa.COMPRESSED_SRGB8_ETC2:Wa.COMPRESSED_RGB8_ETC2;if(37496===X)return 3001===bb?Wa.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:Wa.COMPRESSED_RGBA8_ETC2_EAC}else return null;
if(37808===X||37809===X||37810===X||37811===X||37812===X||37813===X||37814===X||37815===X||37816===X||37817===X||37818===X||37819===X||37820===X||37821===X)if(Wa=A.get("WEBGL_compressed_texture_astc"),null!==Wa){if(37808===X)return 3001===bb?Wa.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:Wa.COMPRESSED_RGBA_ASTC_4x4_KHR;if(37809===X)return 3001===bb?Wa.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:Wa.COMPRESSED_RGBA_ASTC_5x4_KHR;if(37810===X)return 3001===bb?Wa.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:Wa.COMPRESSED_RGBA_ASTC_5x5_KHR;
if(37811===X)return 3001===bb?Wa.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:Wa.COMPRESSED_RGBA_ASTC_6x5_KHR;if(37812===X)return 3001===bb?Wa.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:Wa.COMPRESSED_RGBA_ASTC_6x6_KHR;if(37813===X)return 3001===bb?Wa.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:Wa.COMPRESSED_RGBA_ASTC_8x5_KHR;if(37814===X)return 3001===bb?Wa.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:Wa.COMPRESSED_RGBA_ASTC_8x6_KHR;if(37815===X)return 3001===bb?Wa.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:Wa.COMPRESSED_RGBA_ASTC_8x8_KHR;
if(37816===X)return 3001===bb?Wa.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:Wa.COMPRESSED_RGBA_ASTC_10x5_KHR;if(37817===X)return 3001===bb?Wa.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:Wa.COMPRESSED_RGBA_ASTC_10x6_KHR;if(37818===X)return 3001===bb?Wa.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:Wa.COMPRESSED_RGBA_ASTC_10x8_KHR;if(37819===X)return 3001===bb?Wa.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:Wa.COMPRESSED_RGBA_ASTC_10x10_KHR;if(37820===X)return 3001===bb?Wa.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:Wa.COMPRESSED_RGBA_ASTC_12x10_KHR;
if(37821===X)return 3001===bb?Wa.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:Wa.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(36492===X)if(Wa=A.get("EXT_texture_compression_bptc"),null!==Wa){if(36492===X)return 3001===bb?Wa.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:Wa.COMPRESSED_RGBA_BPTC_UNORM_EXT}else return null;if(1020===X){if(Q)return 34042;Wa=A.get("WEBGL_depth_texture");return null!==Wa?Wa.UNSIGNED_INT_24_8_WEBGL:null}return void 0!==t[X]?t[X]:null}}}function Vg(t,A){function F(Q,X){Q.opacity.value=
X.opacity;X.color&&Q.diffuse.value.copy(X.color);X.emissive&&Q.emissive.value.copy(X.emissive).multiplyScalar(X.emissiveIntensity);X.map&&(Q.map.value=X.map);X.alphaMap&&(Q.alphaMap.value=X.alphaMap);X.bumpMap&&(Q.bumpMap.value=X.bumpMap,Q.bumpScale.value=X.bumpScale,1===X.side&&(Q.bumpScale.value*=-1));X.displacementMap&&(Q.displacementMap.value=X.displacementMap,Q.displacementScale.value=X.displacementScale,Q.displacementBias.value=X.displacementBias);X.emissiveMap&&(Q.emissiveMap.value=X.emissiveMap);
X.normalMap&&(Q.normalMap.value=X.normalMap,Q.normalScale.value.copy(X.normalScale),1===X.side&&Q.normalScale.value.negate());X.specularMap&&(Q.specularMap.value=X.specularMap);0<X.alphaTest&&(Q.alphaTest.value=X.alphaTest);const bb=A.get(X).envMap;bb&&(Q.envMap.value=bb,Q.flipEnvMap.value=bb.isCubeTexture&&!1===bb.isRenderTargetTexture?-1:1,Q.reflectivity.value=X.reflectivity,Q.ior.value=X.ior,Q.refractionRatio.value=X.refractionRatio);X.lightMap&&(Q.lightMap.value=X.lightMap,Q.lightMapIntensity.value=
X.lightMapIntensity*(!0!==t.physicallyCorrectLights?Math.PI:1));X.aoMap&&(Q.aoMap.value=X.aoMap,Q.aoMapIntensity.value=X.aoMapIntensity);let Wa;X.map?Wa=X.map:X.specularMap?Wa=X.specularMap:X.displacementMap?Wa=X.displacementMap:X.normalMap?Wa=X.normalMap:X.bumpMap?Wa=X.bumpMap:X.roughnessMap?Wa=X.roughnessMap:X.metalnessMap?Wa=X.metalnessMap:X.alphaMap?Wa=X.alphaMap:X.emissiveMap?Wa=X.emissiveMap:X.clearcoatMap?Wa=X.clearcoatMap:X.clearcoatNormalMap?Wa=X.clearcoatNormalMap:X.clearcoatRoughnessMap?
Wa=X.clearcoatRoughnessMap:X.iridescenceMap?Wa=X.iridescenceMap:X.iridescenceThicknessMap?Wa=X.iridescenceThicknessMap:X.specularIntensityMap?Wa=X.specularIntensityMap:X.specularColorMap?Wa=X.specularColorMap:X.transmissionMap?Wa=X.transmissionMap:X.thicknessMap?Wa=X.thicknessMap:X.sheenColorMap?Wa=X.sheenColorMap:X.sheenRoughnessMap&&(Wa=X.sheenRoughnessMap);void 0!==Wa&&(Wa.isWebGLRenderTarget&&(Wa=Wa.texture),!0===Wa.matrixAutoUpdate&&Wa.updateMatrix(),Q.uvTransform.value.copy(Wa.matrix));let Ab;
X.aoMap?Ab=X.aoMap:X.lightMap&&(Ab=X.lightMap);void 0!==Ab&&(Ab.isWebGLRenderTarget&&(Ab=Ab.texture),!0===Ab.matrixAutoUpdate&&Ab.updateMatrix(),Q.uv2Transform.value.copy(Ab.matrix))}return{refreshFogUniforms:function(Q,X){Q.fogColor.value.copy(X.color);X.isFog?(Q.fogNear.value=X.near,Q.fogFar.value=X.far):X.isFogExp2&&(Q.fogDensity.value=X.density)},refreshMaterialUniforms:function(Q,X,bb,Wa,Ab){if(X.isMeshBasicMaterial)F(Q,X);else if(X.isMeshLambertMaterial)F(Q,X);else if(X.isMeshToonMaterial)F(Q,
X),X.gradientMap&&(Q.gradientMap.value=X.gradientMap);else if(X.isMeshPhongMaterial)F(Q,X),Q.specular.value.copy(X.specular),Q.shininess.value=Math.max(X.shininess,1E-4);else if(X.isMeshStandardMaterial)F(Q,X),Q.roughness.value=X.roughness,Q.metalness.value=X.metalness,X.roughnessMap&&(Q.roughnessMap.value=X.roughnessMap),X.metalnessMap&&(Q.metalnessMap.value=X.metalnessMap),A.get(X).envMap&&(Q.envMapIntensity.value=X.envMapIntensity),X.isMeshPhysicalMaterial&&(Q.ior.value=X.ior,0<X.sheen&&(Q.sheenColor.value.copy(X.sheenColor).multiplyScalar(X.sheen),
Q.sheenRoughness.value=X.sheenRoughness,X.sheenColorMap&&(Q.sheenColorMap.value=X.sheenColorMap),X.sheenRoughnessMap&&(Q.sheenRoughnessMap.value=X.sheenRoughnessMap)),0<X.clearcoat&&(Q.clearcoat.value=X.clearcoat,Q.clearcoatRoughness.value=X.clearcoatRoughness,X.clearcoatMap&&(Q.clearcoatMap.value=X.clearcoatMap),X.clearcoatRoughnessMap&&(Q.clearcoatRoughnessMap.value=X.clearcoatRoughnessMap),X.clearcoatNormalMap&&(Q.clearcoatNormalScale.value.copy(X.clearcoatNormalScale),Q.clearcoatNormalMap.value=
X.clearcoatNormalMap,1===X.side&&Q.clearcoatNormalScale.value.negate())),0<X.iridescence&&(Q.iridescence.value=X.iridescence,Q.iridescenceIOR.value=X.iridescenceIOR,Q.iridescenceThicknessMinimum.value=X.iridescenceThicknessRange[0],Q.iridescenceThicknessMaximum.value=X.iridescenceThicknessRange[1],X.iridescenceMap&&(Q.iridescenceMap.value=X.iridescenceMap),X.iridescenceThicknessMap&&(Q.iridescenceThicknessMap.value=X.iridescenceThicknessMap)),0<X.transmission&&(Q.transmission.value=X.transmission,
Q.transmissionSamplerMap.value=Ab.texture,Q.transmissionSamplerSize.value.set(Ab.width,Ab.height),X.transmissionMap&&(Q.transmissionMap.value=X.transmissionMap),Q.thickness.value=X.thickness,X.thicknessMap&&(Q.thicknessMap.value=X.thicknessMap),Q.attenuationDistance.value=X.attenuationDistance,Q.attenuationColor.value.copy(X.attenuationColor)),Q.specularIntensity.value=X.specularIntensity,Q.specularColor.value.copy(X.specularColor),X.specularIntensityMap&&(Q.specularIntensityMap.value=X.specularIntensityMap),
X.specularColorMap&&(Q.specularColorMap.value=X.specularColorMap));else if(X.isMeshMatcapMaterial)F(Q,X),X.matcap&&(Q.matcap.value=X.matcap);else if(X.isMeshDepthMaterial)F(Q,X);else if(X.isMeshDistanceMaterial)F(Q,X),Q.referencePosition.value.copy(X.referencePosition),Q.nearDistance.value=X.nearDistance,Q.farDistance.value=X.farDistance;else if(X.isMeshNormalMaterial)F(Q,X);else if(X.isLineBasicMaterial)Q.diffuse.value.copy(X.color),Q.opacity.value=X.opacity,X.isLineDashedMaterial&&(Q.dashSize.value=
X.dashSize,Q.totalSize.value=X.dashSize+X.gapSize,Q.scale.value=X.scale);else if(X.isPointsMaterial){{Q.diffuse.value.copy(X.color);Q.opacity.value=X.opacity;Q.size.value=X.size*bb;Q.scale.value=.5*Wa;X.map&&(Q.map.value=X.map);X.alphaMap&&(Q.alphaMap.value=X.alphaMap);0<X.alphaTest&&(Q.alphaTest.value=X.alphaTest);let fc;X.map?fc=X.map:X.alphaMap&&(fc=X.alphaMap);void 0!==fc&&(!0===fc.matrixAutoUpdate&&fc.updateMatrix(),Q.uvTransform.value.copy(fc.matrix))}}else if(X.isSpriteMaterial){{Q.diffuse.value.copy(X.color);
Q.opacity.value=X.opacity;Q.rotation.value=X.rotation;X.map&&(Q.map.value=X.map);X.alphaMap&&(Q.alphaMap.value=X.alphaMap);0<X.alphaTest&&(Q.alphaTest.value=X.alphaTest);let fc;X.map?fc=X.map:X.alphaMap&&(fc=X.alphaMap);void 0!==fc&&(!0===fc.matrixAutoUpdate&&fc.updateMatrix(),Q.uvTransform.value.copy(fc.matrix))}}else X.isShadowMaterial?(Q.color.value.copy(X.color),Q.opacity.value=X.opacity):X.isShaderMaterial&&(X.uniformsNeedUpdate=!1)}}}function Re(t,A,F,Q){function X(wd){const le=wd.uniforms;
let je=0;for(let nc=0,Ke=le.length;nc<Ke;nc++){const $f=le[nc];var pe=$f.value;var qe={boundary:0,storage:0};"number"===typeof pe?(qe.boundary=4,qe.storage=4):pe.isVector2?(qe.boundary=8,qe.storage=8):pe.isVector3||pe.isColor?(qe.boundary=16,qe.storage=12):pe.isVector4?(qe.boundary=16,qe.storage=16):pe.isMatrix3?(qe.boundary=48,qe.storage=48):pe.isMatrix4?(qe.boundary=64,qe.storage=64):pe.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",
pe);qe=pe=qe;$f.__data=new Float32Array(qe.storage/Float32Array.BYTES_PER_ELEMENT);$f.__offset=je;if(0<nc){pe=je%16;const Te=16-pe;0!==pe&&0>Te-qe.boundary&&(je+=16-pe,$f.__offset=je)}je+=qe.storage}pe=je%16;0<pe&&(je+=16-pe);wd.__size=je;wd.__cache={};return this}function bb(wd){wd=wd.target;wd.removeEventListener("dispose",bb);const le=fc.indexOf(wd.__bindingPointIndex);fc.splice(le,1);t.deleteBuffer(Wa[wd.id]);delete Wa[wd.id];delete Ab[wd.id]}let Wa={},Ab={},fc=[];const Lc=F.isWebGL2?t.getParameter(35375):
0;return{bind:function(wd,le){Q.uniformBlockBinding(wd,le.program)},update:function(wd,le){var je=Wa[wd.id];if(void 0===je){X(wd);a:{for(je=0;je<Lc;je++)if(-1===fc.indexOf(je)){fc.push(je);break a}console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.");je=0}wd.__bindingPointIndex=je;var pe=t.createBuffer(),qe=wd.__size,nc=wd.usage;t.bindBuffer(35345,pe);t.bufferData(35345,qe,nc);t.bindBuffer(35345,null);t.bindBufferBase(35345,je,pe);je=pe;Wa[wd.id]=je;
wd.addEventListener("dispose",bb)}Q.updateUBOMapping(wd,le.program);le=A.render.frame;if(Ab[wd.id]!==le){je=wd.uniforms;pe=wd.__cache;t.bindBuffer(35345,Wa[wd.id]);for(let Te=0,ug=je.length;Te<ug;Te++){qe=je[Te];a:{var Ke=Te,$f=pe;nc=qe.value;if(void 0===$f[Ke])$f[Ke]="number"===typeof nc?nc:nc.clone(),nc=!0;else{if("number"===typeof nc){if($f[Ke]!==nc){$f[Ke]=nc;nc=!0;break a}}else if(Ke=$f[Ke],!1===Ke.equals(nc)){Ke.copy(nc);nc=!0;break a}nc=!1}}!0===nc&&(nc=qe.value,Ke=qe.__offset,"number"===typeof nc?
qe.__data[0]=nc:qe.value.isMatrix3?(qe.__data[0]=qe.value.elements[0],qe.__data[1]=qe.value.elements[1],qe.__data[2]=qe.value.elements[2],qe.__data[3]=qe.value.elements[0],qe.__data[4]=qe.value.elements[3],qe.__data[5]=qe.value.elements[4],qe.__data[6]=qe.value.elements[5],qe.__data[7]=qe.value.elements[0],qe.__data[8]=qe.value.elements[6],qe.__data[9]=qe.value.elements[7],qe.__data[10]=qe.value.elements[8],qe.__data[11]=qe.value.elements[0]):nc.toArray(qe.__data),t.bufferSubData(35345,Ke,qe.__data))}t.bindBuffer(35345,
null);Ab[wd.id]=le}},dispose:function(){for(const wd in Wa)t.deleteBuffer(Wa[wd]);fc=[];Wa={};Ab={}}}}function ae(){const t=db("canvas");t.style.display="block";return t}function Sb(){return Hd.apply(this,arguments)}function Hd(){Hd=Dd(regeneratorRuntime.mark(function A(){var F;return regeneratorRuntime.wrap(function(Q){for(;;)switch(Q.prev=Q.next){case 0:F=yh.part(yh.LandingPage),F.respondsToVisibleWindow=!0,$world.addMorph(F),F.relayout();case 4:case "end":return Q.stop()}},A)}));return Hd.apply(this,
arguments)}bd("main",Sb);class hf{addEventListener(t,A){void 0===this._listeners&&(this._listeners={});const F=this._listeners;void 0===F[t]&&(F[t]=[]);-1===F[t].indexOf(A)&&F[t].push(A)}hasEventListener(t,A){if(void 0===this._listeners)return!1;const F=this._listeners;return void 0!==F[t]&&-1!==F[t].indexOf(A)}removeEventListener(t,A){void 0!==this._listeners&&(t=this._listeners[t],void 0!==t&&(A=t.indexOf(A),-1!==A&&t.splice(A,1)))}dispatchEvent(t){if(void 0!==this._listeners){var A=this._listeners[t.type];
if(void 0!==A){t.target=this;A=A.slice(0);for(let F=0,Q=A.length;F<Q;F++)A[F].call(this,t);t.target=null}}}}const zf="00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f 30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f 40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f 60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f 80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f 90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa ab ac ad ae af b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 da db dc dd de df e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff".split(" "),
Gg=Math.PI/180,vg=180/Math.PI;class tg{constructor(t=0,A=0){tg.prototype.isVector2=!0;this.x=t;this.y=A}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,A){this.x=t;this.y=A;return this}setScalar(t){this.y=this.x=t;return this}setX(t){this.x=t;return this}setY(t){this.y=t;return this}setComponent(t,A){switch(t){case 0:this.x=A;break;case 1:this.y=A;break;default:throw Error("index is out of range: "+t);}return this}getComponent(t){switch(t){case 0:return this.x;
case 1:return this.y;default:throw Error("index is out of range: "+t);}}clone(){return new this.constructor(this.x,this.y)}copy(t){this.x=t.x;this.y=t.y;return this}add(t){this.x+=t.x;this.y+=t.y;return this}addScalar(t){this.x+=t;this.y+=t;return this}addVectors(t,A){this.x=t.x+A.x;this.y=t.y+A.y;return this}addScaledVector(t,A){this.x+=t.x*A;this.y+=t.y*A;return this}sub(t){this.x-=t.x;this.y-=t.y;return this}subScalar(t){this.x-=t;this.y-=t;return this}subVectors(t,A){this.x=t.x-A.x;this.y=t.y-
A.y;return this}multiply(t){this.x*=t.x;this.y*=t.y;return this}multiplyScalar(t){this.x*=t;this.y*=t;return this}divide(t){this.x/=t.x;this.y/=t.y;return this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const A=this.x,F=this.y;t=t.elements;this.x=t[0]*A+t[3]*F+t[6];this.y=t[1]*A+t[4]*F+t[7];return this}min(t){this.x=Math.min(this.x,t.x);this.y=Math.min(this.y,t.y);return this}max(t){this.x=Math.max(this.x,t.x);this.y=Math.max(this.y,t.y);return this}clamp(t,A){this.x=Math.max(t.x,
Math.min(A.x,this.x));this.y=Math.max(t.y,Math.min(A.y,this.y));return this}clampScalar(t,A){this.x=Math.max(t,Math.min(A,this.x));this.y=Math.max(t,Math.min(A,this.y));return this}clampLength(t,A){const F=this.length();return this.divideScalar(F||1).multiplyScalar(Math.max(t,Math.min(A,F)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this}roundToZero(){this.x=
0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);return this}negate(){this.x=-this.x;this.y=-this.y;return this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const A=
this.x-t.x;t=this.y-t.y;return A*A+t*t}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,A){this.x+=(t.x-this.x)*A;this.y+=(t.y-this.y)*A;return this}lerpVectors(t,A,F){this.x=t.x+(A.x-t.x)*F;this.y=t.y+(A.y-t.y)*F;return this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,A=0){this.x=t[A];this.y=t[A+1];return this}toArray(t=[],A=0){t[A]=this.x;t[A+1]=this.y;return t}fromBufferAttribute(t,A){this.x=t.getX(A);
this.y=t.getY(A);return this}rotateAround(t,A){const F=Math.cos(A);A=Math.sin(A);const Q=this.x-t.x,X=this.y-t.y;this.x=Q*F-X*A+t.x;this.y=Q*A+X*F+t.y;return this}random(){this.x=Math.random();this.y=Math.random();return this}*[Symbol.iterator](){yield this.x;yield this.y}}class pd{constructor(){pd.prototype.isMatrix3=!0;this.elements=[1,0,0,0,1,0,0,0,1]}set(t,A,F,Q,X,bb,Wa,Ab,fc){const Lc=this.elements;Lc[0]=t;Lc[1]=Q;Lc[2]=Wa;Lc[3]=A;Lc[4]=X;Lc[5]=Ab;Lc[6]=F;Lc[7]=bb;Lc[8]=fc;return this}identity(){this.set(1,
0,0,0,1,0,0,0,1);return this}copy(t){const A=this.elements;t=t.elements;A[0]=t[0];A[1]=t[1];A[2]=t[2];A[3]=t[3];A[4]=t[4];A[5]=t[5];A[6]=t[6];A[7]=t[7];A[8]=t[8];return this}extractBasis(t,A,F){t.setFromMatrix3Column(this,0);A.setFromMatrix3Column(this,1);F.setFromMatrix3Column(this,2);return this}setFromMatrix4(t){t=t.elements;this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]);return this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,
A){var F=t.elements,Q=A.elements;A=this.elements;t=F[0];const X=F[3],bb=F[6],Wa=F[1],Ab=F[4],fc=F[7],Lc=F[2],wd=F[5];F=F[8];const le=Q[0],je=Q[3],pe=Q[6],qe=Q[1],nc=Q[4],Ke=Q[7],$f=Q[2],Te=Q[5];Q=Q[8];A[0]=t*le+X*qe+bb*$f;A[3]=t*je+X*nc+bb*Te;A[6]=t*pe+X*Ke+bb*Q;A[1]=Wa*le+Ab*qe+fc*$f;A[4]=Wa*je+Ab*nc+fc*Te;A[7]=Wa*pe+Ab*Ke+fc*Q;A[2]=Lc*le+wd*qe+F*$f;A[5]=Lc*je+wd*nc+F*Te;A[8]=Lc*pe+wd*Ke+F*Q;return this}multiplyScalar(t){const A=this.elements;A[0]*=t;A[3]*=t;A[6]*=t;A[1]*=t;A[4]*=t;A[7]*=t;A[2]*=
t;A[5]*=t;A[8]*=t;return this}determinant(){var t=this.elements;const A=t[0],F=t[1],Q=t[2],X=t[3],bb=t[4],Wa=t[5],Ab=t[6],fc=t[7];t=t[8];return A*bb*t-A*Wa*fc-F*X*t+F*Wa*Ab+Q*X*fc-Q*bb*Ab}invert(){const t=this.elements,A=t[0],F=t[1],Q=t[2],X=t[3],bb=t[4],Wa=t[5],Ab=t[6],fc=t[7],Lc=t[8],wd=Lc*bb-Wa*fc,le=Wa*Ab-Lc*X,je=fc*X-bb*Ab;var pe=A*wd+F*le+Q*je;if(0===pe)return this.set(0,0,0,0,0,0,0,0,0);pe=1/pe;t[0]=wd*pe;t[1]=(Q*fc-Lc*F)*pe;t[2]=(Wa*F-Q*bb)*pe;t[3]=le*pe;t[4]=(Lc*A-Q*Ab)*pe;t[5]=(Q*X-Wa*A)*
pe;t[6]=je*pe;t[7]=(F*Ab-fc*A)*pe;t[8]=(bb*A-F*X)*pe;return this}transpose(){let t;const A=this.elements;t=A[1];A[1]=A[3];A[3]=t;t=A[2];A[2]=A[6];A[6]=t;t=A[5];A[5]=A[7];A[7]=t;return this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const A=this.elements;t[0]=A[0];t[1]=A[3];t[2]=A[6];t[3]=A[1];t[4]=A[4];t[5]=A[7];t[6]=A[2];t[7]=A[5];t[8]=A[8];return this}setUvTransform(t,A,F,Q,X,bb,Wa){const Ab=Math.cos(X);X=Math.sin(X);this.set(F*Ab,F*X,-F*(Ab*bb+X*
Wa)+bb+t,-Q*X,Q*Ab,-Q*(-X*bb+Ab*Wa)+Wa+A,0,0,1);return this}scale(t,A){const F=this.elements;F[0]*=t;F[3]*=t;F[6]*=t;F[1]*=A;F[4]*=A;F[7]*=A;return this}rotate(t){const A=Math.cos(t);t=Math.sin(t);const F=this.elements,Q=F[0],X=F[3],bb=F[6],Wa=F[1],Ab=F[4],fc=F[7];F[0]=A*Q+t*Wa;F[3]=A*X+t*Ab;F[6]=A*bb+t*fc;F[1]=-t*Q+A*Wa;F[4]=-t*X+A*Ab;F[7]=-t*bb+A*fc;return this}translate(t,A){const F=this.elements;F[0]+=t*F[2];F[3]+=t*F[5];F[6]+=t*F[8];F[1]+=A*F[2];F[4]+=A*F[5];F[7]+=A*F[8];return this}equals(t){const A=
this.elements;t=t.elements;for(let F=0;9>F;F++)if(A[F]!==t[F])return!1;return!0}fromArray(t,A=0){for(let F=0;9>F;F++)this.elements[F]=t[F+A];return this}toArray(t=[],A=0){const F=this.elements;t[A]=F[0];t[A+1]=F[1];t[A+2]=F[2];t[A+3]=F[3];t[A+4]=F[4];t[A+5]=F[5];t[A+6]=F[6];t[A+7]=F[7];t[A+8]=F[8];return t}clone(){return(new this.constructor).fromArray(this.elements)}}const Z={["srgb"]:{["srgb-linear"]:Xa},["srgb-linear"]:{["srgb"]:Gb}},Ga={legacyMode:!0,get workingColorSpace(){return"srgb-linear"},
set workingColorSpace(t){console.warn("THREE.ColorManagement: .workingColorSpace is readonly.")},convert:function(t,A,F){if(this.legacyMode||A===F||!A||!F)return t;if(Z[A]&&void 0!==Z[A][F])return A=Z[A][F],t.r=A(t.r),t.g=A(t.g),t.b=A(t.b),t;throw Error("Unsupported color space conversion.");},fromWorkingColorSpace:function(t,A){return this.convert(t,this.workingColorSpace,A)},toWorkingColorSpace:function(t,A){return this.convert(t,A,this.workingColorSpace)}},fb={aliceblue:15792383,antiquewhite:16444375,
aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,
darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,
indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,
maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,
papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,
violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},ya={r:0,g:0,b:0},tc={h:0,s:0,l:0},Mc={h:0,s:0,l:0};class Cd{constructor(t,A,F){this.isColor=!0;this.b=this.g=this.r=1;return void 0===A&&void 0===F?this.set(t):this.setRGB(t,A,F)}set(t){t&&t.isColor?this.copy(t):"number"===typeof t?this.setHex(t):"string"===typeof t&&this.setStyle(t);return this}setScalar(t){this.b=this.g=this.r=t;return this}setHex(t,A="srgb"){t=Math.floor(t);this.r=(t>>16&255)/
255;this.g=(t>>8&255)/255;this.b=(t&255)/255;Ga.toWorkingColorSpace(this,A);return this}setRGB(t,A,F,Q="srgb-linear"){this.r=t;this.g=A;this.b=F;Ga.toWorkingColorSpace(this,Q);return this}setHSL(t,A,F,Q="srgb-linear"){t=(t%1+1)%1;A=qb(A,0,1);F=qb(F,0,1);0===A?this.r=this.g=this.b=F:(A=.5>=F?F*(1+A):F+A-F*A,F=2*F-A,this.r=sc(F,A,t+1/3),this.g=sc(F,A,t),this.b=sc(F,A,t-1/3));Ga.toWorkingColorSpace(this,Q);return this}setStyle(t,A="srgb"){function F(bb){void 0!==bb&&1>parseFloat(bb)&&console.warn("THREE.Color: Alpha component of "+
t+" will be ignored.")}var Q;if(Q=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t)){var X=Q[2];switch(Q[1]){case "rgb":case "rgba":if(Q=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(X))return this.r=Math.min(255,parseInt(Q[1],10))/255,this.g=Math.min(255,parseInt(Q[2],10))/255,this.b=Math.min(255,parseInt(Q[3],10))/255,Ga.toWorkingColorSpace(this,A),F(Q[4]),this;if(Q=/^\s*(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(X))return this.r=Math.min(100,parseInt(Q[1],10))/
100,this.g=Math.min(100,parseInt(Q[2],10))/100,this.b=Math.min(100,parseInt(Q[3],10))/100,Ga.toWorkingColorSpace(this,A),F(Q[4]),this;break;case "hsl":case "hsla":if(Q=/^\s*(\d*\.?\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(X)){X=parseFloat(Q[1])/360;const bb=parseInt(Q[2],10)/100,Wa=parseInt(Q[3],10)/100;F(Q[4]);return this.setHSL(X,bb,Wa,A)}}}else if(Q=/^#([A-Fa-f\d]+)$/.exec(t)){Q=Q[1];X=Q.length;if(3===X)return this.r=parseInt(Q.charAt(0)+Q.charAt(0),16)/255,this.g=parseInt(Q.charAt(1)+
Q.charAt(1),16)/255,this.b=parseInt(Q.charAt(2)+Q.charAt(2),16)/255,Ga.toWorkingColorSpace(this,A),this;if(6===X)return this.r=parseInt(Q.charAt(0)+Q.charAt(1),16)/255,this.g=parseInt(Q.charAt(2)+Q.charAt(3),16)/255,this.b=parseInt(Q.charAt(4)+Q.charAt(5),16)/255,Ga.toWorkingColorSpace(this,A),this}return t&&0<t.length?this.setColorName(t,A):this}setColorName(t,A="srgb"){const F=fb[t.toLowerCase()];void 0!==F?this.setHex(F,A):console.warn("THREE.Color: Unknown color "+t);return this}clone(){return new this.constructor(this.r,
this.g,this.b)}copy(t){this.r=t.r;this.g=t.g;this.b=t.b;return this}copySRGBToLinear(t){this.r=Xa(t.r);this.g=Xa(t.g);this.b=Xa(t.b);return this}copyLinearToSRGB(t){this.r=Gb(t.r);this.g=Gb(t.g);this.b=Gb(t.b);return this}convertSRGBToLinear(){this.copySRGBToLinear(this);return this}convertLinearToSRGB(){this.copyLinearToSRGB(this);return this}getHex(t="srgb"){Ga.fromWorkingColorSpace(ub(this,ya),t);return qb(255*ya.r,0,255)<<16^qb(255*ya.g,0,255)<<8^qb(255*ya.b,0,255)<<0}getHexString(t="srgb"){return("000000"+
this.getHex(t).toString(16)).slice(-6)}getHSL(t,A="srgb-linear"){Ga.fromWorkingColorSpace(ub(this,ya),A);A=ya.r;const F=ya.g,Q=ya.b,X=Math.max(A,F,Q);var bb=Math.min(A,F,Q);let Wa;const Ab=(bb+X)/2;if(bb===X)bb=Wa=0;else{const fc=X-bb;bb=.5>=Ab?fc/(X+bb):fc/(2-X-bb);switch(X){case A:Wa=(F-Q)/fc+(F<Q?6:0);break;case F:Wa=(Q-A)/fc+2;break;case Q:Wa=(A-F)/fc+4}Wa/=6}t.h=Wa;t.s=bb;t.l=Ab;return t}getRGB(t,A="srgb-linear"){Ga.fromWorkingColorSpace(ub(this,ya),A);t.r=ya.r;t.g=ya.g;t.b=ya.b;return t}getStyle(t=
"srgb"){Ga.fromWorkingColorSpace(ub(this,ya),t);return"srgb"!==t?`color(${t} ${ya.r} ${ya.g} ${ya.b})`:`rgb(${255*ya.r|0},${255*ya.g|0},${255*ya.b|0})`}offsetHSL(t,A,F){this.getHSL(tc);tc.h+=t;tc.s+=A;tc.l+=F;this.setHSL(tc.h,tc.s,tc.l);return this}add(t){this.r+=t.r;this.g+=t.g;this.b+=t.b;return this}addColors(t,A){this.r=t.r+A.r;this.g=t.g+A.g;this.b=t.b+A.b;return this}addScalar(t){this.r+=t;this.g+=t;this.b+=t;return this}sub(t){this.r=Math.max(0,this.r-t.r);this.g=Math.max(0,this.g-t.g);this.b=
Math.max(0,this.b-t.b);return this}multiply(t){this.r*=t.r;this.g*=t.g;this.b*=t.b;return this}multiplyScalar(t){this.r*=t;this.g*=t;this.b*=t;return this}lerp(t,A){this.r+=(t.r-this.r)*A;this.g+=(t.g-this.g)*A;this.b+=(t.b-this.b)*A;return this}lerpColors(t,A,F){this.r=t.r+(A.r-t.r)*F;this.g=t.g+(A.g-t.g)*F;this.b=t.b+(A.b-t.b)*F;return this}lerpHSL(t,A){this.getHSL(tc);t.getHSL(Mc);this.setHSL((1-A)*tc.h+A*Mc.h,(1-A)*tc.s+A*Mc.s,(1-A)*tc.l+A*Mc.l);return this}equals(t){return t.r===this.r&&t.g===
this.g&&t.b===this.b}fromArray(t,A=0){this.r=t[A];this.g=t[A+1];this.b=t[A+2];return this}toArray(t=[],A=0){t[A]=this.r;t[A+1]=this.g;t[A+2]=this.b;return t}fromBufferAttribute(t,A){this.r=t.getX(A);this.g=t.getY(A);this.b=t.getZ(A);!0===t.normalized&&(this.r/=255,this.g/=255,this.b/=255);return this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r;yield this.g;yield this.b}}Cd.NAMES=fb;let Ee;class bf{static getDataURL(t){if(/^data:/i.test(t.src)||"undefined"==typeof HTMLCanvasElement)return t.src;
if(t instanceof HTMLCanvasElement)var A=t;else void 0===Ee&&(Ee=db("canvas")),Ee.width=t.width,Ee.height=t.height,A=Ee.getContext("2d"),t instanceof ImageData?A.putImageData(t,0,0):A.drawImage(t,0,0,t.width,t.height),A=Ee;return 2048<A.width||2048<A.height?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),A.toDataURL("image/jpeg",.6)):A.toDataURL("image/png")}static sRGBToLinear(t){if("undefined"!==typeof HTMLImageElement&&t instanceof HTMLImageElement||
"undefined"!==typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!==typeof ImageBitmap&&t instanceof ImageBitmap){var A=db("canvas");A.width=t.width;A.height=t.height;var F=A.getContext("2d");F.drawImage(t,0,0,t.width,t.height);t=F.getImageData(0,0,t.width,t.height);const Q=t.data;for(let X=0;X<Q.length;X++)Q[X]=255*Xa(Q[X]/255);F.putImageData(t,0,0);return A}if(t.data){A=t.data.slice(0);for(F=0;F<A.length;F++)A[F]=A instanceof Uint8Array||A instanceof Uint8ClampedArray?Math.floor(255*
Xa(A[F]/255)):Xa(A[F]);return{data:A,width:t.width,height:t.height}}console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");return t}}class Oe{constructor(t=null){this.isSource=!0;this.uuid=Od();this.data=t;this.version=0}set needsUpdate(t){!0===t&&this.version++}toJSON(t){const A=void 0===t||"string"===typeof t;if(!A&&void 0!==t.images[this.uuid])return t.images[this.uuid];const F={uuid:this.uuid,url:""},Q=this.data;if(null!==Q){let X;if(Array.isArray(Q)){X=
[];for(let bb=0,Wa=Q.length;bb<Wa;bb++)Q[bb].isDataTexture?X.push(sb(Q[bb].image)):X.push(sb(Q[bb]))}else X=sb(Q);F.url=X}A||(t.images[this.uuid]=F);return F}}let Fe=0;class Pf extends hf{constructor(t=Pf.DEFAULT_IMAGE,A=Pf.DEFAULT_MAPPING,F=1001,Q=1001,X=1006,bb=1008,Wa=1023,Ab=1009,fc=1,Lc=3E3){super();this.isTexture=!0;Object.defineProperty(this,"id",{value:Fe++});this.uuid=Od();this.name="";this.source=new Oe(t);this.mipmaps=[];this.mapping=A;this.wrapS=F;this.wrapT=Q;this.magFilter=X;this.minFilter=
bb;this.anisotropy=fc;this.format=Wa;this.internalFormat=null;this.type=Ab;this.offset=new tg(0,0);this.repeat=new tg(1,1);this.center=new tg(0,0);this.rotation=0;this.matrixAutoUpdate=!0;this.matrix=new pd;this.generateMipmaps=!0;this.premultiplyAlpha=!1;this.flipY=!0;this.unpackAlignment=4;this.encoding=Lc;this.userData={};this.version=0;this.onUpdate=null;this.needsPMREMUpdate=this.isRenderTargetTexture=!1}get image(){return this.source.data}set image(t){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,
this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name;this.source=t.source;this.mipmaps=t.mipmaps.slice(0);this.mapping=t.mapping;this.wrapS=t.wrapS;this.wrapT=t.wrapT;this.magFilter=t.magFilter;this.minFilter=t.minFilter;this.anisotropy=t.anisotropy;this.format=t.format;this.internalFormat=t.internalFormat;this.type=t.type;this.offset.copy(t.offset);this.repeat.copy(t.repeat);this.center.copy(t.center);
this.rotation=t.rotation;this.matrixAutoUpdate=t.matrixAutoUpdate;this.matrix.copy(t.matrix);this.generateMipmaps=t.generateMipmaps;this.premultiplyAlpha=t.premultiplyAlpha;this.flipY=t.flipY;this.unpackAlignment=t.unpackAlignment;this.encoding=t.encoding;this.userData=JSON.parse(JSON.stringify(t.userData));this.needsUpdate=!0;return this}toJSON(t){const A=void 0===t||"string"===typeof t;if(!A&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];const F={metadata:{version:4.5,type:"Texture",
generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};
"{}"!==JSON.stringify(this.userData)&&(F.userData=this.userData);A||(t.textures[this.uuid]=F);return F}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(300!==this.mapping)return t;t.applyMatrix3(this.matrix);if(0>t.x||1<t.x)switch(this.wrapS){case 1E3:t.x-=Math.floor(t.x);break;case 1001:t.x=0>t.x?0:1;break;case 1002:t.x=1===Math.abs(Math.floor(t.x)%2)?Math.ceil(t.x)-t.x:t.x-Math.floor(t.x)}if(0>t.y||1<t.y)switch(this.wrapT){case 1E3:t.y-=Math.floor(t.y);break;case 1001:t.y=0>t.y?
0:1;break;case 1002:t.y=1===Math.abs(Math.floor(t.y)%2)?Math.ceil(t.y)-t.y:t.y-Math.floor(t.y)}this.flipY&&(t.y=1-t.y);return t}set needsUpdate(t){!0===t&&(this.version++,this.source.needsUpdate=!0)}}Pf.DEFAULT_IMAGE=null;Pf.DEFAULT_MAPPING=300;class eg{constructor(t=0,A=0,F=0,Q=1){eg.prototype.isVector4=!0;this.x=t;this.y=A;this.z=F;this.w=Q}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,A,F,Q){this.x=t;this.y=A;this.z=F;this.w=Q;return this}setScalar(t){this.w=
this.z=this.y=this.x=t;return this}setX(t){this.x=t;return this}setY(t){this.y=t;return this}setZ(t){this.z=t;return this}setW(t){this.w=t;return this}setComponent(t,A){switch(t){case 0:this.x=A;break;case 1:this.y=A;break;case 2:this.z=A;break;case 3:this.w=A;break;default:throw Error("index is out of range: "+t);}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw Error("index is out of range: "+t);}}clone(){return new this.constructor(this.x,
this.y,this.z,this.w)}copy(t){this.x=t.x;this.y=t.y;this.z=t.z;this.w=void 0!==t.w?t.w:1;return this}add(t){this.x+=t.x;this.y+=t.y;this.z+=t.z;this.w+=t.w;return this}addScalar(t){this.x+=t;this.y+=t;this.z+=t;this.w+=t;return this}addVectors(t,A){this.x=t.x+A.x;this.y=t.y+A.y;this.z=t.z+A.z;this.w=t.w+A.w;return this}addScaledVector(t,A){this.x+=t.x*A;this.y+=t.y*A;this.z+=t.z*A;this.w+=t.w*A;return this}sub(t){this.x-=t.x;this.y-=t.y;this.z-=t.z;this.w-=t.w;return this}subScalar(t){this.x-=t;this.y-=
t;this.z-=t;this.w-=t;return this}subVectors(t,A){this.x=t.x-A.x;this.y=t.y-A.y;this.z=t.z-A.z;this.w=t.w-A.w;return this}multiply(t){this.x*=t.x;this.y*=t.y;this.z*=t.z;this.w*=t.w;return this}multiplyScalar(t){this.x*=t;this.y*=t;this.z*=t;this.w*=t;return this}applyMatrix4(t){const A=this.x,F=this.y,Q=this.z,X=this.w;t=t.elements;this.x=t[0]*A+t[4]*F+t[8]*Q+t[12]*X;this.y=t[1]*A+t[5]*F+t[9]*Q+t[13]*X;this.z=t[2]*A+t[6]*F+t[10]*Q+t[14]*X;this.w=t[3]*A+t[7]*F+t[11]*Q+t[15]*X;return this}divideScalar(t){return this.multiplyScalar(1/
t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const A=Math.sqrt(1-t.w*t.w);1E-4>A?(this.x=1,this.z=this.y=0):(this.x=t.x/A,this.y=t.y/A,this.z=t.z/A);return this}setAxisAngleFromRotationMatrix(t){t=t.elements;var A=t[0];var F=t[4];var Q=t[8];const X=t[1];var bb=t[5],Wa=t[9];var Ab=t[2];var fc=t[6];var Lc=t[10];if(.01>Math.abs(F-X)&&.01>Math.abs(Q-Ab)&&.01>Math.abs(Wa-fc)){if(.1>Math.abs(F+X)&&.1>Math.abs(Q+Ab)&&.1>Math.abs(Wa+fc)&&.1>Math.abs(A+bb+Lc-3))return this.set(1,0,0,0),this;t=
Math.PI;A=(A+1)/2;bb=(bb+1)/2;Lc=(Lc+1)/2;F=(F+X)/4;Q=(Q+Ab)/4;Wa=(Wa+fc)/4;A>bb&&A>Lc?.01>A?(fc=0,F=Ab=.707106781):(fc=Math.sqrt(A),Ab=F/fc,F=Q/fc):bb>Lc?.01>bb?(fc=.707106781,Ab=0,F=.707106781):(Ab=Math.sqrt(bb),fc=F/Ab,F=Wa/Ab):.01>Lc?(Ab=fc=.707106781,F=0):(F=Math.sqrt(Lc),fc=Q/F,Ab=Wa/F);this.set(fc,Ab,F,t);return this}t=Math.sqrt((fc-Wa)*(fc-Wa)+(Q-Ab)*(Q-Ab)+(X-F)*(X-F));.001>Math.abs(t)&&(t=1);this.x=(fc-Wa)/t;this.y=(Q-Ab)/t;this.z=(X-F)/t;this.w=Math.acos((A+bb+Lc-1)/2);return this}min(t){this.x=
Math.min(this.x,t.x);this.y=Math.min(this.y,t.y);this.z=Math.min(this.z,t.z);this.w=Math.min(this.w,t.w);return this}max(t){this.x=Math.max(this.x,t.x);this.y=Math.max(this.y,t.y);this.z=Math.max(this.z,t.z);this.w=Math.max(this.w,t.w);return this}clamp(t,A){this.x=Math.max(t.x,Math.min(A.x,this.x));this.y=Math.max(t.y,Math.min(A.y,this.y));this.z=Math.max(t.z,Math.min(A.z,this.z));this.w=Math.max(t.w,Math.min(A.w,this.w));return this}clampScalar(t,A){this.x=Math.max(t,Math.min(A,this.x));this.y=
Math.max(t,Math.min(A,this.y));this.z=Math.max(t,Math.min(A,this.z));this.w=Math.max(t,Math.min(A,this.w));return this}clampLength(t,A){const F=this.length();return this.divideScalar(F||1).multiplyScalar(Math.max(t,Math.min(A,F)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this}round(){this.x=Math.round(this.x);
this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this}roundToZero(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);this.w=0>this.w?Math.ceil(this.w):Math.floor(this.w);return this}negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*
this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,A){this.x+=(t.x-this.x)*A;this.y+=(t.y-this.y)*A;this.z+=(t.z-this.z)*A;this.w+=(t.w-this.w)*A;return this}lerpVectors(t,A,F){this.x=t.x+(A.x-t.x)*F;this.y=t.y+(A.y-t.y)*F;this.z=
t.z+(A.z-t.z)*F;this.w=t.w+(A.w-t.w)*F;return this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,A=0){this.x=t[A];this.y=t[A+1];this.z=t[A+2];this.w=t[A+3];return this}toArray(t=[],A=0){t[A]=this.x;t[A+1]=this.y;t[A+2]=this.z;t[A+3]=this.w;return t}fromBufferAttribute(t,A){this.x=t.getX(A);this.y=t.getY(A);this.z=t.getZ(A);this.w=t.getW(A);return this}random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();this.w=Math.random();return this}*[Symbol.iterator](){yield this.x;
yield this.y;yield this.z;yield this.w}}class be extends hf{constructor(t,A,F={}){super();this.isWebGLRenderTarget=!0;this.width=t;this.height=A;this.depth=1;this.scissor=new eg(0,0,t,A);this.scissorTest=!1;this.viewport=new eg(0,0,t,A);this.texture=new Pf({width:t,height:A,depth:1},F.mapping,F.wrapS,F.wrapT,F.magFilter,F.minFilter,F.format,F.type,F.anisotropy,F.encoding);this.texture.isRenderTargetTexture=!0;this.texture.flipY=!1;this.texture.generateMipmaps=void 0!==F.generateMipmaps?F.generateMipmaps:
!1;this.texture.internalFormat=void 0!==F.internalFormat?F.internalFormat:null;this.texture.minFilter=void 0!==F.minFilter?F.minFilter:1006;this.depthBuffer=void 0!==F.depthBuffer?F.depthBuffer:!0;this.stencilBuffer=void 0!==F.stencilBuffer?F.stencilBuffer:!1;this.depthTexture=void 0!==F.depthTexture?F.depthTexture:null;this.samples=void 0!==F.samples?F.samples:0}setSize(t,A,F=1){if(this.width!==t||this.height!==A||this.depth!==F)this.width=t,this.height=A,this.depth=F,this.texture.image.width=t,
this.texture.image.height=A,this.texture.image.depth=F,this.dispose();this.viewport.set(0,0,t,A);this.scissor.set(0,0,t,A)}clone(){return(new this.constructor).copy(this)}copy(t){this.width=t.width;this.height=t.height;this.depth=t.depth;this.viewport.copy(t.viewport);this.texture=t.texture.clone();this.texture.isRenderTargetTexture=!0;const A=Object.assign({},t.texture.image);this.texture.source=new Oe(A);this.depthBuffer=t.depthBuffer;this.stencilBuffer=t.stencilBuffer;null!==t.depthTexture&&(this.depthTexture=
t.depthTexture.clone());this.samples=t.samples;return this}dispose(){this.dispatchEvent({type:"dispose"})}}class v extends Pf{constructor(t=null,A=1,F=1,Q=1){super(null);this.isDataArrayTexture=!0;this.image={data:t,width:A,height:F,depth:Q};this.minFilter=this.magFilter=1003;this.wrapR=1001;this.flipY=this.generateMipmaps=!1;this.unpackAlignment=1}}class oa extends Pf{constructor(t=null,A=1,F=1,Q=1){super(null);this.isData3DTexture=!0;this.image={data:t,width:A,height:F,depth:Q};this.minFilter=this.magFilter=
1003;this.wrapR=1001;this.flipY=this.generateMipmaps=!1;this.unpackAlignment=1}}class Oc{constructor(t=0,A=0,F=0,Q=1){this.isQuaternion=!0;this._x=t;this._y=A;this._z=F;this._w=Q}static slerpFlat(t,A,F,Q,X,bb,Wa){let Ab=F[Q+0],fc=F[Q+1],Lc=F[Q+2];F=F[Q+3];Q=X[bb+0];const wd=X[bb+1],le=X[bb+2];X=X[bb+3];if(0===Wa)t[A+0]=Ab,t[A+1]=fc,t[A+2]=Lc,t[A+3]=F;else if(1===Wa)t[A+0]=Q,t[A+1]=wd,t[A+2]=le,t[A+3]=X;else{if(F!==X||Ab!==Q||fc!==wd||Lc!==le){bb=1-Wa;var je=Ab*Q+fc*wd+Lc*le+F*X,pe=0<=je?1:-1,qe=1-
je*je;qe>Number.EPSILON&&(qe=Math.sqrt(qe),je=Math.atan2(qe,je*pe),bb=Math.sin(bb*je)/qe,Wa=Math.sin(Wa*je)/qe);pe*=Wa;Ab=Ab*bb+Q*pe;fc=fc*bb+wd*pe;Lc=Lc*bb+le*pe;F=F*bb+X*pe;bb===1-Wa&&(Wa=1/Math.sqrt(Ab*Ab+fc*fc+Lc*Lc+F*F),Ab*=Wa,fc*=Wa,Lc*=Wa,F*=Wa)}t[A]=Ab;t[A+1]=fc;t[A+2]=Lc;t[A+3]=F}}static multiplyQuaternionsFlat(t,A,F,Q,X,bb){const Wa=F[Q],Ab=F[Q+1],fc=F[Q+2];F=F[Q+3];Q=X[bb];const Lc=X[bb+1],wd=X[bb+2];X=X[bb+3];t[A]=Wa*X+F*Q+Ab*wd-fc*Lc;t[A+1]=Ab*X+F*Lc+fc*Q-Wa*wd;t[A+2]=fc*X+F*wd+Wa*Lc-
Ab*Q;t[A+3]=F*X-Wa*Q-Ab*Lc-fc*wd;return t}get x(){return this._x}set x(t){this._x=t;this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t;this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t;this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t;this._onChangeCallback()}set(t,A,F,Q){this._x=t;this._y=A;this._z=F;this._w=Q;this._onChangeCallback();return this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){this._x=t.x;this._y=t.y;
this._z=t.z;this._w=t.w;this._onChangeCallback();return this}setFromEuler(t,A){if(!t||!t.isEuler)throw Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var F=t._x,Q=t._y,X=t._z;t=t._order;var bb=Math.cos;const Wa=Math.sin,Ab=bb(F/2),fc=bb(Q/2);bb=bb(X/2);F=Wa(F/2);Q=Wa(Q/2);X=Wa(X/2);switch(t){case "XYZ":this._x=F*fc*bb+Ab*Q*X;this._y=Ab*Q*bb-F*fc*X;this._z=Ab*fc*X+F*Q*bb;this._w=Ab*fc*bb-F*Q*X;break;case "YXZ":this._x=F*fc*bb+Ab*Q*X;this._y=
Ab*Q*bb-F*fc*X;this._z=Ab*fc*X-F*Q*bb;this._w=Ab*fc*bb+F*Q*X;break;case "ZXY":this._x=F*fc*bb-Ab*Q*X;this._y=Ab*Q*bb+F*fc*X;this._z=Ab*fc*X+F*Q*bb;this._w=Ab*fc*bb-F*Q*X;break;case "ZYX":this._x=F*fc*bb-Ab*Q*X;this._y=Ab*Q*bb+F*fc*X;this._z=Ab*fc*X-F*Q*bb;this._w=Ab*fc*bb+F*Q*X;break;case "YZX":this._x=F*fc*bb+Ab*Q*X;this._y=Ab*Q*bb+F*fc*X;this._z=Ab*fc*X-F*Q*bb;this._w=Ab*fc*bb-F*Q*X;break;case "XZY":this._x=F*fc*bb-Ab*Q*X;this._y=Ab*Q*bb-F*fc*X;this._z=Ab*fc*X+F*Q*bb;this._w=Ab*fc*bb+F*Q*X;break;
default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+t)}!1!==A&&this._onChangeCallback();return this}setFromAxisAngle(t,A){A/=2;const F=Math.sin(A);this._x=t.x*F;this._y=t.y*F;this._z=t.z*F;this._w=Math.cos(A);this._onChangeCallback();return this}setFromRotationMatrix(t){var A=t.elements,F=A[0];t=A[4];const Q=A[8],X=A[1],bb=A[5],Wa=A[9],Ab=A[2],fc=A[6];A=A[10];const Lc=F+bb+A;0<Lc?(F=.5/Math.sqrt(Lc+1),this._w=.25/F,this._x=(fc-Wa)*F,this._y=(Q-Ab)*F,this._z=(X-
t)*F):F>bb&&F>A?(F=2*Math.sqrt(1+F-bb-A),this._w=(fc-Wa)/F,this._x=.25*F,this._y=(t+X)/F,this._z=(Q+Ab)/F):bb>A?(F=2*Math.sqrt(1+bb-F-A),this._w=(Q-Ab)/F,this._x=(t+X)/F,this._y=.25*F,this._z=(Wa+fc)/F):(F=2*Math.sqrt(1+A-F-bb),this._w=(X-t)/F,this._x=(Q+Ab)/F,this._y=(Wa+fc)/F,this._z=.25*F);this._onChangeCallback();return this}setFromUnitVectors(t,A){let F=t.dot(A)+1;F<Number.EPSILON?(F=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0):(this._x=0,this._y=-t.z,this._z=t.y)):(this._x=
t.y*A.z-t.z*A.y,this._y=t.z*A.x-t.x*A.z,this._z=t.x*A.y-t.y*A.x);this._w=F;return this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(qb(this.dot(t),-1,1)))}rotateTowards(t,A){const F=this.angleTo(t);if(0===F)return this;this.slerp(t,Math.min(1,A/F));return this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){this._x*=-1;this._y*=-1;this._z*=-1;this._onChangeCallback();return this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*
this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();0===t?(this._z=this._y=this._x=0,this._w=1):(t=1/t,this._x*=t,this._y*=t,this._z*=t,this._w*=t);this._onChangeCallback();return this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,A){const F=t._x,Q=t._y,X=t._z;t=t._w;const bb=A._x,Wa=A._y,Ab=
A._z;A=A._w;this._x=F*A+t*bb+Q*Ab-X*Wa;this._y=Q*A+t*Wa+X*bb-F*Ab;this._z=X*A+t*Ab+F*Wa-Q*bb;this._w=t*A-F*bb-Q*Wa-X*Ab;this._onChangeCallback();return this}slerp(t,A){if(0===A)return this;if(1===A)return this.copy(t);const F=this._x,Q=this._y,X=this._z,bb=this._w;var Wa=bb*t._w+F*t._x+Q*t._y+X*t._z;0>Wa?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,Wa=-Wa):this.copy(t);if(1<=Wa)return this._w=bb,this._x=F,this._y=Q,this._z=X,this;t=1-Wa*Wa;if(t<=Number.EPSILON)return Wa=1-A,this._w=Wa*
bb+A*this._w,this._x=Wa*F+A*this._x,this._y=Wa*Q+A*this._y,this._z=Wa*X+A*this._z,this.normalize(),this._onChangeCallback(),this;t=Math.sqrt(t);const Ab=Math.atan2(t,Wa);Wa=Math.sin((1-A)*Ab)/t;A=Math.sin(A*Ab)/t;this._w=bb*Wa+this._w*A;this._x=F*Wa+this._x*A;this._y=Q*Wa+this._y*A;this._z=X*Wa+this._z*A;this._onChangeCallback();return this}slerpQuaternions(t,A,F){return this.copy(t).slerp(A,F)}random(){var t=Math.random();const A=Math.sqrt(1-t);t=Math.sqrt(t);const F=2*Math.PI*Math.random(),Q=2*
Math.PI*Math.random();return this.set(A*Math.cos(F),t*Math.sin(Q),t*Math.cos(Q),A*Math.sin(F))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,A=0){this._x=t[A];this._y=t[A+1];this._z=t[A+2];this._w=t[A+3];this._onChangeCallback();return this}toArray(t=[],A=0){t[A]=this._x;t[A+1]=this._y;t[A+2]=this._z;t[A+3]=this._w;return t}fromBufferAttribute(t,A){this._x=t.getX(A);this._y=t.getY(A);this._z=t.getZ(A);this._w=t.getW(A);return this}_onChange(t){this._onChangeCallback=
t;return this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x;yield this._y;yield this._z;yield this._w}}class Tb{constructor(t=0,A=0,F=0){Tb.prototype.isVector3=!0;this.x=t;this.y=A;this.z=F}set(t,A,F){void 0===F&&(F=this.z);this.x=t;this.y=A;this.z=F;return this}setScalar(t){this.z=this.y=this.x=t;return this}setX(t){this.x=t;return this}setY(t){this.y=t;return this}setZ(t){this.z=t;return this}setComponent(t,A){switch(t){case 0:this.x=A;break;case 1:this.y=A;break;case 2:this.z=A;break;
default:throw Error("index is out of range: "+t);}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw Error("index is out of range: "+t);}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){this.x=t.x;this.y=t.y;this.z=t.z;return this}add(t){this.x+=t.x;this.y+=t.y;this.z+=t.z;return this}addScalar(t){this.x+=t;this.y+=t;this.z+=t;return this}addVectors(t,A){this.x=t.x+A.x;this.y=t.y+A.y;this.z=t.z+A.z;return this}addScaledVector(t,
A){this.x+=t.x*A;this.y+=t.y*A;this.z+=t.z*A;return this}sub(t){this.x-=t.x;this.y-=t.y;this.z-=t.z;return this}subScalar(t){this.x-=t;this.y-=t;this.z-=t;return this}subVectors(t,A){this.x=t.x-A.x;this.y=t.y-A.y;this.z=t.z-A.z;return this}multiply(t){this.x*=t.x;this.y*=t.y;this.z*=t.z;return this}multiplyScalar(t){this.x*=t;this.y*=t;this.z*=t;return this}multiplyVectors(t,A){this.x=t.x*A.x;this.y=t.y*A.y;this.z=t.z*A.z;return this}applyEuler(t){return this.applyQuaternion(Ye.setFromEuler(t))}applyAxisAngle(t,
A){return this.applyQuaternion(Ye.setFromAxisAngle(t,A))}applyMatrix3(t){const A=this.x,F=this.y,Q=this.z;t=t.elements;this.x=t[0]*A+t[3]*F+t[6]*Q;this.y=t[1]*A+t[4]*F+t[7]*Q;this.z=t[2]*A+t[5]*F+t[8]*Q;return this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const A=this.x,F=this.y,Q=this.z;t=t.elements;const X=1/(t[3]*A+t[7]*F+t[11]*Q+t[15]);this.x=(t[0]*A+t[4]*F+t[8]*Q+t[12])*X;this.y=(t[1]*A+t[5]*F+t[9]*Q+t[13])*X;this.z=(t[2]*A+t[6]*F+t[10]*Q+t[14])*X;return this}applyQuaternion(t){var A=
this.x;const F=this.y,Q=this.z,X=t.x,bb=t.y,Wa=t.z;t=t.w;const Ab=t*A+bb*Q-Wa*F,fc=t*F+Wa*A-X*Q,Lc=t*Q+X*F-bb*A;A=-X*A-bb*F-Wa*Q;this.x=Ab*t+A*-X+fc*-Wa-Lc*-bb;this.y=fc*t+A*-bb+Lc*-X-Ab*-Wa;this.z=Lc*t+A*-Wa+Ab*-bb-fc*-X;return this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const A=this.x,F=this.y,Q=this.z;t=t.elements;this.x=t[0]*A+t[4]*
F+t[8]*Q;this.y=t[1]*A+t[5]*F+t[9]*Q;this.z=t[2]*A+t[6]*F+t[10]*Q;return this.normalize()}divide(t){this.x/=t.x;this.y/=t.y;this.z/=t.z;return this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){this.x=Math.min(this.x,t.x);this.y=Math.min(this.y,t.y);this.z=Math.min(this.z,t.z);return this}max(t){this.x=Math.max(this.x,t.x);this.y=Math.max(this.y,t.y);this.z=Math.max(this.z,t.z);return this}clamp(t,A){this.x=Math.max(t.x,Math.min(A.x,this.x));this.y=Math.max(t.y,Math.min(A.y,this.y));this.z=
Math.max(t.z,Math.min(A.z,this.z));return this}clampScalar(t,A){this.x=Math.max(t,Math.min(A,this.x));this.y=Math.max(t,Math.min(A,this.y));this.z=Math.max(t,Math.min(A,this.z));return this}clampLength(t,A){const F=this.length();return this.divideScalar(F||1).multiplyScalar(Math.max(t,Math.min(A,F)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this}round(){this.x=
Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this}roundToZero(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);return this}negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*
this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,A){this.x+=(t.x-this.x)*A;this.y+=(t.y-this.y)*A;this.z+=(t.z-this.z)*A;return this}lerpVectors(t,A,F){this.x=t.x+(A.x-t.x)*F;this.y=t.y+(A.y-t.y)*F;this.z=t.z+(A.z-t.z)*F;return this}cross(t){return this.crossVectors(this,t)}crossVectors(t,A){const F=t.x,Q=t.y;t=t.z;const X=A.x,bb=A.y;A=A.z;this.x=
Q*A-t*bb;this.y=t*X-F*A;this.z=F*bb-Q*X;return this}projectOnVector(t){var A=t.lengthSq();if(0===A)return this.set(0,0,0);A=t.dot(this)/A;return this.copy(t).multiplyScalar(A)}projectOnPlane(t){ne.copy(this).projectOnVector(t);return this.sub(ne)}reflect(t){return this.sub(ne.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const A=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===A)return Math.PI/2;t=this.dot(t)/A;return Math.acos(qb(t,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const A=
this.x-t.x,F=this.y-t.y;t=this.z-t.z;return A*A+F*F+t*t}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,A,F){const Q=Math.sin(A)*t;this.x=Q*Math.sin(F);this.y=Math.cos(A)*t;this.z=Q*Math.cos(F);return this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,A,F){this.x=t*Math.sin(A);this.y=F;this.z=
t*Math.cos(A);return this}setFromMatrixPosition(t){t=t.elements;this.x=t[12];this.y=t[13];this.z=t[14];return this}setFromMatrixScale(t){const A=this.setFromMatrixColumn(t,0).length(),F=this.setFromMatrixColumn(t,1).length();t=this.setFromMatrixColumn(t,2).length();this.x=A;this.y=F;this.z=t;return this}setFromMatrixColumn(t,A){return this.fromArray(t.elements,4*A)}setFromMatrix3Column(t,A){return this.fromArray(t.elements,3*A)}setFromEuler(t){this.x=t._x;this.y=t._y;this.z=t._z;return this}equals(t){return t.x===
this.x&&t.y===this.y&&t.z===this.z}fromArray(t,A=0){this.x=t[A];this.y=t[A+1];this.z=t[A+2];return this}toArray(t=[],A=0){t[A]=this.x;t[A+1]=this.y;t[A+2]=this.z;return t}fromBufferAttribute(t,A){this.x=t.getX(A);this.y=t.getY(A);this.z=t.getZ(A);return this}random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();return this}randomDirection(){const t=2*(Math.random()-.5),A=Math.random()*Math.PI*2,F=Math.sqrt(1-t**2);this.x=F*Math.cos(A);this.y=F*Math.sin(A);this.z=t;return this}*[Symbol.iterator](){yield this.x;
yield this.y;yield this.z}}const ne=new Tb,Ye=new Oc;class Kf{constructor(t=new Tb(Infinity,Infinity,Infinity),A=new Tb(-Infinity,-Infinity,-Infinity)){this.isBox3=!0;this.min=t;this.max=A}set(t,A){this.min.copy(t);this.max.copy(A);return this}setFromArray(t){let A=Infinity,F=Infinity,Q=Infinity,X=-Infinity,bb=-Infinity,Wa=-Infinity;for(let Ab=0,fc=t.length;Ab<fc;Ab+=3){const Lc=t[Ab],wd=t[Ab+1],le=t[Ab+2];Lc<A&&(A=Lc);wd<F&&(F=wd);le<Q&&(Q=le);Lc>X&&(X=Lc);wd>bb&&(bb=wd);le>Wa&&(Wa=le)}this.min.set(A,
F,Q);this.max.set(X,bb,Wa);return this}setFromBufferAttribute(t){let A=Infinity,F=Infinity,Q=Infinity,X=-Infinity,bb=-Infinity,Wa=-Infinity;for(let Ab=0,fc=t.count;Ab<fc;Ab++){const Lc=t.getX(Ab),wd=t.getY(Ab),le=t.getZ(Ab);Lc<A&&(A=Lc);wd<F&&(F=wd);le<Q&&(Q=le);Lc>X&&(X=Lc);wd>bb&&(bb=wd);le>Wa&&(Wa=le)}this.min.set(A,F,Q);this.max.set(X,bb,Wa);return this}setFromPoints(t){this.makeEmpty();for(let A=0,F=t.length;A<F;A++)this.expandByPoint(t[A]);return this}setFromCenterAndSize(t,A){A=Og.copy(A).multiplyScalar(.5);
this.min.copy(t).sub(A);this.max.copy(t).add(A);return this}setFromObject(t,A=!1){this.makeEmpty();return this.expandByObject(t,A)}clone(){return(new this.constructor).copy(this)}copy(t){this.min.copy(t.min);this.max.copy(t.max);return this}makeEmpty(){this.min.x=this.min.y=this.min.z=Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,
this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){this.min.min(t);this.max.max(t);return this}expandByVector(t){this.min.sub(t);this.max.add(t);return this}expandByScalar(t){this.min.addScalar(-t);this.max.addScalar(t);return this}expandByObject(t,A=!1){t.updateWorldMatrix(!1,!1);var F=t.geometry;if(void 0!==F)if(A&&void 0!=F.attributes&&void 0!==F.attributes.position){F=F.attributes.position;for(let Q=0,X=F.count;Q<X;Q++)Og.fromBufferAttribute(F,
Q).applyMatrix4(t.matrixWorld),this.expandByPoint(Og)}else null===F.boundingBox&&F.computeBoundingBox(),te.copy(F.boundingBox),te.applyMatrix4(t.matrixWorld),this.union(te);t=t.children;for(let Q=0,X=t.length;Q<X;Q++)this.expandByObject(t[Q],A);return this}containsPoint(t){return t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z?!1:!0}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&
t.max.z<=this.max.z}getParameter(t,A){return A.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z?!1:!0}intersectsSphere(t){this.clampPoint(t.center,Og);return Og.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let A,F;0<t.normal.x?(A=t.normal.x*this.min.x,F=t.normal.x*
this.max.x):(A=t.normal.x*this.max.x,F=t.normal.x*this.min.x);0<t.normal.y?(A+=t.normal.y*this.min.y,F+=t.normal.y*this.max.y):(A+=t.normal.y*this.max.y,F+=t.normal.y*this.min.y);0<t.normal.z?(A+=t.normal.z*this.min.z,F+=t.normal.z*this.max.z):(A+=t.normal.z*this.max.z,F+=t.normal.z*this.min.z);return A<=-t.constant&&F>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(Ji);gi.subVectors(this.max,Ji);Eh.subVectors(t.a,Ji);$h.subVectors(t.b,Ji);Gi.subVectors(t.c,Ji);Ng.subVectors($h,
Eh);Ii.subVectors(Gi,$h);fi.subVectors(Eh,Gi);t=[0,-Ng.z,Ng.y,0,-Ii.z,Ii.y,0,-fi.z,fi.y,Ng.z,0,-Ng.x,Ii.z,0,-Ii.x,fi.z,0,-fi.x,-Ng.y,Ng.x,0,-Ii.y,Ii.x,0,-fi.y,fi.x,0];if(!fa(t,Eh,$h,Gi,gi))return!1;t=[1,0,0,0,1,0,0,0,1];if(!fa(t,Eh,$h,Gi,gi))return!1;xj.crossVectors(Ng,Ii);t=[xj.x,xj.y,xj.z];return fa(t,Eh,$h,Gi,gi)}clampPoint(t,A){return A.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return Og.copy(t).clamp(this.min,this.max).sub(t).length()}getBoundingSphere(t){this.getCenter(t.center);t.radius=
.5*this.getSize(Og).length();return t}intersect(t){this.min.max(t.min);this.max.min(t.max);this.isEmpty()&&this.makeEmpty();return this}union(t){this.min.min(t.min);this.max.max(t.max);return this}applyMatrix4(t){if(this.isEmpty())return this;jg[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t);jg[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t);jg[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t);jg[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t);jg[4].set(this.max.x,
this.min.y,this.min.z).applyMatrix4(t);jg[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t);jg[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t);jg[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t);this.setFromPoints(jg);return this}translate(t){this.min.add(t);this.max.add(t);return this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const jg=[new Tb,new Tb,new Tb,new Tb,new Tb,new Tb,new Tb,new Tb],Og=new Tb,te=new Kf,Eh=new Tb,$h=new Tb,Gi=new Tb,Ng=new Tb,
Ii=new Tb,fi=new Tb,Ji=new Tb,gi=new Tb,xj=new Tb,yg=new Tb,Ti=new Kf,ke=new Tb,Mg=new Tb,Hh=new Tb;class Zf{constructor(t=new Tb,A=-1){this.center=t;this.radius=A}set(t,A){this.center.copy(t);this.radius=A;return this}setFromPoints(t,A){const F=this.center;void 0!==A?F.copy(A):Ti.setFromPoints(t).getCenter(F);A=0;for(let Q=0,X=t.length;Q<X;Q++)A=Math.max(A,F.distanceToSquared(t[Q]));this.radius=Math.sqrt(A);return this}copy(t){this.center.copy(t.center);this.radius=t.radius;return this}isEmpty(){return 0>
this.radius}makeEmpty(){this.center.set(0,0,0);this.radius=-1;return this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const A=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=A*A}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,A){const F=this.center.distanceToSquared(t);
A.copy(t);F>this.radius*this.radius&&(A.sub(this.center).normalize(),A.multiplyScalar(this.radius).add(this.center));return A}getBoundingBox(t){if(this.isEmpty())return t.makeEmpty(),t;t.set(this.center,this.center);t.expandByScalar(this.radius);return t}applyMatrix4(t){this.center.applyMatrix4(t);this.radius*=t.getMaxScaleOnAxis();return this}translate(t){this.center.add(t);return this}expandByPoint(t){Hh.subVectors(t,this.center);t=Hh.lengthSq();if(t>this.radius*this.radius){t=Math.sqrt(t);const A=
.5*(t-this.radius);this.center.add(Hh.multiplyScalar(A/t));this.radius+=A}return this}union(t){!0===this.center.equals(t.center)?Mg.set(0,0,1).multiplyScalar(t.radius):Mg.subVectors(t.center,this.center).normalize().multiplyScalar(t.radius);this.expandByPoint(ke.copy(t.center).add(Mg));this.expandByPoint(ke.copy(t.center).sub(Mg));return this}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const z=new Tb,C=new Tb,K=new Tb,T=new Tb,
O=new Tb,qa=new Tb,Ba=new Tb;class ib{constructor(t=new Tb,A=new Tb(0,0,-1)){this.origin=t;this.direction=A}set(t,A){this.origin.copy(t);this.direction.copy(A);return this}copy(t){this.origin.copy(t.origin);this.direction.copy(t.direction);return this}at(t,A){return A.copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(t){this.direction.copy(t).sub(this.origin).normalize();return this}recast(t){this.origin.copy(this.at(t,z));return this}closestPointToPoint(t,A){A.subVectors(t,this.origin);
t=A.dot(this.direction);return 0>t?A.copy(this.origin):A.copy(this.direction).multiplyScalar(t).add(this.origin)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const A=z.subVectors(t,this.origin).dot(this.direction);if(0>A)return this.origin.distanceToSquared(t);z.copy(this.direction).multiplyScalar(A).add(this.origin);return z.distanceToSquared(t)}distanceSqToSegment(t,A,F,Q){C.copy(t).add(A).multiplyScalar(.5);K.copy(A).sub(t).normalize();T.copy(this.origin).sub(C);
var X=.5*t.distanceTo(A),bb=-this.direction.dot(K);const Wa=T.dot(this.direction),Ab=-T.dot(K),fc=T.lengthSq(),Lc=Math.abs(1-bb*bb);let wd;0<Lc?(t=bb*Ab-Wa,A=bb*Wa-Ab,wd=X*Lc,0<=t?A>=-wd?A<=wd?(X=1/Lc,t*=X,A*=X,bb=t*(t+bb*A+2*Wa)+A*(bb*t+A+2*Ab)+fc):(A=X,t=Math.max(0,-(bb*A+Wa)),bb=-t*t+A*(A+2*Ab)+fc):(A=-X,t=Math.max(0,-(bb*A+Wa)),bb=-t*t+A*(A+2*Ab)+fc):A<=-wd?(t=Math.max(0,-(-bb*X+Wa)),A=0<t?-X:Math.min(Math.max(-X,-Ab),X),bb=-t*t+A*(A+2*Ab)+fc):A<=wd?(t=0,A=Math.min(Math.max(-X,-Ab),X),bb=A*(A+
2*Ab)+fc):(t=Math.max(0,-(bb*X+Wa)),A=0<t?X:Math.min(Math.max(-X,-Ab),X),bb=-t*t+A*(A+2*Ab)+fc)):(A=0<bb?-X:X,t=Math.max(0,-(bb*A+Wa)),bb=-t*t+A*(A+2*Ab)+fc);F&&F.copy(this.direction).multiplyScalar(t).add(this.origin);Q&&Q.copy(K).multiplyScalar(A).add(C);return bb}intersectSphere(t,A){z.subVectors(t.center,this.origin);var F=z.dot(this.direction),Q=z.dot(z)-F*F;t=t.radius*t.radius;if(Q>t)return null;t=Math.sqrt(t-Q);Q=F-t;F+=t;return 0>Q&&0>F?null:0>Q?this.at(F,A):this.at(Q,A)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=
t.radius*t.radius}distanceToPlane(t){const A=t.normal.dot(this.direction);if(0===A)return 0===t.distanceToPoint(this.origin)?0:null;t=-(this.origin.dot(t.normal)+t.constant)/A;return 0<=t?t:null}intersectPlane(t,A){t=this.distanceToPlane(t);return null===t?null:this.at(t,A)}intersectsPlane(t){const A=t.distanceToPoint(this.origin);return 0===A||0>t.normal.dot(this.direction)*A?!0:!1}intersectBox(t,A){let F;var Q=1/this.direction.x;var X=1/this.direction.y;const bb=1/this.direction.z,Wa=this.origin;
0<=Q?(F=(t.min.x-Wa.x)*Q,Q*=t.max.x-Wa.x):(F=(t.max.x-Wa.x)*Q,Q*=t.min.x-Wa.x);if(0<=X){var Ab=(t.min.y-Wa.y)*X;X*=t.max.y-Wa.y}else Ab=(t.max.y-Wa.y)*X,X*=t.min.y-Wa.y;if(F>X||Ab>Q)return null;if(Ab>F||F!==F)F=Ab;if(X<Q||Q!==Q)Q=X;0<=bb?(Ab=(t.min.z-Wa.z)*bb,t=(t.max.z-Wa.z)*bb):(Ab=(t.max.z-Wa.z)*bb,t=(t.min.z-Wa.z)*bb);if(F>t||Ab>Q)return null;if(Ab>F||F!==F)F=Ab;if(t<Q||Q!==Q)Q=t;return 0>Q?null:this.at(0<=F?F:Q,A)}intersectsBox(t){return null!==this.intersectBox(t,z)}intersectTriangle(t,A,F,
Q,X){O.subVectors(A,t);qa.subVectors(F,t);Ba.crossVectors(O,qa);A=this.direction.dot(Ba);if(0<A){if(Q)return null;Q=1}else if(0>A)Q=-1,A=-A;else return null;T.subVectors(this.origin,t);t=Q*this.direction.dot(qa.crossVectors(T,qa));if(0>t)return null;F=Q*this.direction.dot(O.cross(T));if(0>F||t+F>A)return null;t=-Q*T.dot(Ba);return 0>t?null:this.at(t/A,X)}applyMatrix4(t){this.origin.applyMatrix4(t);this.direction.transformDirection(t);return this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}
class Ub{constructor(){Ub.prototype.isMatrix4=!0;this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}set(t,A,F,Q,X,bb,Wa,Ab,fc,Lc,wd,le,je,pe,qe,nc){const Ke=this.elements;Ke[0]=t;Ke[4]=A;Ke[8]=F;Ke[12]=Q;Ke[1]=X;Ke[5]=bb;Ke[9]=Wa;Ke[13]=Ab;Ke[2]=fc;Ke[6]=Lc;Ke[10]=wd;Ke[14]=le;Ke[3]=je;Ke[7]=pe;Ke[11]=qe;Ke[15]=nc;return this}identity(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this}clone(){return(new Ub).fromArray(this.elements)}copy(t){const A=this.elements;t=t.elements;A[0]=t[0];A[1]=t[1];
A[2]=t[2];A[3]=t[3];A[4]=t[4];A[5]=t[5];A[6]=t[6];A[7]=t[7];A[8]=t[8];A[9]=t[9];A[10]=t[10];A[11]=t[11];A[12]=t[12];A[13]=t[13];A[14]=t[14];A[15]=t[15];return this}copyPosition(t){const A=this.elements;t=t.elements;A[12]=t[12];A[13]=t[13];A[14]=t[14];return this}setFromMatrix3(t){t=t.elements;this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1);return this}extractBasis(t,A,F){t.setFromMatrixColumn(this,0);A.setFromMatrixColumn(this,1);F.setFromMatrixColumn(this,2);return this}makeBasis(t,
A,F){this.set(t.x,A.x,F.x,0,t.y,A.y,F.y,0,t.z,A.z,F.z,0,0,0,0,1);return this}extractRotation(t){const A=this.elements,F=t.elements,Q=1/pc.setFromMatrixColumn(t,0).length(),X=1/pc.setFromMatrixColumn(t,1).length();t=1/pc.setFromMatrixColumn(t,2).length();A[0]=F[0]*Q;A[1]=F[1]*Q;A[2]=F[2]*Q;A[3]=0;A[4]=F[4]*X;A[5]=F[5]*X;A[6]=F[6]*X;A[7]=0;A[8]=F[8]*t;A[9]=F[9]*t;A[10]=F[10]*t;A[11]=0;A[12]=0;A[13]=0;A[14]=0;A[15]=1;return this}makeRotationFromEuler(t){const A=this.elements;var F=t.x,Q=t.y,X=t.z;const bb=
Math.cos(F);F=Math.sin(F);const Wa=Math.cos(Q);Q=Math.sin(Q);const Ab=Math.cos(X);X=Math.sin(X);if("XYZ"===t.order){t=bb*Ab;var fc=bb*X,Lc=F*Ab,wd=F*X;A[0]=Wa*Ab;A[4]=-Wa*X;A[8]=Q;A[1]=fc+Lc*Q;A[5]=t-wd*Q;A[9]=-F*Wa;A[2]=wd-t*Q;A[6]=Lc+fc*Q;A[10]=bb*Wa}else"YXZ"===t.order?(t=Wa*Ab,fc=Wa*X,Lc=Q*Ab,wd=Q*X,A[0]=t+wd*F,A[4]=Lc*F-fc,A[8]=bb*Q,A[1]=bb*X,A[5]=bb*Ab,A[9]=-F,A[2]=fc*F-Lc,A[6]=wd+t*F,A[10]=bb*Wa):"ZXY"===t.order?(t=Wa*Ab,fc=Wa*X,Lc=Q*Ab,wd=Q*X,A[0]=t-wd*F,A[4]=-bb*X,A[8]=Lc+fc*F,A[1]=fc+Lc*
F,A[5]=bb*Ab,A[9]=wd-t*F,A[2]=-bb*Q,A[6]=F,A[10]=bb*Wa):"ZYX"===t.order?(t=bb*Ab,fc=bb*X,Lc=F*Ab,wd=F*X,A[0]=Wa*Ab,A[4]=Lc*Q-fc,A[8]=t*Q+wd,A[1]=Wa*X,A[5]=wd*Q+t,A[9]=fc*Q-Lc,A[2]=-Q,A[6]=F*Wa,A[10]=bb*Wa):"YZX"===t.order?(t=bb*Wa,fc=bb*Q,Lc=F*Wa,wd=F*Q,A[0]=Wa*Ab,A[4]=wd-t*X,A[8]=Lc*X+fc,A[1]=X,A[5]=bb*Ab,A[9]=-F*Ab,A[2]=-Q*Ab,A[6]=fc*X+Lc,A[10]=t-wd*X):"XZY"===t.order&&(t=bb*Wa,fc=bb*Q,Lc=F*Wa,wd=F*Q,A[0]=Wa*Ab,A[4]=-X,A[8]=Q*Ab,A[1]=t*X+wd,A[5]=bb*Ab,A[9]=fc*X-Lc,A[2]=Lc*X-fc,A[6]=F*Ab,A[10]=wd*
X+t);A[3]=0;A[7]=0;A[11]=0;A[12]=0;A[13]=0;A[14]=0;A[15]=1;return this}makeRotationFromQuaternion(t){return this.compose(kd,t,Ad)}lookAt(t,A,F){const Q=this.elements;Ud.subVectors(t,A);0===Ud.lengthSq()&&(Ud.z=1);Ud.normalize();Rd.crossVectors(F,Ud);0===Rd.lengthSq()&&(1===Math.abs(F.z)?Ud.x+=1E-4:Ud.z+=1E-4,Ud.normalize(),Rd.crossVectors(F,Ud));Rd.normalize();cf.crossVectors(Ud,Rd);Q[0]=Rd.x;Q[4]=cf.x;Q[8]=Ud.x;Q[1]=Rd.y;Q[5]=cf.y;Q[9]=Ud.y;Q[2]=Rd.z;Q[6]=cf.z;Q[10]=Ud.z;return this}multiply(t){return this.multiplyMatrices(this,
t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,A){var F=t.elements,Q=A.elements;A=this.elements;t=F[0];const X=F[4],bb=F[8],Wa=F[12],Ab=F[1],fc=F[5],Lc=F[9],wd=F[13],le=F[2],je=F[6],pe=F[10],qe=F[14],nc=F[3],Ke=F[7],$f=F[11];F=F[15];const Te=Q[0],ug=Q[4],Jf=Q[8],Hf=Q[12],Ig=Q[1],Tg=Q[5],Lf=Q[9],yf=Q[13],Qe=Q[2],zg=Q[6],Dh=Q[10],Jg=Q[14],zh=Q[3],jh=Q[7],Pg=Q[11];Q=Q[15];A[0]=t*Te+X*Ig+bb*Qe+Wa*zh;A[4]=t*ug+X*Tg+bb*zg+Wa*jh;A[8]=t*Jf+X*Lf+bb*Dh+Wa*Pg;A[12]=t*Hf+X*yf+bb*Jg+
Wa*Q;A[1]=Ab*Te+fc*Ig+Lc*Qe+wd*zh;A[5]=Ab*ug+fc*Tg+Lc*zg+wd*jh;A[9]=Ab*Jf+fc*Lf+Lc*Dh+wd*Pg;A[13]=Ab*Hf+fc*yf+Lc*Jg+wd*Q;A[2]=le*Te+je*Ig+pe*Qe+qe*zh;A[6]=le*ug+je*Tg+pe*zg+qe*jh;A[10]=le*Jf+je*Lf+pe*Dh+qe*Pg;A[14]=le*Hf+je*yf+pe*Jg+qe*Q;A[3]=nc*Te+Ke*Ig+$f*Qe+F*zh;A[7]=nc*ug+Ke*Tg+$f*zg+F*jh;A[11]=nc*Jf+Ke*Lf+$f*Dh+F*Pg;A[15]=nc*Hf+Ke*yf+$f*Jg+F*Q;return this}multiplyScalar(t){const A=this.elements;A[0]*=t;A[4]*=t;A[8]*=t;A[12]*=t;A[1]*=t;A[5]*=t;A[9]*=t;A[13]*=t;A[2]*=t;A[6]*=t;A[10]*=t;A[14]*=
t;A[3]*=t;A[7]*=t;A[11]*=t;A[15]*=t;return this}determinant(){const t=this.elements,A=t[0],F=t[4],Q=t[8],X=t[12],bb=t[1],Wa=t[5],Ab=t[9],fc=t[13],Lc=t[2],wd=t[6],le=t[10],je=t[14];return t[3]*(+X*Ab*wd-Q*fc*wd-X*Wa*le+F*fc*le+Q*Wa*je-F*Ab*je)+t[7]*(+A*Ab*je-A*fc*le+X*bb*le-Q*bb*je+Q*fc*Lc-X*Ab*Lc)+t[11]*(+A*fc*wd-A*Wa*je-X*bb*wd+F*bb*je+X*Wa*Lc-F*fc*Lc)+t[15]*(-Q*Wa*Lc-A*Ab*wd+A*Wa*le+Q*bb*wd-F*bb*le+F*Ab*Lc)}transpose(){const t=this.elements;let A;A=t[1];t[1]=t[4];t[4]=A;A=t[2];t[2]=t[8];t[8]=A;
A=t[6];t[6]=t[9];t[9]=A;A=t[3];t[3]=t[12];t[12]=A;A=t[7];t[7]=t[13];t[13]=A;A=t[11];t[11]=t[14];t[14]=A;return this}setPosition(t,A,F){const Q=this.elements;t.isVector3?(Q[12]=t.x,Q[13]=t.y,Q[14]=t.z):(Q[12]=t,Q[13]=A,Q[14]=F);return this}invert(){const t=this.elements,A=t[0],F=t[1],Q=t[2],X=t[3],bb=t[4],Wa=t[5],Ab=t[6],fc=t[7],Lc=t[8],wd=t[9],le=t[10],je=t[11],pe=t[12],qe=t[13],nc=t[14],Ke=t[15],$f=wd*nc*fc-qe*le*fc+qe*Ab*je-Wa*nc*je-wd*Ab*Ke+Wa*le*Ke,Te=pe*le*fc-Lc*nc*fc-pe*Ab*je+bb*nc*je+Lc*Ab*
Ke-bb*le*Ke,ug=Lc*qe*fc-pe*wd*fc+pe*Wa*je-bb*qe*je-Lc*Wa*Ke+bb*wd*Ke,Jf=pe*wd*Ab-Lc*qe*Ab-pe*Wa*le+bb*qe*le+Lc*Wa*nc-bb*wd*nc;var Hf=A*$f+F*Te+Q*ug+X*Jf;if(0===Hf)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);Hf=1/Hf;t[0]=$f*Hf;t[1]=(qe*le*X-wd*nc*X-qe*Q*je+F*nc*je+wd*Q*Ke-F*le*Ke)*Hf;t[2]=(Wa*nc*X-qe*Ab*X+qe*Q*fc-F*nc*fc-Wa*Q*Ke+F*Ab*Ke)*Hf;t[3]=(wd*Ab*X-Wa*le*X-wd*Q*fc+F*le*fc+Wa*Q*je-F*Ab*je)*Hf;t[4]=Te*Hf;t[5]=(Lc*nc*X-pe*le*X+pe*Q*je-A*nc*je-Lc*Q*Ke+A*le*Ke)*Hf;t[6]=(pe*Ab*X-bb*nc*X-pe*Q*
fc+A*nc*fc+bb*Q*Ke-A*Ab*Ke)*Hf;t[7]=(bb*le*X-Lc*Ab*X+Lc*Q*fc-A*le*fc-bb*Q*je+A*Ab*je)*Hf;t[8]=ug*Hf;t[9]=(pe*wd*X-Lc*qe*X-pe*F*je+A*qe*je+Lc*F*Ke-A*wd*Ke)*Hf;t[10]=(bb*qe*X-pe*Wa*X+pe*F*fc-A*qe*fc-bb*F*Ke+A*Wa*Ke)*Hf;t[11]=(Lc*Wa*X-bb*wd*X-Lc*F*fc+A*wd*fc+bb*F*je-A*Wa*je)*Hf;t[12]=Jf*Hf;t[13]=(Lc*qe*Q-pe*wd*Q+pe*F*le-A*qe*le-Lc*F*nc+A*wd*nc)*Hf;t[14]=(pe*Wa*Q-bb*qe*Q-pe*F*Ab+A*qe*Ab+bb*F*nc-A*Wa*nc)*Hf;t[15]=(bb*wd*Q-Lc*Wa*Q+Lc*F*Ab-A*wd*Ab-bb*F*le+A*Wa*le)*Hf;return this}scale(t){const A=this.elements,
F=t.x,Q=t.y;t=t.z;A[0]*=F;A[4]*=Q;A[8]*=t;A[1]*=F;A[5]*=Q;A[9]*=t;A[2]*=F;A[6]*=Q;A[10]*=t;A[3]*=F;A[7]*=Q;A[11]*=t;return this}getMaxScaleOnAxis(){const t=this.elements;return Math.sqrt(Math.max(t[0]*t[0]+t[1]*t[1]+t[2]*t[2],t[4]*t[4]+t[5]*t[5]+t[6]*t[6],t[8]*t[8]+t[9]*t[9]+t[10]*t[10]))}makeTranslation(t,A,F){this.set(1,0,0,t,0,1,0,A,0,0,1,F,0,0,0,1);return this}makeRotationX(t){const A=Math.cos(t);t=Math.sin(t);this.set(1,0,0,0,0,A,-t,0,0,t,A,0,0,0,0,1);return this}makeRotationY(t){const A=Math.cos(t);
t=Math.sin(t);this.set(A,0,t,0,0,1,0,0,-t,0,A,0,0,0,0,1);return this}makeRotationZ(t){const A=Math.cos(t);t=Math.sin(t);this.set(A,-t,0,0,t,A,0,0,0,0,1,0,0,0,0,1);return this}makeRotationAxis(t,A){const F=Math.cos(A);A=Math.sin(A);const Q=1-F,X=t.x,bb=t.y;t=t.z;const Wa=Q*X,Ab=Q*bb;this.set(Wa*X+F,Wa*bb-A*t,Wa*t+A*bb,0,Wa*bb+A*t,Ab*bb+F,Ab*t-A*X,0,Wa*t-A*bb,Ab*t+A*X,Q*t*t+F,0,0,0,0,1);return this}makeScale(t,A,F){this.set(t,0,0,0,0,A,0,0,0,0,F,0,0,0,0,1);return this}makeShear(t,A,F,Q,X,bb){this.set(1,
F,X,0,t,1,bb,0,A,Q,1,0,0,0,0,1);return this}compose(t,A,F){const Q=this.elements;var X=A._x,bb=A._y,Wa=A._z,Ab=A._w,fc=X+X,Lc=bb+bb,wd=Wa+Wa;A=X*fc;const le=X*Lc;X*=wd;const je=bb*Lc;bb*=wd;Wa*=wd;fc*=Ab;Lc*=Ab;Ab*=wd;wd=F.x;const pe=F.y;F=F.z;Q[0]=(1-(je+Wa))*wd;Q[1]=(le+Ab)*wd;Q[2]=(X-Lc)*wd;Q[3]=0;Q[4]=(le-Ab)*pe;Q[5]=(1-(A+Wa))*pe;Q[6]=(bb+fc)*pe;Q[7]=0;Q[8]=(X+Lc)*F;Q[9]=(bb-fc)*F;Q[10]=(1-(A+je))*F;Q[11]=0;Q[12]=t.x;Q[13]=t.y;Q[14]=t.z;Q[15]=1;return this}decompose(t,A,F){var Q=this.elements;
let X=pc.set(Q[0],Q[1],Q[2]).length();const bb=pc.set(Q[4],Q[5],Q[6]).length(),Wa=pc.set(Q[8],Q[9],Q[10]).length();0>this.determinant()&&(X=-X);t.x=Q[12];t.y=Q[13];t.z=Q[14];Dc.copy(this);t=1/X;Q=1/bb;const Ab=1/Wa;Dc.elements[0]*=t;Dc.elements[1]*=t;Dc.elements[2]*=t;Dc.elements[4]*=Q;Dc.elements[5]*=Q;Dc.elements[6]*=Q;Dc.elements[8]*=Ab;Dc.elements[9]*=Ab;Dc.elements[10]*=Ab;A.setFromRotationMatrix(Dc);F.x=X;F.y=bb;F.z=Wa;return this}makePerspective(t,A,F,Q,X,bb){const Wa=this.elements;Wa[0]=2*
X/(A-t);Wa[4]=0;Wa[8]=(A+t)/(A-t);Wa[12]=0;Wa[1]=0;Wa[5]=2*X/(F-Q);Wa[9]=(F+Q)/(F-Q);Wa[13]=0;Wa[2]=0;Wa[6]=0;Wa[10]=-(bb+X)/(bb-X);Wa[14]=-2*bb*X/(bb-X);Wa[3]=0;Wa[7]=0;Wa[11]=-1;Wa[15]=0;return this}makeOrthographic(t,A,F,Q,X,bb){const Wa=this.elements,Ab=1/(A-t),fc=1/(F-Q),Lc=1/(bb-X);Wa[0]=2*Ab;Wa[4]=0;Wa[8]=0;Wa[12]=-((A+t)*Ab);Wa[1]=0;Wa[5]=2*fc;Wa[9]=0;Wa[13]=-((F+Q)*fc);Wa[2]=0;Wa[6]=0;Wa[10]=-2*Lc;Wa[14]=-((bb+X)*Lc);Wa[3]=0;Wa[7]=0;Wa[11]=0;Wa[15]=1;return this}equals(t){const A=this.elements;
t=t.elements;for(let F=0;16>F;F++)if(A[F]!==t[F])return!1;return!0}fromArray(t,A=0){for(let F=0;16>F;F++)this.elements[F]=t[F+A];return this}toArray(t=[],A=0){const F=this.elements;t[A]=F[0];t[A+1]=F[1];t[A+2]=F[2];t[A+3]=F[3];t[A+4]=F[4];t[A+5]=F[5];t[A+6]=F[6];t[A+7]=F[7];t[A+8]=F[8];t[A+9]=F[9];t[A+10]=F[10];t[A+11]=F[11];t[A+12]=F[12];t[A+13]=F[13];t[A+14]=F[14];t[A+15]=F[15];return t}}const pc=new Tb,Dc=new Ub,kd=new Tb(0,0,0),Ad=new Tb(1,1,1),Rd=new Tb,cf=new Tb,Ud=new Tb,Ge=new Ub,Se=new Oc;
class mh{constructor(t=0,A=0,F=0,Q=mh.DefaultOrder){this.isEuler=!0;this._x=t;this._y=A;this._z=F;this._order=Q}get x(){return this._x}set x(t){this._x=t;this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t;this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t;this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t;this._onChangeCallback()}set(t,A,F,Q=this._order){this._x=t;this._y=A;this._z=F;this._order=Q;this._onChangeCallback();return this}clone(){return new this.constructor(this._x,
this._y,this._z,this._order)}copy(t){this._x=t._x;this._y=t._y;this._z=t._z;this._order=t._order;this._onChangeCallback();return this}setFromRotationMatrix(t,A=this._order,F=!0){var Q=t.elements;t=Q[0];const X=Q[4],bb=Q[8],Wa=Q[1],Ab=Q[5],fc=Q[9],Lc=Q[2],wd=Q[6];Q=Q[10];switch(A){case "XYZ":this._y=Math.asin(qb(bb,-1,1));.9999999>Math.abs(bb)?(this._x=Math.atan2(-fc,Q),this._z=Math.atan2(-X,t)):(this._x=Math.atan2(wd,Ab),this._z=0);break;case "YXZ":this._x=Math.asin(-qb(fc,-1,1));.9999999>Math.abs(fc)?
(this._y=Math.atan2(bb,Q),this._z=Math.atan2(Wa,Ab)):(this._y=Math.atan2(-Lc,t),this._z=0);break;case "ZXY":this._x=Math.asin(qb(wd,-1,1));.9999999>Math.abs(wd)?(this._y=Math.atan2(-Lc,Q),this._z=Math.atan2(-X,Ab)):(this._y=0,this._z=Math.atan2(Wa,t));break;case "ZYX":this._y=Math.asin(-qb(Lc,-1,1));.9999999>Math.abs(Lc)?(this._x=Math.atan2(wd,Q),this._z=Math.atan2(Wa,t)):(this._x=0,this._z=Math.atan2(-X,Ab));break;case "YZX":this._z=Math.asin(qb(Wa,-1,1));.9999999>Math.abs(Wa)?(this._x=Math.atan2(-fc,
Ab),this._y=Math.atan2(-Lc,t)):(this._x=0,this._y=Math.atan2(bb,Q));break;case "XZY":this._z=Math.asin(-qb(X,-1,1));.9999999>Math.abs(X)?(this._x=Math.atan2(wd,Ab),this._y=Math.atan2(bb,t)):(this._x=Math.atan2(-fc,Q),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+A)}this._order=A;!0===F&&this._onChangeCallback();return this}setFromQuaternion(t,A,F){Ge.makeRotationFromQuaternion(t);return this.setFromRotationMatrix(Ge,A,F)}setFromVector3(t,
A=this._order){return this.set(t.x,t.y,t.z,A)}reorder(t){Se.setFromEuler(this);return this.setFromQuaternion(Se,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){this._x=t[0];this._y=t[1];this._z=t[2];void 0!==t[3]&&(this._order=t[3]);this._onChangeCallback();return this}toArray(t=[],A=0){t[A]=this._x;t[A+1]=this._y;t[A+2]=this._z;t[A+3]=this._order;return t}_onChange(t){this._onChangeCallback=t;return this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x;
yield this._y;yield this._z;yield this._order}toVector3(){console.error("THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead")}}mh.DefaultOrder="XYZ";mh.RotationOrders="XYZ YZX ZXY XZY YXZ ZYX".split(" ");class Rh{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask=this.mask|1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return 0!==(this.mask&t.mask)}isEnabled(t){return 0!==
(this.mask&(1<<t|0))}}let dh=0;const eh=new Tb,Rg=new Oc,$c=new Ub,vf=new Tb,ye=new Tb,Yc=new Tb,Tc=new Oc,td=new Tb(1,0,0),hd=new Tb(0,1,0),aa=new Tb(0,0,1),Sa={type:"added"},Ma={type:"removed"};class jb extends hf{constructor(){super();this.isObject3D=!0;Object.defineProperty(this,"id",{value:dh++});this.uuid=Od();this.name="";this.type="Object3D";this.parent=null;this.children=[];this.up=jb.DefaultUp.clone();const t=new Tb,A=new mh,F=new Oc,Q=new Tb(1,1,1);A._onChange(function(){F.setFromEuler(A,
!1)});F._onChange(function(){A.setFromQuaternion(F,void 0,!1)});Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:A},quaternion:{configurable:!0,enumerable:!0,value:F},scale:{configurable:!0,enumerable:!0,value:Q},modelViewMatrix:{value:new Ub},normalMatrix:{value:new pd}});this.matrix=new Ub;this.matrixWorld=new Ub;this.matrixAutoUpdate=jb.DefaultMatrixAutoUpdate;this.matrixWorldNeedsUpdate=!1;this.layers=new Rh;this.visible=
!0;this.receiveShadow=this.castShadow=!1;this.frustumCulled=!0;this.renderOrder=0;this.animations=[];this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix();this.matrix.premultiply(t);this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){this.quaternion.premultiply(t);return this}setRotationFromAxisAngle(t,A){this.quaternion.setFromAxisAngle(t,A)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,
A){Rg.setFromAxisAngle(t,A);this.quaternion.multiply(Rg);return this}rotateOnWorldAxis(t,A){Rg.setFromAxisAngle(t,A);this.quaternion.premultiply(Rg);return this}rotateX(t){return this.rotateOnAxis(td,t)}rotateY(t){return this.rotateOnAxis(hd,t)}rotateZ(t){return this.rotateOnAxis(aa,t)}translateOnAxis(t,A){eh.copy(t).applyQuaternion(this.quaternion);this.position.add(eh.multiplyScalar(A));return this}translateX(t){return this.translateOnAxis(td,t)}translateY(t){return this.translateOnAxis(hd,t)}translateZ(t){return this.translateOnAxis(aa,
t)}localToWorld(t){return t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return t.applyMatrix4($c.copy(this.matrixWorld).invert())}lookAt(t,A,F){t.isVector3?vf.copy(t):vf.set(t,A,F);t=this.parent;this.updateWorldMatrix(!0,!1);ye.setFromMatrixPosition(this.matrixWorld);this.isCamera||this.isLight?$c.lookAt(ye,vf,this.up):$c.lookAt(vf,ye,this.up);this.quaternion.setFromRotationMatrix($c);t&&($c.extractRotation(t.matrixWorld),Rg.setFromRotationMatrix($c),this.quaternion.premultiply(Rg.invert()))}add(t){if(1<
arguments.length){for(let A=0;A<arguments.length;A++)this.add(arguments[A]);return this}if(t===this)return console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this;t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(Sa)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t);return this}remove(t){if(1<arguments.length){for(var A=0;A<arguments.length;A++)this.remove(arguments[A]);return this}A=
this.children.indexOf(t);-1!==A&&(t.parent=null,this.children.splice(A,1),t.dispatchEvent(Ma));return this}removeFromParent(){const t=this.parent;null!==t&&t.remove(this);return this}clear(){for(let t=0;t<this.children.length;t++){const A=this.children[t];A.parent=null;A.dispatchEvent(Ma)}this.children.length=0;return this}attach(t){this.updateWorldMatrix(!0,!1);$c.copy(this.matrixWorld).invert();null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),$c.multiply(t.parent.matrixWorld));t.applyMatrix4($c);
this.add(t);t.updateWorldMatrix(!1,!0);return this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,A){if(this[t]===A)return this;for(let F=0,Q=this.children.length;F<Q;F++){const X=this.children[F].getObjectByProperty(t,A);if(void 0!==X)return X}}getWorldPosition(t){this.updateWorldMatrix(!0,!1);return t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){this.updateWorldMatrix(!0,!1);this.matrixWorld.decompose(ye,
t,Yc);return t}getWorldScale(t){this.updateWorldMatrix(!0,!1);this.matrixWorld.decompose(ye,Tc,t);return t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const A=this.matrixWorld.elements;return t.set(A[8],A[9],A[10]).normalize()}raycast(){}traverse(t){t(this);const A=this.children;for(let F=0,Q=A.length;F<Q;F++)A[F].traverse(t)}traverseVisible(t){if(!1!==this.visible){t(this);var A=this.children;for(let F=0,Q=A.length;F<Q;F++)A[F].traverseVisible(t)}}traverseAncestors(t){const A=this.parent;
null!==A&&(t(A),A.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||t)null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0;const A=this.children;for(let F=0,Q=A.length;F<Q;F++)A[F].updateMatrixWorld(t)}updateWorldMatrix(t,
A){const F=this.parent;!0===t&&null!==F&&F.updateWorldMatrix(!0,!1);this.matrixAutoUpdate&&this.updateMatrix();null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix);if(!0===A){t=this.children;for(let Q=0,X=t.length;Q<X;Q++)t[Q].updateWorldMatrix(!1,!0)}}toJSON(t){function A(Ab,fc){void 0===Ab[fc.uuid]&&(Ab[fc.uuid]=fc.toJSON(t));return fc.uuid}function F(Ab){const fc=[];for(const Lc in Ab){const wd=Ab[Lc];delete wd.metadata;fc.push(wd)}return fc}
var Q=void 0===t||"string"===typeof t;const X={};Q&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},X.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const bb={};bb.uuid=this.uuid;bb.type=this.type;""!==this.name&&(bb.name=this.name);!0===this.castShadow&&(bb.castShadow=!0);!0===this.receiveShadow&&(bb.receiveShadow=!0);!1===this.visible&&(bb.visible=!1);!1===this.frustumCulled&&(bb.frustumCulled=!1);0!==this.renderOrder&&(bb.renderOrder=
this.renderOrder);"{}"!==JSON.stringify(this.userData)&&(bb.userData=this.userData);bb.layers=this.layers.mask;bb.matrix=this.matrix.toArray();!1===this.matrixAutoUpdate&&(bb.matrixAutoUpdate=!1);this.isInstancedMesh&&(bb.type="InstancedMesh",bb.count=this.count,bb.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(bb.instanceColor=this.instanceColor.toJSON()));if(this.isScene)this.background&&(this.background.isColor?bb.background=this.background.toJSON():this.background.isTexture&&
(bb.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&!0!==this.environment.isRenderTargetTexture&&(bb.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){bb.geometry=A(t.geometries,this.geometry);var Wa=this.geometry.parameters;if(void 0!==Wa&&void 0!==Wa.shapes)if(Wa=Wa.shapes,Array.isArray(Wa))for(let Ab=0,fc=Wa.length;Ab<fc;Ab++)A(t.shapes,Wa[Ab]);else A(t.shapes,Wa)}this.isSkinnedMesh&&(bb.bindMode=this.bindMode,
bb.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(A(t.skeletons,this.skeleton),bb.skeleton=this.skeleton.uuid));if(void 0!==this.material)if(Array.isArray(this.material)){Wa=[];for(let Ab=0,fc=this.material.length;Ab<fc;Ab++)Wa.push(A(t.materials,this.material[Ab]));bb.material=Wa}else bb.material=A(t.materials,this.material);if(0<this.children.length)for(bb.children=[],Wa=0;Wa<this.children.length;Wa++)bb.children.push(this.children[Wa].toJSON(t).object);if(0<this.animations.length)for(bb.animations=
[],Wa=0;Wa<this.animations.length;Wa++)bb.animations.push(A(t.animations,this.animations[Wa]));if(Q){Q=F(t.geometries);Wa=F(t.materials);const Ab=F(t.textures),fc=F(t.images),Lc=F(t.shapes),wd=F(t.skeletons),le=F(t.animations),je=F(t.nodes);0<Q.length&&(X.geometries=Q);0<Wa.length&&(X.materials=Wa);0<Ab.length&&(X.textures=Ab);0<fc.length&&(X.images=fc);0<Lc.length&&(X.shapes=Lc);0<wd.length&&(X.skeletons=wd);0<le.length&&(X.animations=le);0<je.length&&(X.nodes=je)}X.object=bb;return X}clone(t){return(new this.constructor).copy(this,
t)}copy(t,A=!0){this.name=t.name;this.up.copy(t.up);this.position.copy(t.position);this.rotation.order=t.rotation.order;this.quaternion.copy(t.quaternion);this.scale.copy(t.scale);this.matrix.copy(t.matrix);this.matrixWorld.copy(t.matrixWorld);this.matrixAutoUpdate=t.matrixAutoUpdate;this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate;this.layers.mask=t.layers.mask;this.visible=t.visible;this.castShadow=t.castShadow;this.receiveShadow=t.receiveShadow;this.frustumCulled=t.frustumCulled;this.renderOrder=
t.renderOrder;this.userData=JSON.parse(JSON.stringify(t.userData));if(!0===A)for(A=0;A<t.children.length;A++)this.add(t.children[A].clone());return this}}jb.DefaultUp=new Tb(0,1,0);jb.DefaultMatrixAutoUpdate=!0;const Jb=new Tb,gc=new Tb,ac=new Tb,Kc=new Tb,md=new Tb,ud=new Tb,oe=new Tb,ze=new Tb,Ue=new Tb,Me=new Tb;class xf{constructor(t=new Tb,A=new Tb,F=new Tb){this.a=t;this.b=A;this.c=F}static getNormal(t,A,F,Q){Q.subVectors(F,A);Jb.subVectors(t,A);Q.cross(Jb);t=Q.lengthSq();return 0<t?Q.multiplyScalar(1/
Math.sqrt(t)):Q.set(0,0,0)}static getBarycoord(t,A,F,Q,X){Jb.subVectors(Q,A);gc.subVectors(F,A);ac.subVectors(t,A);t=Jb.dot(Jb);A=Jb.dot(gc);F=Jb.dot(ac);var bb=gc.dot(gc);Q=gc.dot(ac);var Wa=t*bb-A*A;if(0===Wa)return X.set(-2,-1,-1);Wa=1/Wa;bb=(bb*F-A*Q)*Wa;t=(t*Q-A*F)*Wa;return X.set(1-bb-t,t,bb)}static containsPoint(t,A,F,Q){this.getBarycoord(t,A,F,Q,Kc);return 0<=Kc.x&&0<=Kc.y&&1>=Kc.x+Kc.y}static getUV(t,A,F,Q,X,bb,Wa,Ab){this.getBarycoord(t,A,F,Q,Kc);Ab.set(0,0);Ab.addScaledVector(X,Kc.x);Ab.addScaledVector(bb,
Kc.y);Ab.addScaledVector(Wa,Kc.z);return Ab}static isFrontFacing(t,A,F,Q){Jb.subVectors(F,A);gc.subVectors(t,A);return 0>Jb.cross(gc).dot(Q)?!0:!1}set(t,A,F){this.a.copy(t);this.b.copy(A);this.c.copy(F);return this}setFromPointsAndIndices(t,A,F,Q){this.a.copy(t[A]);this.b.copy(t[F]);this.c.copy(t[Q]);return this}setFromAttributeAndIndices(t,A,F,Q){this.a.fromBufferAttribute(t,A);this.b.fromBufferAttribute(t,F);this.c.fromBufferAttribute(t,Q);return this}clone(){return(new this.constructor).copy(this)}copy(t){this.a.copy(t.a);
this.b.copy(t.b);this.c.copy(t.c);return this}getArea(){Jb.subVectors(this.c,this.b);gc.subVectors(this.a,this.b);return.5*Jb.cross(gc).length()}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return xf.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,A){return xf.getBarycoord(t,this.a,this.b,this.c,A)}getUV(t,A,F,Q,X){return xf.getUV(t,this.a,this.b,this.c,A,F,Q,X)}containsPoint(t){return xf.containsPoint(t,
this.a,this.b,this.c)}isFrontFacing(t){return xf.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,A){const F=this.a;var Q=this.b,X=this.c;md.subVectors(Q,F);ud.subVectors(X,F);ze.subVectors(t,F);var bb=md.dot(ze),Wa=ud.dot(ze);if(0>=bb&&0>=Wa)return A.copy(F);Ue.subVectors(t,Q);const Ab=md.dot(Ue),fc=ud.dot(Ue);if(0<=Ab&&fc<=Ab)return A.copy(Q);var Lc=bb*fc-Ab*Wa;if(0>=Lc&&0<=bb&&0>=Ab)return Q=bb/(bb-Ab),A.copy(F).addScaledVector(md,Q);
Me.subVectors(t,X);t=md.dot(Me);const wd=ud.dot(Me);if(0<=wd&&t<=wd)return A.copy(X);bb=t*Wa-bb*wd;if(0>=bb&&0<=Wa&&0>=wd)return Lc=Wa/(Wa-wd),A.copy(F).addScaledVector(ud,Lc);Wa=Ab*wd-t*fc;if(0>=Wa&&0<=fc-Ab&&0<=t-wd)return oe.subVectors(X,Q),Lc=(fc-Ab)/(fc-Ab+(t-wd)),A.copy(Q).addScaledVector(oe,Lc);X=1/(Wa+bb+Lc);Q=bb*X;Lc*=X;return A.copy(F).addScaledVector(md,Q).addScaledVector(ud,Lc)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}let lf=0;class Rf extends hf{constructor(){super();
this.isMaterial=!0;Object.defineProperty(this,"id",{value:lf++});this.uuid=Od();this.name="";this.type="Material";this.blending=1;this.side=0;this.vertexColors=!1;this.opacity=1;this.transparent=!1;this.blendSrc=204;this.blendDst=205;this.blendEquation=100;this.blendEquationAlpha=this.blendDstAlpha=this.blendSrcAlpha=null;this.depthFunc=3;this.depthWrite=this.depthTest=!0;this.stencilWriteMask=255;this.stencilFunc=519;this.stencilRef=0;this.stencilFuncMask=255;this.stencilZPass=this.stencilZFail=
this.stencilFail=7680;this.stencilWrite=!1;this.clippingPlanes=null;this.clipShadows=this.clipIntersection=!1;this.shadowSide=null;this.colorWrite=!0;this.precision=null;this.polygonOffset=!1;this.polygonOffsetUnits=this.polygonOffsetFactor=0;this.premultipliedAlpha=this.alphaToCoverage=this.dithering=!1;this.toneMapped=this.visible=!0;this.userData={};this._alphaTest=this.version=0}get alphaTest(){return this._alphaTest}set alphaTest(t){0<this._alphaTest!==0<t&&this.version++;this._alphaTest=t}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(void 0!==
t)for(const A in t){const F=t[A];if(void 0===F){console.warn("THREE.Material: '"+A+"' parameter is undefined.");continue}if("shading"===A){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.");this.flatShading=1===F?!0:!1;continue}const Q=this[A];void 0===Q?console.warn("THREE."+this.type+": '"+A+"' is not a property of this material."):Q&&Q.isColor?Q.set(F):Q&&Q.isVector3&&F&&F.isVector3?Q.copy(F):this[A]=F}}toJSON(t){function A(X){const bb=[];for(const Wa in X){const Ab=
X[Wa];delete Ab.metadata;bb.push(Ab)}return bb}var F=void 0===t||"string"===typeof t;F&&(t={textures:{},images:{}});const Q={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};Q.uuid=this.uuid;Q.type=this.type;""!==this.name&&(Q.name=this.name);this.color&&this.color.isColor&&(Q.color=this.color.getHex());void 0!==this.roughness&&(Q.roughness=this.roughness);void 0!==this.metalness&&(Q.metalness=this.metalness);void 0!==this.sheen&&(Q.sheen=this.sheen);this.sheenColor&&this.sheenColor.isColor&&
(Q.sheenColor=this.sheenColor.getHex());void 0!==this.sheenRoughness&&(Q.sheenRoughness=this.sheenRoughness);this.emissive&&this.emissive.isColor&&(Q.emissive=this.emissive.getHex());this.emissiveIntensity&&1!==this.emissiveIntensity&&(Q.emissiveIntensity=this.emissiveIntensity);this.specular&&this.specular.isColor&&(Q.specular=this.specular.getHex());void 0!==this.specularIntensity&&(Q.specularIntensity=this.specularIntensity);this.specularColor&&this.specularColor.isColor&&(Q.specularColor=this.specularColor.getHex());
void 0!==this.shininess&&(Q.shininess=this.shininess);void 0!==this.clearcoat&&(Q.clearcoat=this.clearcoat);void 0!==this.clearcoatRoughness&&(Q.clearcoatRoughness=this.clearcoatRoughness);this.clearcoatMap&&this.clearcoatMap.isTexture&&(Q.clearcoatMap=this.clearcoatMap.toJSON(t).uuid);this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(Q.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid);this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(Q.clearcoatNormalMap=
this.clearcoatNormalMap.toJSON(t).uuid,Q.clearcoatNormalScale=this.clearcoatNormalScale.toArray());void 0!==this.iridescence&&(Q.iridescence=this.iridescence);void 0!==this.iridescenceIOR&&(Q.iridescenceIOR=this.iridescenceIOR);void 0!==this.iridescenceThicknessRange&&(Q.iridescenceThicknessRange=this.iridescenceThicknessRange);this.iridescenceMap&&this.iridescenceMap.isTexture&&(Q.iridescenceMap=this.iridescenceMap.toJSON(t).uuid);this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&
(Q.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid);this.map&&this.map.isTexture&&(Q.map=this.map.toJSON(t).uuid);this.matcap&&this.matcap.isTexture&&(Q.matcap=this.matcap.toJSON(t).uuid);this.alphaMap&&this.alphaMap.isTexture&&(Q.alphaMap=this.alphaMap.toJSON(t).uuid);this.lightMap&&this.lightMap.isTexture&&(Q.lightMap=this.lightMap.toJSON(t).uuid,Q.lightMapIntensity=this.lightMapIntensity);this.aoMap&&this.aoMap.isTexture&&(Q.aoMap=this.aoMap.toJSON(t).uuid,Q.aoMapIntensity=
this.aoMapIntensity);this.bumpMap&&this.bumpMap.isTexture&&(Q.bumpMap=this.bumpMap.toJSON(t).uuid,Q.bumpScale=this.bumpScale);this.normalMap&&this.normalMap.isTexture&&(Q.normalMap=this.normalMap.toJSON(t).uuid,Q.normalMapType=this.normalMapType,Q.normalScale=this.normalScale.toArray());this.displacementMap&&this.displacementMap.isTexture&&(Q.displacementMap=this.displacementMap.toJSON(t).uuid,Q.displacementScale=this.displacementScale,Q.displacementBias=this.displacementBias);this.roughnessMap&&
this.roughnessMap.isTexture&&(Q.roughnessMap=this.roughnessMap.toJSON(t).uuid);this.metalnessMap&&this.metalnessMap.isTexture&&(Q.metalnessMap=this.metalnessMap.toJSON(t).uuid);this.emissiveMap&&this.emissiveMap.isTexture&&(Q.emissiveMap=this.emissiveMap.toJSON(t).uuid);this.specularMap&&this.specularMap.isTexture&&(Q.specularMap=this.specularMap.toJSON(t).uuid);this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(Q.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid);this.specularColorMap&&
this.specularColorMap.isTexture&&(Q.specularColorMap=this.specularColorMap.toJSON(t).uuid);this.envMap&&this.envMap.isTexture&&(Q.envMap=this.envMap.toJSON(t).uuid,void 0!==this.combine&&(Q.combine=this.combine));void 0!==this.envMapIntensity&&(Q.envMapIntensity=this.envMapIntensity);void 0!==this.reflectivity&&(Q.reflectivity=this.reflectivity);void 0!==this.refractionRatio&&(Q.refractionRatio=this.refractionRatio);this.gradientMap&&this.gradientMap.isTexture&&(Q.gradientMap=this.gradientMap.toJSON(t).uuid);
void 0!==this.transmission&&(Q.transmission=this.transmission);this.transmissionMap&&this.transmissionMap.isTexture&&(Q.transmissionMap=this.transmissionMap.toJSON(t).uuid);void 0!==this.thickness&&(Q.thickness=this.thickness);this.thicknessMap&&this.thicknessMap.isTexture&&(Q.thicknessMap=this.thicknessMap.toJSON(t).uuid);void 0!==this.attenuationDistance&&(Q.attenuationDistance=this.attenuationDistance);void 0!==this.attenuationColor&&(Q.attenuationColor=this.attenuationColor.getHex());void 0!==
this.size&&(Q.size=this.size);null!==this.shadowSide&&(Q.shadowSide=this.shadowSide);void 0!==this.sizeAttenuation&&(Q.sizeAttenuation=this.sizeAttenuation);1!==this.blending&&(Q.blending=this.blending);0!==this.side&&(Q.side=this.side);this.vertexColors&&(Q.vertexColors=!0);1>this.opacity&&(Q.opacity=this.opacity);!0===this.transparent&&(Q.transparent=this.transparent);Q.depthFunc=this.depthFunc;Q.depthTest=this.depthTest;Q.depthWrite=this.depthWrite;Q.colorWrite=this.colorWrite;Q.stencilWrite=this.stencilWrite;
Q.stencilWriteMask=this.stencilWriteMask;Q.stencilFunc=this.stencilFunc;Q.stencilRef=this.stencilRef;Q.stencilFuncMask=this.stencilFuncMask;Q.stencilFail=this.stencilFail;Q.stencilZFail=this.stencilZFail;Q.stencilZPass=this.stencilZPass;void 0!==this.rotation&&0!==this.rotation&&(Q.rotation=this.rotation);!0===this.polygonOffset&&(Q.polygonOffset=!0);0!==this.polygonOffsetFactor&&(Q.polygonOffsetFactor=this.polygonOffsetFactor);0!==this.polygonOffsetUnits&&(Q.polygonOffsetUnits=this.polygonOffsetUnits);
void 0!==this.linewidth&&1!==this.linewidth&&(Q.linewidth=this.linewidth);void 0!==this.dashSize&&(Q.dashSize=this.dashSize);void 0!==this.gapSize&&(Q.gapSize=this.gapSize);void 0!==this.scale&&(Q.scale=this.scale);!0===this.dithering&&(Q.dithering=!0);0<this.alphaTest&&(Q.alphaTest=this.alphaTest);!0===this.alphaToCoverage&&(Q.alphaToCoverage=this.alphaToCoverage);!0===this.premultipliedAlpha&&(Q.premultipliedAlpha=this.premultipliedAlpha);!0===this.wireframe&&(Q.wireframe=this.wireframe);1<this.wireframeLinewidth&&
(Q.wireframeLinewidth=this.wireframeLinewidth);"round"!==this.wireframeLinecap&&(Q.wireframeLinecap=this.wireframeLinecap);"round"!==this.wireframeLinejoin&&(Q.wireframeLinejoin=this.wireframeLinejoin);!0===this.flatShading&&(Q.flatShading=this.flatShading);!1===this.visible&&(Q.visible=!1);!1===this.toneMapped&&(Q.toneMapped=!1);!1===this.fog&&(Q.fog=!1);"{}"!==JSON.stringify(this.userData)&&(Q.userData=this.userData);F&&(F=A(t.textures),t=A(t.images),0<F.length&&(Q.textures=F),0<t.length&&(Q.images=
t));return Q}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name;this.blending=t.blending;this.side=t.side;this.vertexColors=t.vertexColors;this.opacity=t.opacity;this.transparent=t.transparent;this.blendSrc=t.blendSrc;this.blendDst=t.blendDst;this.blendEquation=t.blendEquation;this.blendSrcAlpha=t.blendSrcAlpha;this.blendDstAlpha=t.blendDstAlpha;this.blendEquationAlpha=t.blendEquationAlpha;this.depthFunc=t.depthFunc;this.depthTest=t.depthTest;this.depthWrite=t.depthWrite;this.stencilWriteMask=
t.stencilWriteMask;this.stencilFunc=t.stencilFunc;this.stencilRef=t.stencilRef;this.stencilFuncMask=t.stencilFuncMask;this.stencilFail=t.stencilFail;this.stencilZFail=t.stencilZFail;this.stencilZPass=t.stencilZPass;this.stencilWrite=t.stencilWrite;const A=t.clippingPlanes;let F=null;if(null!==A){const Q=A.length;F=Array(Q);for(let X=0;X!==Q;++X)F[X]=A[X].clone()}this.clippingPlanes=F;this.clipIntersection=t.clipIntersection;this.clipShadows=t.clipShadows;this.shadowSide=t.shadowSide;this.colorWrite=
t.colorWrite;this.precision=t.precision;this.polygonOffset=t.polygonOffset;this.polygonOffsetFactor=t.polygonOffsetFactor;this.polygonOffsetUnits=t.polygonOffsetUnits;this.dithering=t.dithering;this.alphaTest=t.alphaTest;this.alphaToCoverage=t.alphaToCoverage;this.premultipliedAlpha=t.premultipliedAlpha;this.visible=t.visible;this.toneMapped=t.toneMapped;this.userData=JSON.parse(JSON.stringify(t.userData));return this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){!0===t&&this.version++}}
class Hg extends Rf{constructor(t){super();this.isMeshBasicMaterial=!0;this.type="MeshBasicMaterial";this.color=new Cd(16777215);this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.envMap=this.alphaMap=this.specularMap=null;this.combine=0;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.fog=!0;this.setValues(t)}copy(t){super.copy(t);this.color.copy(t.color);
this.map=t.map;this.lightMap=t.lightMap;this.lightMapIntensity=t.lightMapIntensity;this.aoMap=t.aoMap;this.aoMapIntensity=t.aoMapIntensity;this.specularMap=t.specularMap;this.alphaMap=t.alphaMap;this.envMap=t.envMap;this.combine=t.combine;this.reflectivity=t.reflectivity;this.refractionRatio=t.refractionRatio;this.wireframe=t.wireframe;this.wireframeLinewidth=t.wireframeLinewidth;this.wireframeLinecap=t.wireframeLinecap;this.wireframeLinejoin=t.wireframeLinejoin;this.fog=t.fog;return this}}const ng=
new Tb,fg=new tg;class gg{constructor(t,A,F){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0;this.name="";this.array=t;this.itemSize=A;this.count=void 0!==t?t.length/A:0;this.normalized=!0===F;this.usage=35044;this.updateRange={offset:0,count:-1};this.version=0}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){this.usage=t;return this}copy(t){this.name=t.name;this.array=new t.array.constructor(t.array);
this.itemSize=t.itemSize;this.count=t.count;this.normalized=t.normalized;this.usage=t.usage;return this}copyAt(t,A,F){t*=this.itemSize;F*=A.itemSize;for(let Q=0,X=this.itemSize;Q<X;Q++)this.array[t+Q]=A.array[F+Q];return this}copyArray(t){this.array.set(t);return this}copyColorsArray(t){const A=this.array;let F=0;for(let Q=0,X=t.length;Q<X;Q++){let bb=t[Q];void 0===bb&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",Q),bb=new Cd);A[F++]=bb.r;A[F++]=bb.g;A[F++]=bb.b}return this}copyVector2sArray(t){const A=
this.array;let F=0;for(let Q=0,X=t.length;Q<X;Q++){let bb=t[Q];void 0===bb&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",Q),bb=new tg);A[F++]=bb.x;A[F++]=bb.y}return this}copyVector3sArray(t){const A=this.array;let F=0;for(let Q=0,X=t.length;Q<X;Q++){let bb=t[Q];void 0===bb&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",Q),bb=new Tb);A[F++]=bb.x;A[F++]=bb.y;A[F++]=bb.z}return this}copyVector4sArray(t){const A=this.array;let F=0;for(let Q=
0,X=t.length;Q<X;Q++){let bb=t[Q];void 0===bb&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",Q),bb=new eg);A[F++]=bb.x;A[F++]=bb.y;A[F++]=bb.z;A[F++]=bb.w}return this}applyMatrix3(t){if(2===this.itemSize)for(let A=0,F=this.count;A<F;A++)fg.fromBufferAttribute(this,A),fg.applyMatrix3(t),this.setXY(A,fg.x,fg.y);else if(3===this.itemSize)for(let A=0,F=this.count;A<F;A++)ng.fromBufferAttribute(this,A),ng.applyMatrix3(t),this.setXYZ(A,ng.x,ng.y,ng.z);return this}applyMatrix4(t){for(let A=
0,F=this.count;A<F;A++)ng.fromBufferAttribute(this,A),ng.applyMatrix4(t),this.setXYZ(A,ng.x,ng.y,ng.z);return this}applyNormalMatrix(t){for(let A=0,F=this.count;A<F;A++)ng.fromBufferAttribute(this,A),ng.applyNormalMatrix(t),this.setXYZ(A,ng.x,ng.y,ng.z);return this}transformDirection(t){for(let A=0,F=this.count;A<F;A++)ng.fromBufferAttribute(this,A),ng.transformDirection(t),this.setXYZ(A,ng.x,ng.y,ng.z);return this}set(t,A=0){this.array.set(t,A);return this}getX(t){return this.array[t*this.itemSize]}setX(t,
A){this.array[t*this.itemSize]=A;return this}getY(t){return this.array[t*this.itemSize+1]}setY(t,A){this.array[t*this.itemSize+1]=A;return this}getZ(t){return this.array[t*this.itemSize+2]}setZ(t,A){this.array[t*this.itemSize+2]=A;return this}getW(t){return this.array[t*this.itemSize+3]}setW(t,A){this.array[t*this.itemSize+3]=A;return this}setXY(t,A,F){t*=this.itemSize;this.array[t+0]=A;this.array[t+1]=F;return this}setXYZ(t,A,F,Q){t*=this.itemSize;this.array[t+0]=A;this.array[t+1]=F;this.array[t+
2]=Q;return this}setXYZW(t,A,F,Q,X){t*=this.itemSize;this.array[t+0]=A;this.array[t+1]=F;this.array[t+2]=Q;this.array[t+3]=X;return this}onUpload(t){this.onUploadCallback=t;return this}clone(){return(new this.constructor(this.array,this.itemSize)).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};""!==this.name&&(t.name=this.name);35044!==this.usage&&(t.usage=this.usage);if(0!==this.updateRange.offset||-1!==
this.updateRange.count)t.updateRange=this.updateRange;return t}}class Wh extends gg{constructor(t,A,F){super(new Uint16Array(t),A,F)}}class wg extends gg{constructor(t,A,F){super(new Uint32Array(t),A,F)}}class xh extends gg{constructor(t,A,F){super(new Float32Array(t),A,F)}}let Qi=0;const Di=new Ub,Zi=new jb,ni=new Tb,Xd=new Kf,ff=new Kf,af=new Tb;class Gf extends hf{constructor(){super();this.isBufferGeometry=!0;Object.defineProperty(this,"id",{value:Qi++});this.uuid=Od();this.name="";this.type=
"BufferGeometry";this.index=null;this.attributes={};this.morphAttributes={};this.morphTargetsRelative=!1;this.groups=[];this.boundingSphere=this.boundingBox=null;this.drawRange={start:0,count:Infinity};this.userData={}}getIndex(){return this.index}setIndex(t){Array.isArray(t)?this.index=new (lc(t)?wg:Wh)(t,1):this.index=t;return this}getAttribute(t){return this.attributes[t]}setAttribute(t,A){this.attributes[t]=A;return this}deleteAttribute(t){delete this.attributes[t];return this}hasAttribute(t){return void 0!==
this.attributes[t]}addGroup(t,A,F=0){this.groups.push({start:t,count:A,materialIndex:F})}clearGroups(){this.groups=[]}setDrawRange(t,A){this.drawRange.start=t;this.drawRange.count=A}applyMatrix4(t){var A=this.attributes.position;void 0!==A&&(A.applyMatrix4(t),A.needsUpdate=!0);A=this.attributes.normal;if(void 0!==A){const F=(new pd).getNormalMatrix(t);A.applyNormalMatrix(F);A.needsUpdate=!0}A=this.attributes.tangent;void 0!==A&&(A.transformDirection(t),A.needsUpdate=!0);null!==this.boundingBox&&this.computeBoundingBox();
null!==this.boundingSphere&&this.computeBoundingSphere();return this}applyQuaternion(t){Di.makeRotationFromQuaternion(t);this.applyMatrix4(Di);return this}rotateX(t){Di.makeRotationX(t);this.applyMatrix4(Di);return this}rotateY(t){Di.makeRotationY(t);this.applyMatrix4(Di);return this}rotateZ(t){Di.makeRotationZ(t);this.applyMatrix4(Di);return this}translate(t,A,F){Di.makeTranslation(t,A,F);this.applyMatrix4(Di);return this}scale(t,A,F){Di.makeScale(t,A,F);this.applyMatrix4(Di);return this}lookAt(t){Zi.lookAt(t);
Zi.updateMatrix();this.applyMatrix4(Zi.matrix);return this}center(){this.computeBoundingBox();this.boundingBox.getCenter(ni).negate();this.translate(ni.x,ni.y,ni.z);return this}setFromPoints(t){const A=[];for(let F=0,Q=t.length;F<Q;F++){const X=t[F];A.push(X.x,X.y,X.z||0)}this.setAttribute("position",new xh(A,3));return this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new Kf);const t=this.attributes.position,A=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',
this),this.boundingBox.set(new Tb(-Infinity,-Infinity,-Infinity),new Tb(Infinity,Infinity,Infinity));else{if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),A)for(let F=0,Q=A.length;F<Q;F++)Xd.setFromBufferAttribute(A[F]),this.morphTargetsRelative?(af.addVectors(this.boundingBox.min,Xd.min),this.boundingBox.expandByPoint(af),af.addVectors(this.boundingBox.max,Xd.max),this.boundingBox.expandByPoint(af)):(this.boundingBox.expandByPoint(Xd.min),this.boundingBox.expandByPoint(Xd.max))}else this.boundingBox.makeEmpty();
(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new Zf);const t=this.attributes.position,A=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',
this),this.boundingSphere.set(new Tb,Infinity);else if(t){const F=this.boundingSphere.center;Xd.setFromBufferAttribute(t);if(A)for(let X=0,bb=A.length;X<bb;X++)ff.setFromBufferAttribute(A[X]),this.morphTargetsRelative?(af.addVectors(Xd.min,ff.min),Xd.expandByPoint(af),af.addVectors(Xd.max,ff.max),Xd.expandByPoint(af)):(Xd.expandByPoint(ff.min),Xd.expandByPoint(ff.max));Xd.getCenter(F);let Q=0;for(let X=0,bb=t.count;X<bb;X++)af.fromBufferAttribute(t,X),Q=Math.max(Q,F.distanceToSquared(af));if(A)for(let X=
0,bb=A.length;X<bb;X++){const Wa=A[X],Ab=this.morphTargetsRelative;for(let fc=0,Lc=Wa.count;fc<Lc;fc++)af.fromBufferAttribute(Wa,fc),Ab&&(ni.fromBufferAttribute(t,fc),af.add(ni)),Q=Math.max(Q,F.distanceToSquared(af))}this.boundingSphere.radius=Math.sqrt(Q);isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){function t(Lf,yf,Qe){le.fromArray(X,3*Lf);je.fromArray(X,
3*yf);pe.fromArray(X,3*Qe);qe.fromArray(Wa,2*Lf);nc.fromArray(Wa,2*yf);Ke.fromArray(Wa,2*Qe);je.sub(le);pe.sub(le);nc.sub(qe);Ke.sub(qe);const zg=1/(nc.x*Ke.y-Ke.x*nc.y);isFinite(zg)&&($f.copy(je).multiplyScalar(Ke.y).addScaledVector(pe,-nc.y).multiplyScalar(zg),Te.copy(pe).multiplyScalar(nc.x).addScaledVector(je,-Ke.x).multiplyScalar(zg),fc[Lf].add($f),fc[yf].add($f),fc[Qe].add($f),Lc[Lf].add(Te),Lc[yf].add(Te),Lc[Qe].add(Te))}function A(Lf){Ig.fromArray(bb,3*Lf);Tg.copy(Ig);var yf=fc[Lf];Jf.copy(yf);
Jf.sub(Ig.multiplyScalar(Ig.dot(yf))).normalize();Hf.crossVectors(Tg,yf);yf=Hf.dot(Lc[Lf]);Ab[4*Lf]=Jf.x;Ab[4*Lf+1]=Jf.y;Ab[4*Lf+2]=Jf.z;Ab[4*Lf+3]=0>yf?-1:1}var F=this.index,Q=this.attributes;if(null===F||void 0===Q.position||void 0===Q.normal||void 0===Q.uv)console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");else{F=F.array;var X=Q.position.array,bb=Q.normal.array,Wa=Q.uv.array;Q=X.length/3;!1===this.hasAttribute("tangent")&&
this.setAttribute("tangent",new gg(new Float32Array(4*Q),4));var Ab=this.getAttribute("tangent").array,fc=[],Lc=[];for(var wd=0;wd<Q;wd++)fc[wd]=new Tb,Lc[wd]=new Tb;var le=new Tb,je=new Tb,pe=new Tb,qe=new tg,nc=new tg,Ke=new tg,$f=new Tb,Te=new Tb;Q=this.groups;0===Q.length&&(Q=[{start:0,count:F.length}]);for(let Lf=0,yf=Q.length;Lf<yf;++Lf){var ug=Q[Lf];wd=ug.start;ug=ug.count;for(let Qe=wd,zg=wd+ug;Qe<zg;Qe+=3)t(F[Qe+0],F[Qe+1],F[Qe+2])}var Jf=new Tb,Hf=new Tb,Ig=new Tb,Tg=new Tb;for(let Lf=0,
yf=Q.length;Lf<yf;++Lf){ug=Q[Lf];wd=ug.start;ug=ug.count;for(let Qe=wd,zg=wd+ug;Qe<zg;Qe+=3)A(F[Qe+0]),A(F[Qe+1]),A(F[Qe+2])}}}computeVertexNormals(){const t=this.index,A=this.getAttribute("position");if(void 0!==A){let F=this.getAttribute("normal");if(void 0===F)F=new gg(new Float32Array(3*A.count),3),this.setAttribute("normal",F);else for(let le=0,je=F.count;le<je;le++)F.setXYZ(le,0,0,0);const Q=new Tb,X=new Tb,bb=new Tb,Wa=new Tb,Ab=new Tb,fc=new Tb,Lc=new Tb,wd=new Tb;if(t)for(let le=0,je=t.count;le<
je;le+=3){const pe=t.getX(le+0),qe=t.getX(le+1),nc=t.getX(le+2);Q.fromBufferAttribute(A,pe);X.fromBufferAttribute(A,qe);bb.fromBufferAttribute(A,nc);Lc.subVectors(bb,X);wd.subVectors(Q,X);Lc.cross(wd);Wa.fromBufferAttribute(F,pe);Ab.fromBufferAttribute(F,qe);fc.fromBufferAttribute(F,nc);Wa.add(Lc);Ab.add(Lc);fc.add(Lc);F.setXYZ(pe,Wa.x,Wa.y,Wa.z);F.setXYZ(qe,Ab.x,Ab.y,Ab.z);F.setXYZ(nc,fc.x,fc.y,fc.z)}else for(let le=0,je=A.count;le<je;le+=3)Q.fromBufferAttribute(A,le+0),X.fromBufferAttribute(A,le+
1),bb.fromBufferAttribute(A,le+2),Lc.subVectors(bb,X),wd.subVectors(Q,X),Lc.cross(wd),F.setXYZ(le+0,Lc.x,Lc.y,Lc.z),F.setXYZ(le+1,Lc.x,Lc.y,Lc.z),F.setXYZ(le+2,Lc.x,Lc.y,Lc.z);this.normalizeNormals();F.needsUpdate=!0}}merge(t,A){if(t&&t.isBufferGeometry){void 0===A&&(A=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));var F=this.attributes;for(const X in F){if(void 0===t.attributes[X])continue;
const bb=F[X].array;var Q=t.attributes[X];const Wa=Q.array;Q=Q.itemSize*A;const Ab=Math.min(Wa.length,bb.length-Q);for(let fc=0,Lc=Q;fc<Ab;fc++,Lc++)bb[Lc]=Wa[fc]}return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",t)}normalizeNormals(){const t=this.attributes.normal;for(let A=0,F=t.count;A<F;A++)af.fromBufferAttribute(t,A),af.normalize(),t.setXYZ(A,af.x,af.y,af.z)}toNonIndexed(){function t(Ab,fc){const Lc=Ab.array,wd=Ab.itemSize,le=Ab.normalized,
je=new Lc.constructor(fc.length*wd);let pe,qe=0;for(let nc=0,Ke=fc.length;nc<Ke;nc++){pe=Ab.isInterleavedBufferAttribute?fc[nc]*Ab.data.stride+Ab.offset:fc[nc]*wd;for(let $f=0;$f<wd;$f++)je[qe++]=Lc[pe++]}return new gg(je,wd,le)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const A=new Gf;var F=this.index.array,Q=this.attributes;for(var X in Q){var bb=t(Q[X],F);A.setAttribute(X,bb)}Q=this.morphAttributes;for(var Wa in Q){X=
[];bb=Q[Wa];for(let Ab=0,fc=bb.length;Ab<fc;Ab++){const Lc=t(bb[Ab],F);X.push(Lc)}A.morphAttributes[Wa]=X}A.morphTargetsRelative=this.morphTargetsRelative;F=this.groups;for(let Ab=0,fc=F.length;Ab<fc;Ab++)Wa=F[Ab],A.addGroup(Wa.start,Wa.count,Wa.materialIndex);return A}toJSON(){const t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};t.uuid=this.uuid;t.type=this.type;""!==this.name&&(t.name=this.name);0<Object.keys(this.userData).length&&(t.userData=this.userData);
if(void 0!==this.parameters){var A=this.parameters;for(var F in A)void 0!==A[F]&&(t[F]=A[F]);return t}t.data={attributes:{}};F=this.index;null!==F&&(t.data.index={type:F.array.constructor.name,array:Array.prototype.slice.call(F.array)});F=this.attributes;for(var Q in F)t.data.attributes[Q]=F[Q].toJSON(t.data);Q={};F=!1;for(A in this.morphAttributes){const X=this.morphAttributes[A],bb=[];for(let Wa=0,Ab=X.length;Wa<Ab;Wa++)bb.push(X[Wa].toJSON(t.data));0<bb.length&&(Q[A]=bb,F=!0)}F&&(t.data.morphAttributes=
Q,t.data.morphTargetsRelative=this.morphTargetsRelative);A=this.groups;0<A.length&&(t.data.groups=JSON.parse(JSON.stringify(A)));A=this.boundingSphere;null!==A&&(t.data.boundingSphere={center:A.center.toArray(),radius:A.radius});return t}clone(){return(new this.constructor).copy(this)}copy(t){this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingSphere=this.boundingBox=null;var A={};this.name=t.name;var F=t.index;null!==F&&this.setIndex(F.clone(A));F=t.attributes;
for(var Q in F)this.setAttribute(Q,F[Q].clone(A));Q=t.morphAttributes;for(var X in Q){F=[];const bb=Q[X];for(let Wa=0,Ab=bb.length;Wa<Ab;Wa++)F.push(bb[Wa].clone(A));this.morphAttributes[X]=F}this.morphTargetsRelative=t.morphTargetsRelative;A=t.groups;for(let bb=0,Wa=A.length;bb<Wa;bb++)X=A[bb],this.addGroup(X.start,X.count,X.materialIndex);A=t.boundingBox;null!==A&&(this.boundingBox=A.clone());A=t.boundingSphere;null!==A&&(this.boundingSphere=A.clone());this.drawRange.start=t.drawRange.start;this.drawRange.count=
t.drawRange.count;this.userData=t.userData;void 0!==t.parameters&&(this.parameters=Object.assign({},t.parameters));return this}dispose(){this.dispatchEvent({type:"dispose"})}}const Jh=new Ub,ci=new ib,di=new Zf,vj=new Tb,pj=new Tb,kj=new Tb,Ih=new Tb,mk=new Tb,fl=new Tb,Al=new Tb,rg=new Tb,Sg=new Tb,Lj=new tg,gl=new tg,ao=new tg,Dn=new Tb,xm=new Tb;class Nl extends jb{constructor(t=new Gf,A=new Hg){super();this.isMesh=!0;this.type="Mesh";this.geometry=t;this.material=A;this.updateMorphTargets()}copy(t,
A){super.copy(t,A);void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice());void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary));this.material=t.material;this.geometry=t.geometry;return this}updateMorphTargets(){var t=this.geometry.morphAttributes,A=Object.keys(t);if(0<A.length&&(t=t[A[0]],void 0!==t)){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let F=0,Q=t.length;F<Q;F++)A=t[F].name||String(F),
this.morphTargetInfluences.push(0),this.morphTargetDictionary[A]=F}}raycast(t,A){var F=this.geometry;const Q=this.material;var X=this.matrixWorld;if(void 0!==Q&&(null===F.boundingSphere&&F.computeBoundingSphere(),di.copy(F.boundingSphere),di.applyMatrix4(X),!1!==t.ray.intersectsSphere(di)&&(Jh.copy(X).invert(),ci.copy(t.ray).applyMatrix4(Jh),null===F.boundingBox||!1!==ci.intersectsBox(F.boundingBox)))){var bb=F.index;X=F.attributes.position;var Wa=F.morphAttributes.position,Ab=F.morphTargetsRelative,
fc=F.attributes.uv,Lc=F.attributes.uv2,wd=F.groups;F=F.drawRange;if(null!==bb)if(Array.isArray(Q))for(let nc=0,Ke=wd.length;nc<Ke;nc++){var le=wd[nc],je=Q[le.materialIndex];var pe=Math.max(le.start,F.start);var qe=Math.min(bb.count,Math.min(le.start+le.count,F.start+F.count));for(let $f=pe,Te=qe;$f<Te;$f+=3){pe=bb.getX($f);qe=bb.getX($f+1);const ug=bb.getX($f+2);if(pe=Db(this,je,t,ci,X,Wa,Ab,fc,Lc,pe,qe,ug))pe.faceIndex=Math.floor($f/3),pe.face.materialIndex=le.materialIndex,A.push(pe)}}else{wd=Math.max(0,
F.start);F=Math.min(bb.count,F.start+F.count);for(let nc=wd,Ke=F;nc<Ke;nc+=3)if(F=bb.getX(nc),wd=bb.getX(nc+1),le=bb.getX(nc+2),pe=Db(this,Q,t,ci,X,Wa,Ab,fc,Lc,F,wd,le))pe.faceIndex=Math.floor(nc/3),A.push(pe)}else if(void 0!==X)if(Array.isArray(Q))for(let nc=0,Ke=wd.length;nc<Ke;nc++){bb=wd[nc];le=Q[bb.materialIndex];je=Math.max(bb.start,F.start);pe=Math.min(X.count,Math.min(bb.start+bb.count,F.start+F.count));for(let $f=je,Te=pe;$f<Te;$f+=3)if(pe=Db(this,le,t,ci,X,Wa,Ab,fc,Lc,$f,$f+1,$f+2))pe.faceIndex=
Math.floor($f/3),pe.face.materialIndex=bb.materialIndex,A.push(pe)}else{bb=Math.max(0,F.start);F=Math.min(X.count,F.start+F.count);for(let nc=bb,Ke=F;nc<Ke;nc+=3)if(pe=Db(this,Q,t,ci,X,Wa,Ab,fc,Lc,nc,nc+1,nc+2))pe.faceIndex=Math.floor(nc/3),A.push(pe)}}}}class En extends Gf{constructor(t=1,A=1,F=1,Q=1,X=1,bb=1){function Wa(qe,nc,Ke,$f,Te,ug,Jf,Hf,Ig,Tg,Lf){const yf=ug/Ig,Qe=Jf/Tg,zg=ug/2,Dh=Jf/2,Jg=Hf/2;Jf=Ig+1;const zh=Tg+1;let jh=ug=0;const Pg=new Tb;for(let ah=0;ah<zh;ah++){const nh=ah*Qe-Dh;for(let Fi=
0;Fi<Jf;Fi++)Pg[qe]=(Fi*yf-zg)*$f,Pg[nc]=nh*Te,Pg[Ke]=Jg,Lc.push(Pg.x,Pg.y,Pg.z),Pg[qe]=0,Pg[nc]=0,Pg[Ke]=0<Hf?1:-1,wd.push(Pg.x,Pg.y,Pg.z),le.push(Fi/Ig),le.push(1-ah/Tg),ug+=1}for(qe=0;qe<Tg;qe++)for(nc=0;nc<Ig;nc++)Ke=je+nc+Jf*(qe+1),$f=je+(nc+1)+Jf*(qe+1),Te=je+(nc+1)+Jf*qe,fc.push(je+nc+Jf*qe,Ke,Te),fc.push(Ke,$f,Te),jh+=6;Ab.addGroup(pe,jh,Lf);pe+=jh;je+=ug}super();this.type="BoxGeometry";this.parameters={width:t,height:A,depth:F,widthSegments:Q,heightSegments:X,depthSegments:bb};const Ab=this;
Q=Math.floor(Q);X=Math.floor(X);bb=Math.floor(bb);const fc=[],Lc=[],wd=[],le=[];let je=0,pe=0;Wa("z","y","x",-1,-1,F,A,t,bb,X,0);Wa("z","y","x",1,-1,F,A,-t,bb,X,1);Wa("x","z","y",1,1,t,F,A,Q,bb,2);Wa("x","z","y",1,-1,t,F,-A,Q,bb,3);Wa("x","y","z",1,-1,t,A,F,Q,X,4);Wa("x","y","z",-1,-1,t,A,-F,Q,X,5);this.setIndex(fc);this.setAttribute("position",new xh(Lc,3));this.setAttribute("normal",new xh(wd,3));this.setAttribute("uv",new xh(le,2))}static fromJSON(t){return new En(t.width,t.height,t.depth,t.widthSegments,
t.heightSegments,t.depthSegments)}}const lq={clone:ab,merge:eb};class lm extends Rf{constructor(t){super();this.isShaderMaterial=!0;this.type="ShaderMaterial";this.defines={};this.uniforms={};this.uniformsGroups=[];this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";this.linewidth=1;this.wireframe=!1;this.wireframeLinewidth=1;this.clipping=this.lights=
this.fog=!1;this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1};this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]};this.index0AttributeName=void 0;this.uniformsNeedUpdate=!1;this.glslVersion=null;void 0!==t&&(void 0!==t.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(t))}copy(t){super.copy(t);this.fragmentShader=t.fragmentShader;this.vertexShader=t.vertexShader;this.uniforms=
ab(t.uniforms);{var A=t.uniformsGroups;const F=[];for(let Q=0;Q<A.length;Q++)F.push(A[Q].clone());A=F}this.uniformsGroups=A;this.defines=Object.assign({},t.defines);this.wireframe=t.wireframe;this.wireframeLinewidth=t.wireframeLinewidth;this.fog=t.fog;this.lights=t.lights;this.clipping=t.clipping;this.extensions=Object.assign({},t.extensions);this.glslVersion=t.glslVersion;return this}toJSON(t){const A=super.toJSON(t);A.glslVersion=this.glslVersion;A.uniforms={};for(const F in this.uniforms){const Q=
this.uniforms[F].value;A.uniforms[F]=Q&&Q.isTexture?{type:"t",value:Q.toJSON(t).uuid}:Q&&Q.isColor?{type:"c",value:Q.getHex()}:Q&&Q.isVector2?{type:"v2",value:Q.toArray()}:Q&&Q.isVector3?{type:"v3",value:Q.toArray()}:Q&&Q.isVector4?{type:"v4",value:Q.toArray()}:Q&&Q.isMatrix3?{type:"m3",value:Q.toArray()}:Q&&Q.isMatrix4?{type:"m4",value:Q.toArray()}:{value:Q}}0<Object.keys(this.defines).length&&(A.defines=this.defines);A.vertexShader=this.vertexShader;A.fragmentShader=this.fragmentShader;t={};for(const F in this.extensions)!0===
this.extensions[F]&&(t[F]=!0);0<Object.keys(t).length&&(A.extensions=t);return A}}class yo extends jb{constructor(){super();this.isCamera=!0;this.type="Camera";this.matrixWorldInverse=new Ub;this.projectionMatrix=new Ub;this.projectionMatrixInverse=new Ub}copy(t,A){super.copy(t,A);this.matrixWorldInverse.copy(t.matrixWorldInverse);this.projectionMatrix.copy(t.projectionMatrix);this.projectionMatrixInverse.copy(t.projectionMatrixInverse);return this}getWorldDirection(t){this.updateWorldMatrix(!0,!1);
const A=this.matrixWorld.elements;return t.set(-A[8],-A[9],-A[10]).normalize()}updateMatrixWorld(t){super.updateMatrixWorld(t);this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,A){super.updateWorldMatrix(t,A);this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}class Fl extends yo{constructor(t=50,A=1,F=.1,Q=2E3){super();this.isPerspectiveCamera=!0;this.type="PerspectiveCamera";this.fov=t;this.zoom=1;this.near=F;this.far=
Q;this.focus=10;this.aspect=A;this.view=null;this.filmGauge=35;this.filmOffset=0;this.updateProjectionMatrix()}copy(t,A){super.copy(t,A);this.fov=t.fov;this.zoom=t.zoom;this.near=t.near;this.far=t.far;this.focus=t.focus;this.aspect=t.aspect;this.view=null===t.view?null:Object.assign({},t.view);this.filmGauge=t.filmGauge;this.filmOffset=t.filmOffset;return this}setFocalLength(t){t=.5*this.getFilmHeight()/t;this.fov=2*vg*Math.atan(t);this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(.5*
Gg*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return 2*vg*Math.atan(Math.tan(.5*Gg*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(t,A,F,Q,X,bb){this.aspect=t/A;null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1});this.view.enabled=!0;this.view.fullWidth=t;this.view.fullHeight=A;this.view.offsetX=F;this.view.offsetY=Q;this.view.width=
X;this.view.height=bb;this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1);this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let A=t*Math.tan(.5*Gg*this.fov)/this.zoom,F=2*A,Q=this.aspect*F,X=-.5*Q;var bb=this.view;if(null!==this.view&&this.view.enabled){const Wa=bb.fullWidth,Ab=bb.fullHeight;X+=bb.offsetX*Q/Wa;A-=bb.offsetY*F/Ab;Q*=bb.width/Wa;F*=bb.height/Ab}bb=this.filmOffset;0!==bb&&(X+=t*bb/this.getFilmWidth());this.projectionMatrix.makePerspective(X,
X+Q,A,A-F,t,this.far);this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){t=super.toJSON(t);t.object.fov=this.fov;t.object.zoom=this.zoom;t.object.near=this.near;t.object.far=this.far;t.object.focus=this.focus;t.object.aspect=this.aspect;null!==this.view&&(t.object.view=Object.assign({},this.view));t.object.filmGauge=this.filmGauge;t.object.filmOffset=this.filmOffset;return t}}class mq extends jb{constructor(t,A,F){super();this.type="CubeCamera";!0!==F.isWebGLCubeRenderTarget?
console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter."):(this.renderTarget=F,F=new Fl(90,1,t,A),F.layers=this.layers,F.up.set(0,-1,0),F.lookAt(new Tb(1,0,0)),this.add(F),F=new Fl(90,1,t,A),F.layers=this.layers,F.up.set(0,-1,0),F.lookAt(new Tb(-1,0,0)),this.add(F),F=new Fl(90,1,t,A),F.layers=this.layers,F.up.set(0,0,1),F.lookAt(new Tb(0,1,0)),this.add(F),F=new Fl(90,1,t,A),F.layers=this.layers,F.up.set(0,0,-1),F.lookAt(new Tb(0,-1,0)),
this.add(F),F=new Fl(90,1,t,A),F.layers=this.layers,F.up.set(0,-1,0),F.lookAt(new Tb(0,0,1)),this.add(F),t=new Fl(90,1,t,A),t.layers=this.layers,t.up.set(0,-1,0),t.lookAt(new Tb(0,0,-1)),this.add(t))}update(t,A){null===this.parent&&this.updateMatrixWorld();const F=this.renderTarget,[Q,X,bb,Wa,Ab,fc]=this.children,Lc=t.getRenderTarget(),wd=t.toneMapping,le=t.xr.enabled;t.toneMapping=0;t.xr.enabled=!1;const je=F.texture.generateMipmaps;F.texture.generateMipmaps=!1;t.setRenderTarget(F,0);t.render(A,
Q);t.setRenderTarget(F,1);t.render(A,X);t.setRenderTarget(F,2);t.render(A,bb);t.setRenderTarget(F,3);t.render(A,Wa);t.setRenderTarget(F,4);t.render(A,Ab);F.texture.generateMipmaps=je;t.setRenderTarget(F,5);t.render(A,fc);t.setRenderTarget(Lc);t.toneMapping=wd;t.xr.enabled=le;F.texture.needsPMREMUpdate=!0}}class mp extends Pf{constructor(t,A,F,Q,X,bb,Wa,Ab,fc,Lc){t=void 0!==t?t:[];super(t,void 0!==A?A:301,F,Q,X,bb,Wa,Ab,fc,Lc);this.isCubeTexture=!0;this.flipY=!1}get images(){return this.image}set images(t){this.image=
t}}class bo extends be{constructor(t,A={}){super(t,t,A);this.isWebGLCubeRenderTarget=!0;t={width:t,height:t,depth:1};this.texture=new mp([t,t,t,t,t,t],A.mapping,A.wrapS,A.wrapT,A.magFilter,A.minFilter,A.format,A.type,A.anisotropy,A.encoding);this.texture.isRenderTargetTexture=!0;this.texture.generateMipmaps=void 0!==A.generateMipmaps?A.generateMipmaps:!1;this.texture.minFilter=void 0!==A.minFilter?A.minFilter:1006}fromEquirectangularTexture(t,A){this.texture.type=A.type;this.texture.encoding=A.encoding;
this.texture.generateMipmaps=A.generateMipmaps;this.texture.minFilter=A.minFilter;this.texture.magFilter=A.magFilter;var F=new En(5,5,5),Q=new lm({name:"CubemapFromEquirect",uniforms:ab({tEquirect:{value:null}}),vertexShader:"\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",
fragmentShader:"\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t",side:1,blending:0});Q.uniforms.tEquirect.value=A;F=new Nl(F,Q);Q=A.minFilter;1008===A.minFilter&&(A.minFilter=1006);(new mq(1,10,this)).update(t,F);A.minFilter=
Q;F.geometry.dispose();F.material.dispose();return this}clear(t,A,F,Q){const X=t.getRenderTarget();for(let bb=0;6>bb;bb++)t.setRenderTarget(this,bb),t.clear(A,F,Q);t.setRenderTarget(X)}}const yj=new Tb,Fn=new Tb,np=new pd;class Ym{constructor(t=new Tb(1,0,0),A=0){this.isPlane=!0;this.normal=t;this.constant=A}set(t,A){this.normal.copy(t);this.constant=A;return this}setComponents(t,A,F,Q){this.normal.set(t,A,F);this.constant=Q;return this}setFromNormalAndCoplanarPoint(t,A){this.normal.copy(t);this.constant=
-A.dot(this.normal);return this}setFromCoplanarPoints(t,A,F){A=yj.subVectors(F,A).cross(Fn.subVectors(t,A)).normalize();this.setFromNormalAndCoplanarPoint(A,t);return this}copy(t){this.normal.copy(t.normal);this.constant=t.constant;return this}normalize(){const t=1/this.normal.length();this.normal.multiplyScalar(t);this.constant*=t;return this}negate(){this.constant*=-1;this.normal.negate();return this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-
t.radius}projectPoint(t,A){return A.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)}intersectLine(t,A){const F=t.delta(yj);var Q=this.normal.dot(F);if(0===Q)return 0===this.distanceToPoint(t.start)?A.copy(t.start):null;Q=-(t.start.dot(this.normal)+this.constant)/Q;return 0>Q||1<Q?null:A.copy(F).multiplyScalar(Q).add(t.start)}intersectsLine(t){const A=this.distanceToPoint(t.start);t=this.distanceToPoint(t.end);return 0>A&&0<t||0>t&&0<A}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,
A){A=A||np.getNormalMatrix(t);t=this.coplanarPoint(yj).applyMatrix4(t);A=this.normal.applyMatrix3(A).normalize();this.constant=-t.dot(A);return this}translate(t){this.constant-=t.dot(this.normal);return this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}const on=new Zf,pn=new Tb;class zo{constructor(t=new Ym,A=new Ym,F=new Ym,Q=new Ym,X=new Ym,bb=new Ym){this.planes=[t,A,F,Q,X,bb]}set(t,A,F,Q,X,bb){const Wa=this.planes;Wa[0].copy(t);
Wa[1].copy(A);Wa[2].copy(F);Wa[3].copy(Q);Wa[4].copy(X);Wa[5].copy(bb);return this}copy(t){const A=this.planes;for(let F=0;6>F;F++)A[F].copy(t.planes[F]);return this}setFromProjectionMatrix(t){const A=this.planes;var F=t.elements;t=F[0];const Q=F[1],X=F[2],bb=F[3],Wa=F[4],Ab=F[5],fc=F[6],Lc=F[7],wd=F[8],le=F[9],je=F[10],pe=F[11],qe=F[12],nc=F[13],Ke=F[14];F=F[15];A[0].setComponents(bb-t,Lc-Wa,pe-wd,F-qe).normalize();A[1].setComponents(bb+t,Lc+Wa,pe+wd,F+qe).normalize();A[2].setComponents(bb+Q,Lc+
Ab,pe+le,F+nc).normalize();A[3].setComponents(bb-Q,Lc-Ab,pe-le,F-nc).normalize();A[4].setComponents(bb-X,Lc-fc,pe-je,F-Ke).normalize();A[5].setComponents(bb+X,Lc+fc,pe+je,F+Ke).normalize();return this}intersectsObject(t){const A=t.geometry;null===A.boundingSphere&&A.computeBoundingSphere();on.copy(A.boundingSphere).applyMatrix4(t.matrixWorld);return this.intersectsSphere(on)}intersectsSprite(t){on.center.set(0,0,0);on.radius=.7071067811865476;on.applyMatrix4(t.matrixWorld);return this.intersectsSphere(on)}intersectsSphere(t){const A=
this.planes,F=t.center;t=-t.radius;for(let Q=0;6>Q;Q++)if(A[Q].distanceToPoint(F)<t)return!1;return!0}intersectsBox(t){const A=this.planes;for(let F=0;6>F;F++){const Q=A[F];pn.x=0<Q.normal.x?t.max.x:t.min.x;pn.y=0<Q.normal.y?t.max.y:t.min.y;pn.z=0<Q.normal.z?t.max.z:t.min.z;if(0>Q.distanceToPoint(pn))return!1}return!0}containsPoint(t){const A=this.planes;for(let F=0;6>F;F++)if(0>A[F].distanceToPoint(t))return!1;return!0}clone(){return(new this.constructor).copy(this)}}class op extends Gf{constructor(t=
1,A=1,F=1,Q=1){super();this.type="PlaneGeometry";this.parameters={width:t,height:A,widthSegments:F,heightSegments:Q};var X=t/2,bb=A/2;F=Math.floor(F);Q=Math.floor(Q);const Wa=F+1;var Ab=Q+1,fc=t/F,Lc=A/Q;A=[];t=[];const wd=[],le=[];for(let je=0;je<Ab;je++){const pe=je*Lc-bb;for(let qe=0;qe<Wa;qe++)t.push(qe*fc-X,-pe,0),wd.push(0,0,1),le.push(qe/F),le.push(1-je/Q)}for(X=0;X<Q;X++)for(bb=0;bb<F;bb++)Ab=bb+Wa*(X+1),fc=bb+1+Wa*(X+1),Lc=bb+1+Wa*X,A.push(bb+Wa*X,Ab,Lc),A.push(Ab,fc,Lc);this.setIndex(A);
this.setAttribute("position",new xh(t,3));this.setAttribute("normal",new xh(wd,3));this.setAttribute("uv",new xh(le,2))}static fromJSON(t){return new op(t.width,t.height,t.widthSegments,t.heightSegments)}}const zj={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",
aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",
begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\n#ifdef USE_IRIDESCENCE\n\tvec3 BRDF_GGX_Iridescence( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float iridescence, const in vec3 iridescenceFresnel, const in float roughness ) {\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = mix( F_Schlick( f0, f90, dotVH ), iridescenceFresnel, iridescence );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif",
iridescence_fragment:"#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\t return vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat R21 = R12;\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif",
bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos.xyz );\n\t\tvec3 vSigmaY = dFdy( surf_pos.xyz );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",
clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",
clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",
color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\treturn dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",
cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",
defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",
displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",
emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",
envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",
envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif",
envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",
fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",
gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",
lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",
lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",
lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",
lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",
lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif",
lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX_Iridescence( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );\n\t#else\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",
lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometry.viewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",
lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",
lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",
logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",
map_fragment:"#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",
map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",
morphcolor_vertex:"#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif",
morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",
morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",
morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",
normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",
normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",
normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",
normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif",
clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif",
clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",iridescence_pars_fragment:"#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif",output_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",
packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",
premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",
roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",
shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",
shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",
shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",
skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tuniform int boneTextureSize;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tfloat j = i * 4.0;\n\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\ty = dy * ( y + 0.5 );\n\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\treturn bone;\n\t}\n#endif",
skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",
specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",
transmission_fragment:"#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif",
transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef texture2DLodEXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif",
uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",
uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",
background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tgl_FragColor = vec4( mix( pow( gl_FragColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), gl_FragColor.rgb * 0.0773993808, vec3( lessThanEqual( gl_FragColor.rgb, vec3( 0.04045 ) ) ) ), gl_FragColor.w );\n\t#endif\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",
cube_frag:"#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",
depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",
distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",
distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",
equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",
linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",
meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",
meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",
meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",
meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",
meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",
points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
shadow_vert:"#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",
sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}"},
Oh={common:{diffuse:{value:new Cd(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new pd},uv2Transform:{value:new pd},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},
bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new tg(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:2.5E-4},fogNear:{value:1},fogFar:{value:2E3},fogColor:{value:new Cd(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],
properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],
properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Cd(16777215)},opacity:{value:1},
size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new pd}},sprite:{diffuse:{value:new Cd(16777215)},opacity:{value:1},center:{value:new tg(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new pd}}},ym={basic:{uniforms:eb([Oh.common,Oh.specularmap,Oh.envmap,Oh.aomap,Oh.lightmap,Oh.fog]),vertexShader:zj.meshbasic_vert,fragmentShader:zj.meshbasic_frag},lambert:{uniforms:eb([Oh.common,Oh.specularmap,
Oh.envmap,Oh.aomap,Oh.lightmap,Oh.emissivemap,Oh.fog,Oh.lights,{emissive:{value:new Cd(0)}}]),vertexShader:zj.meshlambert_vert,fragmentShader:zj.meshlambert_frag},phong:{uniforms:eb([Oh.common,Oh.specularmap,Oh.envmap,Oh.aomap,Oh.lightmap,Oh.emissivemap,Oh.bumpmap,Oh.normalmap,Oh.displacementmap,Oh.fog,Oh.lights,{emissive:{value:new Cd(0)},specular:{value:new Cd(1118481)},shininess:{value:30}}]),vertexShader:zj.meshphong_vert,fragmentShader:zj.meshphong_frag},standard:{uniforms:eb([Oh.common,Oh.envmap,
Oh.aomap,Oh.lightmap,Oh.emissivemap,Oh.bumpmap,Oh.normalmap,Oh.displacementmap,Oh.roughnessmap,Oh.metalnessmap,Oh.fog,Oh.lights,{emissive:{value:new Cd(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:zj.meshphysical_vert,fragmentShader:zj.meshphysical_frag},toon:{uniforms:eb([Oh.common,Oh.aomap,Oh.lightmap,Oh.emissivemap,Oh.bumpmap,Oh.normalmap,Oh.displacementmap,Oh.gradientmap,Oh.fog,Oh.lights,{emissive:{value:new Cd(0)}}]),vertexShader:zj.meshtoon_vert,fragmentShader:zj.meshtoon_frag},
matcap:{uniforms:eb([Oh.common,Oh.bumpmap,Oh.normalmap,Oh.displacementmap,Oh.fog,{matcap:{value:null}}]),vertexShader:zj.meshmatcap_vert,fragmentShader:zj.meshmatcap_frag},points:{uniforms:eb([Oh.points,Oh.fog]),vertexShader:zj.points_vert,fragmentShader:zj.points_frag},dashed:{uniforms:eb([Oh.common,Oh.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:zj.linedashed_vert,fragmentShader:zj.linedashed_frag},depth:{uniforms:eb([Oh.common,Oh.displacementmap]),vertexShader:zj.depth_vert,
fragmentShader:zj.depth_frag},normal:{uniforms:eb([Oh.common,Oh.bumpmap,Oh.normalmap,Oh.displacementmap,{opacity:{value:1}}]),vertexShader:zj.meshnormal_vert,fragmentShader:zj.meshnormal_frag},sprite:{uniforms:eb([Oh.sprite,Oh.fog]),vertexShader:zj.sprite_vert,fragmentShader:zj.sprite_frag},background:{uniforms:{uvTransform:{value:new pd},t2D:{value:null}},vertexShader:zj.background_vert,fragmentShader:zj.background_frag},cube:{uniforms:eb([Oh.envmap,{opacity:{value:1}}]),vertexShader:zj.cube_vert,
fragmentShader:zj.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:zj.equirect_vert,fragmentShader:zj.equirect_frag},distanceRGBA:{uniforms:eb([Oh.common,Oh.displacementmap,{referencePosition:{value:new Tb},nearDistance:{value:1},farDistance:{value:1E3}}]),vertexShader:zj.distanceRGBA_vert,fragmentShader:zj.distanceRGBA_frag},shadow:{uniforms:eb([Oh.lights,Oh.fog,{color:{value:new Cd(0)},opacity:{value:1}}]),vertexShader:zj.shadow_vert,fragmentShader:zj.shadow_frag}};ym.physical=
{uniforms:eb([ym.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new tg(1,1)},clearcoatNormalMap:{value:null},iridescence:{value:0},iridescenceMap:{value:null},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},sheen:{value:0},sheenColor:{value:new Cd(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},
sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new tg},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new Cd(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new Cd(1,1,1)},specularColorMap:{value:null}}]),vertexShader:zj.meshphysical_vert,fragmentShader:zj.meshphysical_frag};class qn extends yo{constructor(t=
-1,A=1,F=1,Q=-1,X=.1,bb=2E3){super();this.isOrthographicCamera=!0;this.type="OrthographicCamera";this.zoom=1;this.view=null;this.left=t;this.right=A;this.top=F;this.bottom=Q;this.near=X;this.far=bb;this.updateProjectionMatrix()}copy(t,A){super.copy(t,A);this.left=t.left;this.right=t.right;this.top=t.top;this.bottom=t.bottom;this.near=t.near;this.far=t.far;this.zoom=t.zoom;this.view=null===t.view?null:Object.assign({},t.view);return this}setViewOffset(t,A,F,Q,X,bb){null===this.view&&(this.view={enabled:!0,
fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1});this.view.enabled=!0;this.view.fullWidth=t;this.view.fullHeight=A;this.view.offsetX=F;this.view.offsetY=Q;this.view.width=X;this.view.height=bb;this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1);this.updateProjectionMatrix()}updateProjectionMatrix(){var t=(this.right-this.left)/(2*this.zoom),A=(this.top-this.bottom)/(2*this.zoom),F=(this.right+this.left)/2,Q=(this.top+this.bottom)/2;let X=F-t;F+=
t;t=Q+A;A=Q-A;null!==this.view&&this.view.enabled&&(Q=(this.right-this.left)/this.view.fullWidth/this.zoom,A=(this.top-this.bottom)/this.view.fullHeight/this.zoom,X+=Q*this.view.offsetX,F=X+Q*this.view.width,t-=A*this.view.offsetY,A=t-A*this.view.height);this.projectionMatrix.makeOrthographic(X,F,t,A,this.near,this.far);this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){t=super.toJSON(t);t.object.zoom=this.zoom;t.object.left=this.left;t.object.right=this.right;t.object.top=
this.top;t.object.bottom=this.bottom;t.object.near=this.near;t.object.far=this.far;null!==this.view&&(t.object.view=Object.assign({},this.view));return t}}const pp=[.125,.215,.35,.446,.526,.582],qj=new qn,Mm=new Cd;let Ao=null;const Nm=(1+Math.sqrt(5))/2,Om=1/Nm,co=[new Tb(1,1,1),new Tb(-1,1,1),new Tb(1,1,-1),new Tb(-1,1,-1),new Tb(0,Nm,Om),new Tb(0,Nm,-Om),new Tb(Om,0,Nm),new Tb(-Om,0,Nm),new Tb(Nm,Om,0),new Tb(-Nm,Om,0)];class qp{constructor(t){this._renderer=t;this._pingPongRenderTarget=null;this._cubeSize=
this._lodMax=0;this._lodPlanes=[];this._sizeLods=[];this._sigmas=[];this._equirectMaterial=this._cubemapMaterial=this._blurMaterial=null;this._compileMaterial(this._blurMaterial)}fromScene(t,A=0,F=.1,Q=100){Ao=this._renderer.getRenderTarget();this._setSize(256);const X=this._allocateTargets();X.depthBuffer=!0;this._sceneToCubeUV(t,F,Q,X);0<A&&this._blur(X,0,0,A);this._applyPMREM(X);this._cleanup(X);return X}fromEquirectangular(t,A=null){return this._fromTexture(t,A)}fromCubemap(t,A=null){return this._fromTexture(t,
A)}compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=M(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=Fa(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose();null!==this._cubemapMaterial&&this._cubemapMaterial.dispose();null!==this._equirectMaterial&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t));this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==
this._blurMaterial&&this._blurMaterial.dispose();null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(Ao);t.scissorTest=!1;va(t,0,0,t.width,t.height)}_fromTexture(t,A){301===t.mapping||302===t.mapping?this._setSize(0===t.image.length?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4);Ao=this._renderer.getRenderTarget();A=A||this._allocateTargets();
this._textureToCubeUV(t,A);this._applyPMREM(A);this._cleanup(A);return A}_allocateTargets(){var t=3*Math.max(this._cubeSize,112);const A=4*this._cubeSize;var F={magFilter:1006,minFilter:1006,generateMipmaps:!1,type:1016,format:1023,encoding:3E3,depthBuffer:!1};const Q=ka(t,A,F);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==t){null!==this._pingPongRenderTarget&&this._dispose();this._pingPongRenderTarget=ka(t,A,F);({_lodMax:F}=this);{var X=F;var bb=[];const Lc=[],wd=[];let le=
X;const je=X-4+1+pp.length;for(let pe=0;pe<je;pe++){var Wa=Math.pow(2,le);Lc.push(Wa);var Ab=1/Wa;pe>X-4?Ab=pp[pe-X+4-1]:0===pe&&(Ab=0);wd.push(Ab);Ab=1/(Wa-2);Wa=-Ab;Ab=1+Ab;var fc=[Wa,Wa,Ab,Wa,Ab,Ab,Wa,Wa,Ab,Ab,Wa,Ab];Wa=new Float32Array(108);Ab=new Float32Array(72);const qe=new Float32Array(36);for(let nc=0;6>nc;nc++){const Ke=nc%3*2/3-1,$f=2<nc?0:-1;Wa.set([Ke,$f,0,Ke+2/3,$f,0,Ke+2/3,$f+1,0,Ke,$f,0,Ke+2/3,$f+1,0,Ke,$f+1,0],18*nc);Ab.set(fc,12*nc);qe.set([nc,nc,nc,nc,nc,nc],6*nc)}fc=new Gf;fc.setAttribute("position",
new gg(Wa,3));fc.setAttribute("uv",new gg(Ab,2));fc.setAttribute("faceIndex",new gg(qe,1));bb.push(fc);4<le&&le--}X={lodPlanes:bb,sizeLods:Lc,sigmas:wd}}({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=X);X=new Float32Array(20);bb=new Tb(0,1,0);this._blurMaterial=t=new lm({name:"SphericalGaussianBlur",defines:{n:20,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/A,CUBEUV_MAX_MIP:`${F}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:X},latitudinal:{value:!1},
dTheta:{value:0},mipInt:{value:0},poleAxis:{value:bb}},vertexShader:Aa(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",
blending:0,depthTest:!1,depthWrite:!1})}return Q}_compileMaterial(t){t=new Nl(this._lodPlanes[0],t);this._renderer.compile(t,qj)}_sceneToCubeUV(t,A,F,Q){A=new Fl(90,1,A,F);F=[1,-1,1,1,1,1];const X=[1,1,1,-1,-1,-1],bb=this._renderer,Wa=bb.autoClear,Ab=bb.toneMapping;bb.getClearColor(Mm);bb.toneMapping=0;bb.autoClear=!1;var fc=new Hg({name:"PMREM.Background",side:1,depthWrite:!1,depthTest:!1});const Lc=new Nl(new En,fc);let wd=!1;const le=t.background;le?le.isColor&&(fc.color.copy(le),t.background=
null,wd=!0):(fc.color.copy(Mm),wd=!0);for(fc=0;6>fc;fc++){const je=fc%3;0===je?(A.up.set(0,F[fc],0),A.lookAt(X[fc],0,0)):1===je?(A.up.set(0,0,F[fc]),A.lookAt(0,X[fc],0)):(A.up.set(0,F[fc],0),A.lookAt(0,0,X[fc]));const pe=this._cubeSize;va(Q,je*pe,2<fc?pe:0,pe,pe);bb.setRenderTarget(Q);wd&&bb.render(Lc,A);bb.render(t,A)}Lc.geometry.dispose();Lc.material.dispose();bb.toneMapping=Ab;bb.autoClear=Wa;t.background=le}_textureToCubeUV(t,A){const F=this._renderer;var Q=301===t.mapping||302===t.mapping;Q?
(null===this._cubemapMaterial&&(this._cubemapMaterial=M()),this._cubemapMaterial.uniforms.flipEnvMap.value=!1===t.isRenderTargetTexture?-1:1):null===this._equirectMaterial&&(this._equirectMaterial=Fa());const X=Q?this._cubemapMaterial:this._equirectMaterial;Q=new Nl(this._lodPlanes[0],X);X.uniforms.envMap.value=t;t=this._cubeSize;va(A,0,0,3*t,2*t);F.setRenderTarget(A);F.render(Q,qj)}_applyPMREM(t){const A=this._renderer,F=A.autoClear;A.autoClear=!1;for(let Q=1;Q<this._lodPlanes.length;Q++)this._blur(t,
Q-1,Q,Math.sqrt(this._sigmas[Q]*this._sigmas[Q]-this._sigmas[Q-1]*this._sigmas[Q-1]),co[(Q-1)%co.length]);A.autoClear=F}_blur(t,A,F,Q,X){const bb=this._pingPongRenderTarget;this._halfBlur(t,bb,A,F,Q,"latitudinal",X);this._halfBlur(bb,t,F,F,Q,"longitudinal",X)}_halfBlur(t,A,F,Q,X,bb,Wa){const Ab=this._renderer;var fc=this._blurMaterial;"latitudinal"!==bb&&"longitudinal"!==bb&&console.error("blur direction must be either latitudinal or longitudinal!");const Lc=new Nl(this._lodPlanes[Q],fc);fc=fc.uniforms;
var wd=this._sizeLods[F]-1;wd=isFinite(X)?Math.PI/(2*wd):2*Math.PI/39;var le=X/wd;const je=isFinite(X)?1+Math.floor(3*le):20;20<je&&console.warn(`sigmaRadians, ${X}, is too large and will clip, as it requested ${je} samples when the maximum is set to ${20}`);X=[];let pe=0;for(let nc=0;20>nc;++nc){var qe=nc/le;qe=Math.exp(-qe*qe/2);X.push(qe);0===nc?pe+=qe:nc<je&&(pe+=2*qe)}for(le=0;le<X.length;le++)X[le]/=pe;fc.envMap.value=t.texture;fc.samples.value=je;fc.weights.value=X;fc.latitudinal.value="latitudinal"===
bb;Wa&&(fc.poleAxis.value=Wa);({_lodMax:t}=this);fc.dTheta.value=wd;fc.mipInt.value=t-F;F=this._sizeLods[Q];va(A,3*F*(Q>t-4?Q-t+4:0),4*(this._cubeSize-F),3*F,2*F);Ab.setRenderTarget(A);Ab.render(Lc,qj)}}const rp=new Pf,sp=new v,Bo=new oa,tp=new mp,rn=[],up=[],sn=new Float32Array(16),vp=new Float32Array(9),Gn=new Float32Array(4);class Hn{constructor(t,A,F){this.id=t;this.addr=F;this.cache=[];this.setValue=Le(A.type)}}class Zm{constructor(t,A,F){this.id=t;this.addr=F;this.cache=[];this.size=A.size;
this.setValue=Uf(A.type)}}class wp{constructor(t){this.id=t;this.seq=[];this.map={}}setValue(t,A,F){const Q=this.seq;for(let X=0,bb=Q.length;X!==bb;++X){const Wa=Q[X];Wa.setValue(t,A[Wa.id],F)}}}const eo=/(\w+)(\])?(\[|\.)?/g;class In{constructor(t,A){this.seq=[];this.map={};const F=t.getProgramParameter(A,35718);for(let Lc=0;Lc<F;++Lc){var Q=t.getActiveUniform(A,Lc),X=t.getUniformLocation(A,Q.name);{var bb=this,Wa=Q.name;const wd=Wa.length;for(eo.lastIndex=0;;){const le=eo.exec(Wa),je=eo.lastIndex;
var Ab=le[1],fc=le[3];"]"===le[2]&&(Ab|=0);if(void 0===fc||"["===fc&&je+2===wd){Wa=bb;Q=void 0===fc?new Hn(Ab,Q,X):new Zm(Ab,Q,X);Wa.seq.push(Q);Wa.map[Q.id]=Q;break}else fc=bb.map[Ab],void 0===fc&&(fc=new wp(Ab),Ab=bb,bb=fc,Ab.seq.push(bb),Ab.map[bb.id]=bb),bb=fc}}}}setValue(t,A,F,Q){A=this.map[A];void 0!==A&&A.setValue(t,F,Q)}setOptional(t,A,F){A=A[F];void 0!==A&&this.setValue(t,F,A)}static upload(t,A,F,Q){for(let X=0,bb=A.length;X!==bb;++X){const Wa=A[X],Ab=F[Wa.id];!1!==Ab.needsUpdate&&Wa.setValue(t,
Ab.value,Q)}}static seqWithValue(t,A){const F=[];for(let Q=0,X=t.length;Q!==X;++Q){const bb=t[Q];bb.id in A&&F.push(bb)}return F}}let nq=0;const Jn=/^[ \t]*#include +<([\w\d./]+)>/gm,xp=/#pragma unroll_loop[\s]+?for \( int i = (\d+); i < (\d+); i \+\+ \) \{([\s\S]+?)(?=\})\}/g,Kn=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;let Do=0;class Eo{constructor(){this.shaderCache=new Map;this.materialCache=new Map}update(t){var A=
t.fragmentShader;const F=this._getShaderStage(t.vertexShader);A=this._getShaderStage(A);t=this._getShaderCacheForMaterial(t);!1===t.has(F)&&(t.add(F),F.usedTimes++);!1===t.has(A)&&(t.add(A),A.usedTimes++);return this}remove(t){const A=this.materialCache.get(t);for(const F of A)F.usedTimes--,0===F.usedTimes&&this.shaderCache.delete(F.code);this.materialCache.delete(t);return this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear();
this.materialCache.clear()}_getShaderCacheForMaterial(t){const A=this.materialCache;!1===A.has(t)&&A.set(t,new Set);return A.get(t)}_getShaderStage(t){const A=this.shaderCache;if(!1===A.has(t)){const F=new oq(t);A.set(t,F)}return A.get(t)}}class oq{constructor(t){this.id=Do++;this.code=t;this.usedTimes=0}}let Bc=0;class Gc extends Rf{constructor(t){super();this.isMeshDepthMaterial=!0;this.type="MeshDepthMaterial";this.depthPacking=3200;this.displacementMap=this.alphaMap=this.map=null;this.displacementScale=
1;this.displacementBias=0;this.wireframe=!1;this.wireframeLinewidth=1;this.setValues(t)}copy(t){super.copy(t);this.depthPacking=t.depthPacking;this.map=t.map;this.alphaMap=t.alphaMap;this.displacementMap=t.displacementMap;this.displacementScale=t.displacementScale;this.displacementBias=t.displacementBias;this.wireframe=t.wireframe;this.wireframeLinewidth=t.wireframeLinewidth;return this}}class ed extends Rf{constructor(t){super();this.isMeshDistanceMaterial=!0;this.type="MeshDistanceMaterial";this.referencePosition=
new Tb;this.nearDistance=1;this.farDistance=1E3;this.displacementMap=this.alphaMap=this.map=null;this.displacementScale=1;this.displacementBias=0;this.setValues(t)}copy(t){super.copy(t);this.referencePosition.copy(t.referencePosition);this.nearDistance=t.nearDistance;this.farDistance=t.farDistance;this.map=t.map;this.alphaMap=t.alphaMap;this.displacementMap=t.displacementMap;this.displacementScale=t.displacementScale;this.displacementBias=t.displacementBias;return this}}class Nc extends Fl{constructor(t=
[]){super();this.isArrayCamera=!0;this.cameras=t}}class Hc extends jb{constructor(){super();this.isGroup=!0;this.type="Group"}}const Jd={type:"move"};class De{constructor(){this._hand=this._grip=this._targetRay=null}getHandSpace(){null===this._hand&&(this._hand=new Hc,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1});return this._hand}getTargetRaySpace(){null===this._targetRay&&(this._targetRay=new Hc,this._targetRay.matrixAutoUpdate=!1,
this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new Tb,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new Tb);return this._targetRay}getGripSpace(){null===this._grip&&(this._grip=new Hc,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new Tb,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new Tb);return this._grip}dispatchEvent(t){null!==this._targetRay&&
this._targetRay.dispatchEvent(t);null!==this._grip&&this._grip.dispatchEvent(t);null!==this._hand&&this._hand.dispatchEvent(t);return this}disconnect(t){this.dispatchEvent({type:"disconnected",data:t});null!==this._targetRay&&(this._targetRay.visible=!1);null!==this._grip&&(this._grip.visible=!1);null!==this._hand&&(this._hand.visible=!1);return this}update(t,A,F){let Q=null,X=null,bb=null;const Wa=this._targetRay,Ab=this._grip,fc=this._hand;if(t&&"visible-blurred"!==A.session.visibilityState){if(fc&&
t.hand){bb=!0;for(var Lc of t.hand.values()){const le=A.getJointPose(Lc,F);if(void 0===fc.joints[Lc.jointName]){var wd=new Hc;wd.matrixAutoUpdate=!1;wd.visible=!1;fc.joints[Lc.jointName]=wd;fc.add(wd)}wd=fc.joints[Lc.jointName];null!==le&&(wd.matrix.fromArray(le.transform.matrix),wd.matrix.decompose(wd.position,wd.rotation,wd.scale),wd.jointRadius=le.radius);wd.visible=null!==le}Lc=fc.joints["index-finger-tip"].position.distanceTo(fc.joints["thumb-tip"].position);fc.inputState.pinching&&.025<Lc?(fc.inputState.pinching=
!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!fc.inputState.pinching&&.015>=Lc&&(fc.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else null!==Ab&&t.gripSpace&&(X=A.getPose(t.gripSpace,F),null!==X&&(Ab.matrix.fromArray(X.transform.matrix),Ab.matrix.decompose(Ab.position,Ab.rotation,Ab.scale),X.linearVelocity?(Ab.hasLinearVelocity=!0,Ab.linearVelocity.copy(X.linearVelocity)):Ab.hasLinearVelocity=!1,X.angularVelocity?
(Ab.hasAngularVelocity=!0,Ab.angularVelocity.copy(X.angularVelocity)):Ab.hasAngularVelocity=!1));null!==Wa&&(Q=A.getPose(t.targetRaySpace,F),null===Q&&null!==X&&(Q=X),null!==Q&&(Wa.matrix.fromArray(Q.transform.matrix),Wa.matrix.decompose(Wa.position,Wa.rotation,Wa.scale),Q.linearVelocity?(Wa.hasLinearVelocity=!0,Wa.linearVelocity.copy(Q.linearVelocity)):Wa.hasLinearVelocity=!1,Q.angularVelocity?(Wa.hasAngularVelocity=!0,Wa.angularVelocity.copy(Q.angularVelocity)):Wa.hasAngularVelocity=!1,this.dispatchEvent(Jd)))}null!==
Wa&&(Wa.visible=null!==Q);null!==Ab&&(Ab.visible=null!==X);null!==fc&&(fc.visible=null!==bb);return this}}class df extends Pf{constructor(t,A,F,Q,X,bb,Wa,Ab,fc,Lc){Lc=void 0!==Lc?Lc:1026;if(1026!==Lc&&1027!==Lc)throw Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===F&&1026===Lc&&(F=1014);void 0===F&&1027===Lc&&(F=1020);super(null,Q,X,bb,Wa,Ab,Lc,F,fc);this.isDepthTexture=!0;this.image={width:t,height:A};this.magFilter=void 0!==Wa?Wa:1003;this.minFilter=
void 0!==Ab?Ab:1003;this.generateMipmaps=this.flipY=!1}}class uf extends hf{constructor(t,A){function F(Pg){var ah=Hf.indexOf(Pg.inputSource);-1!==ah&&(ah=Jf[ah],void 0!==ah&&ah.dispatchEvent({type:Pg.type,data:Pg.inputSource}))}function Q(){Ab.removeEventListener("select",F);Ab.removeEventListener("selectstart",F);Ab.removeEventListener("selectend",F);Ab.removeEventListener("squeeze",F);Ab.removeEventListener("squeezestart",F);Ab.removeEventListener("squeezeend",F);Ab.removeEventListener("end",Q);
Ab.removeEventListener("inputsourceschange",X);for(let Pg=0;Pg<Jf.length;Pg++){const ah=Hf[Pg];null!==ah&&(Hf[Pg]=null,Jf[Pg].disconnect(ah))}zg=Qe=null;t.setRenderTarget(Te);ug=Ab=pe=qe=nc=null;jh.stop();Wa.isPresenting=!1;Wa.dispatchEvent({type:"sessionend"})}function X(Pg){for(var ah=0;ah<Pg.removed.length;ah++){var nh=Pg.removed[ah],Fi=Hf.indexOf(nh);0<=Fi&&(Hf[Fi]=null,Jf[Fi].dispatchEvent({type:"disconnected",data:nh}))}for(ah=0;ah<Pg.added.length;ah++){nh=Pg.added[ah];Fi=Hf.indexOf(nh);if(-1===
Fi){for(let vi=0;vi<Jf.length;vi++)if(vi>=Hf.length){Hf.push(nh);Fi=vi;break}else if(null===Hf[vi]){Hf[vi]=nh;Fi=vi;break}if(-1===Fi)break}(Fi=Jf[Fi])&&Fi.dispatchEvent({type:"connected",data:nh})}}function bb(Pg,ah){null===ah?Pg.matrixWorld.copy(Pg.matrix):Pg.matrixWorld.multiplyMatrices(ah.matrixWorld,Pg.matrix);Pg.matrixWorldInverse.copy(Pg.matrixWorld).invert()}super();const Wa=this;let Ab=null,fc=1,Lc=null,wd="local-floor",le=null,je=null,pe=null,qe=null,nc=null,Ke=null;const $f=A.getContextAttributes();
let Te=null,ug=null;const Jf=[],Hf=[],Ig=new Fl;Ig.layers.enable(1);Ig.viewport=new eg;const Tg=new Fl;Tg.layers.enable(2);Tg.viewport=new eg;const Lf=[Ig,Tg],yf=new Nc;yf.layers.enable(1);yf.layers.enable(2);let Qe=null,zg=null;this.cameraAutoUpdate=!0;this.isPresenting=this.enabled=!1;this.getController=function(Pg){let ah=Jf[Pg];void 0===ah&&(ah=new De,Jf[Pg]=ah);return ah.getTargetRaySpace()};this.getControllerGrip=function(Pg){let ah=Jf[Pg];void 0===ah&&(ah=new De,Jf[Pg]=ah);return ah.getGripSpace()};
this.getHand=function(Pg){let ah=Jf[Pg];void 0===ah&&(ah=new De,Jf[Pg]=ah);return ah.getHandSpace()};this.setFramebufferScaleFactor=function(Pg){fc=Pg;!0===Wa.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")};this.setReferenceSpaceType=function(Pg){wd=Pg;!0===Wa.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")};this.getReferenceSpace=function(){return le||Lc};this.setReferenceSpace=function(Pg){le=
Pg};this.getBaseLayer=function(){return null!==qe?qe:nc};this.getBinding=function(){return pe};this.getFrame=function(){return Ke};this.getSession=function(){return Ab};this.setSession=async function(Pg){Ab=Pg;if(null!==Ab){Te=t.getRenderTarget();Ab.addEventListener("select",F);Ab.addEventListener("selectstart",F);Ab.addEventListener("selectend",F);Ab.addEventListener("squeeze",F);Ab.addEventListener("squeezestart",F);Ab.addEventListener("squeezeend",F);Ab.addEventListener("end",Q);Ab.addEventListener("inputsourceschange",
X);!0!==$f.xrCompatible&&await A.makeXRCompatible();if(void 0===Ab.renderState.layers||!1===t.capabilities.isWebGL2)nc=new XRWebGLLayer(Ab,A,{antialias:void 0===Ab.renderState.layers?$f.antialias:!0,alpha:$f.alpha,depth:$f.depth,stencil:$f.stencil,framebufferScaleFactor:fc}),Ab.updateRenderState({baseLayer:nc}),ug=new be(nc.framebufferWidth,nc.framebufferHeight,{format:1023,type:1009,encoding:t.outputEncoding});else{let nh=Pg=null;var ah=null;$f.depth&&(ah=$f.stencil?35056:33190,Pg=$f.stencil?1027:
1026,nh=$f.stencil?1020:1014);ah={colorFormat:32856,depthFormat:ah,scaleFactor:fc};pe=new XRWebGLBinding(Ab,A);qe=pe.createProjectionLayer(ah);Ab.updateRenderState({layers:[qe]});ug=new be(qe.textureWidth,qe.textureHeight,{format:1023,type:1009,depthTexture:new df(qe.textureWidth,qe.textureHeight,nh,void 0,void 0,void 0,void 0,void 0,void 0,Pg),stencilBuffer:$f.stencil,encoding:t.outputEncoding,samples:$f.antialias?4:0});t.properties.get(ug).__ignoreDepthValues=qe.ignoreDepthValues}ug.isXRRenderTarget=
!0;this.setFoveation(1);le=null;Lc=await Ab.requestReferenceSpace(wd);jh.setContext(Ab);jh.start();Wa.isPresenting=!0;Wa.dispatchEvent({type:"sessionstart"})}};const Dh=new Tb,Jg=new Tb;this.updateCamera=function(Pg){if(null!==Ab){yf.near=Tg.near=Ig.near=Pg.near;yf.far=Tg.far=Ig.far=Pg.far;if(Qe!==yf.near||zg!==yf.far)Ab.updateRenderState({depthNear:yf.near,depthFar:yf.far}),Qe=yf.near,zg=yf.far;var ah=Pg.parent,nh=yf.cameras;bb(yf,ah);for(var Fi=0;Fi<nh.length;Fi++)bb(nh[Fi],ah);yf.matrixWorld.decompose(yf.position,
yf.quaternion,yf.scale);Pg.position.copy(yf.position);Pg.quaternion.copy(yf.quaternion);Pg.scale.copy(yf.scale);Pg.matrix.copy(yf.matrix);Pg.matrixWorld.copy(yf.matrixWorld);Pg=Pg.children;for(let Ec=0,If=Pg.length;Ec<If;Ec++)Pg[Ec].updateMatrixWorld(!0);if(2===nh.length){Dh.setFromMatrixPosition(Ig.matrixWorld);Jg.setFromMatrixPosition(Tg.matrixWorld);nh=Dh.distanceTo(Jg);var vi=Ig.projectionMatrix.elements,Bj=Tg.projectionMatrix.elements,lj=vi[14]/(vi[10]-1);Pg=vi[14]/(vi[10]+1);ah=(vi[9]+1)/vi[5];
Fi=(vi[9]-1)/vi[5];var sj=(vi[8]-1)/vi[0],Qd=(Bj[8]+1)/Bj[0];Bj=lj*sj;vi=lj*Qd;Qd=nh/(-sj+Qd);sj=Qd*-sj;Ig.matrixWorld.decompose(yf.position,yf.quaternion,yf.scale);yf.translateX(sj);yf.translateZ(Qd);yf.matrixWorld.compose(yf.position,yf.quaternion,yf.scale);yf.matrixWorldInverse.copy(yf.matrixWorld).invert();lj+=Qd;Qd=Pg+Qd;yf.projectionMatrix.makePerspective(Bj-sj,vi+(nh-sj),ah*Pg/Qd*lj,Fi*Pg/Qd*lj,lj,Qd)}else yf.projectionMatrix.copy(Ig.projectionMatrix)}};this.getCamera=function(){return yf};
this.getFoveation=function(){if(null!==qe)return qe.fixedFoveation;if(null!==nc)return nc.fixedFoveation};this.setFoveation=function(Pg){null!==qe&&(qe.fixedFoveation=Pg);null!==nc&&void 0!==nc.fixedFoveation&&(nc.fixedFoveation=Pg)};let zh=null;const jh=new kc;jh.setAnimationLoop(function(Pg,ah){je=ah.getViewerPose(le||Lc);Ke=ah;if(null!==je){var nh=je.views;null!==nc&&(t.setRenderTargetFramebuffer(ug,nc.framebuffer),t.setRenderTarget(ug));var Fi=!1;nh.length!==yf.cameras.length&&(yf.cameras.length=
0,Fi=!0);for(var vi=0;vi<nh.length;vi++){const lj=nh[vi];let sj;if(null!==nc)sj=nc.getViewport(lj);else{var Bj=pe.getViewSubImage(qe,lj);sj=Bj.viewport;0===vi&&(t.setRenderTargetTextures(ug,Bj.colorTexture,qe.ignoreDepthValues?void 0:Bj.depthStencilTexture),t.setRenderTarget(ug))}Bj=Lf[vi];void 0===Bj&&(Bj=new Fl,Bj.layers.enable(vi),Bj.viewport=new eg,Lf[vi]=Bj);Bj.matrix.fromArray(lj.transform.matrix);Bj.projectionMatrix.fromArray(lj.projectionMatrix);Bj.viewport.set(sj.x,sj.y,sj.width,sj.height);
0===vi&&yf.matrix.copy(Bj.matrix);!0===Fi&&yf.cameras.push(Bj)}}for(nh=0;nh<Jf.length;nh++)Fi=Hf[nh],vi=Jf[nh],null!==Fi&&void 0!==vi&&vi.update(Fi,ah,le||Lc);zh&&zh(Pg,ah);Ke=null});this.setAnimationLoop=function(Pg){zh=Pg};this.dispose=function(){}}}class Yf extends jb{constructor(){super();this.isScene=!0;this.type="Scene";this.overrideMaterial=this.fog=this.environment=this.background=null;this.autoUpdate=!0;"undefined"!==typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",
{detail:this}))}copy(t,A){super.copy(t,A);null!==t.background&&(this.background=t.background.clone());null!==t.environment&&(this.environment=t.environment.clone());null!==t.fog&&(this.fog=t.fog.clone());null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone());this.autoUpdate=t.autoUpdate;this.matrixAutoUpdate=t.matrixAutoUpdate;return this}toJSON(t){t=super.toJSON(t);null!==this.fog&&(t.object.fog=this.fog.toJSON());return t}}class Ch extends Gf{constructor(t=1,A=32,F=16,Q=0,
X=2*Math.PI,bb=0,Wa=Math.PI){super();this.type="SphereGeometry";this.parameters={radius:t,widthSegments:A,heightSegments:F,phiStart:Q,phiLength:X,thetaStart:bb,thetaLength:Wa};A=Math.max(3,Math.floor(A));F=Math.max(2,Math.floor(F));const Ab=Math.min(bb+Wa,Math.PI);var fc=0;const Lc=[];var wd=new Tb;const le=new Tb,je=[],pe=[],qe=[],nc=[];for(let Ke=0;Ke<=F;Ke++){const $f=[],Te=Ke/F;let ug=0;0==Ke&&0==bb?ug=.5/A:Ke==F&&Ab==Math.PI&&(ug=-.5/A);for(let Jf=0;Jf<=A;Jf++){const Hf=Jf/A;wd.x=-t*Math.cos(Q+
Hf*X)*Math.sin(bb+Te*Wa);wd.y=t*Math.cos(bb+Te*Wa);wd.z=t*Math.sin(Q+Hf*X)*Math.sin(bb+Te*Wa);pe.push(wd.x,wd.y,wd.z);le.copy(wd).normalize();qe.push(le.x,le.y,le.z);nc.push(Hf+ug,1-Te);$f.push(fc++)}Lc.push($f)}for(t=0;t<F;t++)for(Q=0;Q<A;Q++)X=Lc[t][Q+1],Wa=Lc[t][Q],fc=Lc[t+1][Q],wd=Lc[t+1][Q+1],(0!==t||0<bb)&&je.push(X,Wa,wd),(t!==F-1||Ab<Math.PI)&&je.push(Wa,fc,wd);this.setIndex(je);this.setAttribute("position",new xh(pe,3));this.setAttribute("normal",new xh(qe,3));this.setAttribute("uv",new xh(nc,
2))}static fromJSON(t){return new Ch(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}class Fh extends Rf{constructor(t){super();this.isMeshPhongMaterial=!0;this.type="MeshPhongMaterial";this.color=new Cd(16777215);this.specular=new Cd(1118481);this.shininess=30;this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new Cd(0);this.emissiveIntensity=1;this.bumpMap=this.emissiveMap=null;this.bumpScale=1;this.normalMap=
null;this.normalMapType=0;this.normalScale=new tg(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.envMap=this.alphaMap=this.specularMap=null;this.combine=0;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.flatShading=!1;this.fog=!0;this.setValues(t)}copy(t){super.copy(t);this.color.copy(t.color);this.specular.copy(t.specular);this.shininess=t.shininess;this.map=t.map;
this.lightMap=t.lightMap;this.lightMapIntensity=t.lightMapIntensity;this.aoMap=t.aoMap;this.aoMapIntensity=t.aoMapIntensity;this.emissive.copy(t.emissive);this.emissiveMap=t.emissiveMap;this.emissiveIntensity=t.emissiveIntensity;this.bumpMap=t.bumpMap;this.bumpScale=t.bumpScale;this.normalMap=t.normalMap;this.normalMapType=t.normalMapType;this.normalScale.copy(t.normalScale);this.displacementMap=t.displacementMap;this.displacementScale=t.displacementScale;this.displacementBias=t.displacementBias;
this.specularMap=t.specularMap;this.alphaMap=t.alphaMap;this.envMap=t.envMap;this.combine=t.combine;this.reflectivity=t.reflectivity;this.refractionRatio=t.refractionRatio;this.wireframe=t.wireframe;this.wireframeLinewidth=t.wireframeLinewidth;this.wireframeLinecap=t.wireframeLinecap;this.wireframeLinejoin=t.wireframeLinejoin;this.flatShading=t.flatShading;this.fog=t.fog;return this}}const oi={enabled:!1,files:{},add:function(t,A){!1!==this.enabled&&(this.files[t]=A)},get:function(t){if(!1!==this.enabled)return this.files[t]},
remove:function(t){delete this.files[t]},clear:function(){this.files={}}};class Ri{constructor(t,A,F){const Q=this;let X=!1,bb=0,Wa=0,Ab=void 0;const fc=[];this.onStart=void 0;this.onLoad=t;this.onProgress=A;this.onError=F;this.itemStart=function(Lc){Wa++;if(!1===X&&void 0!==Q.onStart)Q.onStart(Lc,bb,Wa);X=!0};this.itemEnd=function(Lc){bb++;if(void 0!==Q.onProgress)Q.onProgress(Lc,bb,Wa);if(bb===Wa&&(X=!1,void 0!==Q.onLoad))Q.onLoad()};this.itemError=function(Lc){if(void 0!==Q.onError)Q.onError(Lc)};
this.resolveURL=function(Lc){return Ab?Ab(Lc):Lc};this.setURLModifier=function(Lc){Ab=Lc;return this};this.addHandler=function(Lc,wd){fc.push(Lc,wd);return this};this.removeHandler=function(Lc){Lc=fc.indexOf(Lc);-1!==Lc&&fc.splice(Lc,2);return this};this.getHandler=function(Lc){for(let wd=0,le=fc.length;wd<le;wd+=2){const je=fc[wd],pe=fc[wd+1];je.global&&(je.lastIndex=0);if(je.test(Lc))return pe}return null}}}const Th=new Ri;class Ui{constructor(t){this.manager=void 0!==t?t:Th;this.crossOrigin="anonymous";
this.withCredentials=!1;this.resourcePath=this.path="";this.requestHeader={}}load(){}loadAsync(t,A){const F=this;return new Promise(function(Q,X){F.load(t,Q,A,X)})}parse(){}setCrossOrigin(t){this.crossOrigin=t;return this}setWithCredentials(t){this.withCredentials=t;return this}setPath(t){this.path=t;return this}setResourcePath(t){this.resourcePath=t;return this}setRequestHeader(t){this.requestHeader=t;return this}}class Vk extends Ui{constructor(t){super(t)}load(t,A,F,Q){function X(){Wa();oi.add(t,
this);A&&A(this);Ab.manager.itemEnd(t)}function bb(wd){Wa();Q&&Q(wd);Ab.manager.itemError(t);Ab.manager.itemEnd(t)}function Wa(){Lc.removeEventListener("load",X,!1);Lc.removeEventListener("error",bb,!1)}void 0!==this.path&&(t=this.path+t);t=this.manager.resolveURL(t);const Ab=this,fc=oi.get(t);if(void 0!==fc)return Ab.manager.itemStart(t),setTimeout(function(){A&&A(fc);Ab.manager.itemEnd(t)},0),fc;const Lc=db("img");Lc.addEventListener("load",X,!1);Lc.addEventListener("error",bb,!1);"data:"!==t.slice(0,
5)&&void 0!==this.crossOrigin&&(Lc.crossOrigin=this.crossOrigin);Ab.manager.itemStart(t);Lc.src=t;return Lc}}class Mk extends Ui{constructor(t){super(t)}load(t,A,F,Q){const X=new Pf,bb=new Vk(this.manager);bb.setCrossOrigin(this.crossOrigin);bb.setPath(this.path);bb.load(t,function(Wa){X.image=Wa;X.needsUpdate=!0;void 0!==A&&A(X)},F,Q);return X}}class ok extends jb{constructor(t,A=1){super();this.isLight=!0;this.type="Light";this.color=new Cd(t);this.intensity=A}dispose(){}copy(t,A){super.copy(t,
A);this.color.copy(t.color);this.intensity=t.intensity;return this}toJSON(t){t=super.toJSON(t);t.object.color=this.color.getHex();t.object.intensity=this.intensity;void 0!==this.groundColor&&(t.object.groundColor=this.groundColor.getHex());void 0!==this.distance&&(t.object.distance=this.distance);void 0!==this.angle&&(t.object.angle=this.angle);void 0!==this.decay&&(t.object.decay=this.decay);void 0!==this.penumbra&&(t.object.penumbra=this.penumbra);void 0!==this.shadow&&(t.object.shadow=this.shadow.toJSON());
return t}}const mm=new Ub,Ol=new Tb,$m=new Tb;class Go{constructor(t){this.camera=t;this.normalBias=this.bias=0;this.radius=1;this.blurSamples=8;this.mapSize=new tg(512,512);this.mapPass=this.map=null;this.matrix=new Ub;this.autoUpdate=!0;this.needsUpdate=!1;this._frustum=new zo;this._frameExtents=new tg(1,1);this._viewportCount=1;this._viewports=[new eg(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const A=this.camera,F=this.matrix;Ol.setFromMatrixPosition(t.matrixWorld);
A.position.copy(Ol);$m.setFromMatrixPosition(t.target.matrixWorld);A.lookAt($m);A.updateMatrixWorld();mm.multiplyMatrices(A.projectionMatrix,A.matrixWorldInverse);this._frustum.setFromProjectionMatrix(mm);F.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1);F.multiply(A.projectionMatrix);F.multiply(A.matrixWorldInverse)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose();this.mapPass&&this.mapPass.dispose()}copy(t){this.camera=t.camera.clone();
this.bias=t.bias;this.radius=t.radius;this.mapSize.copy(t.mapSize);return this}clone(){return(new this.constructor).copy(this)}toJSON(){const t={};0!==this.bias&&(t.bias=this.bias);0!==this.normalBias&&(t.normalBias=this.normalBias);1!==this.radius&&(t.radius=this.radius);if(512!==this.mapSize.x||512!==this.mapSize.y)t.mapSize=this.mapSize.toArray();t.camera=this.camera.toJSON(!1).object;delete t.camera.matrix;return t}}class It extends Go{constructor(){super(new Fl(50,1,.5,500));this.isSpotLightShadow=
!0;this.focus=1}updateMatrices(t){const A=this.camera,F=2*vg*t.angle*this.focus,Q=this.mapSize.width/this.mapSize.height,X=t.distance||A.far;if(F!==A.fov||Q!==A.aspect||X!==A.far)A.fov=F,A.aspect=Q,A.far=X,A.updateProjectionMatrix();super.updateMatrices(t)}copy(t){super.copy(t);this.focus=t.focus;return this}}class Yr extends ok{constructor(t,A,F=0,Q=Math.PI/3,X=0,bb=1){super(t,A);this.isSpotLight=!0;this.type="SpotLight";this.position.copy(jb.DefaultUp);this.updateMatrix();this.target=new jb;this.distance=
F;this.angle=Q;this.penumbra=X;this.decay=bb;this.shadow=new It}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t,A){super.copy(t,A);this.distance=t.distance;this.angle=t.angle;this.penumbra=t.penumbra;this.decay=t.decay;this.target=t.target.clone();this.shadow=t.shadow.clone();return this}}class Vq extends ok{constructor(t,A){super(t,A);this.isAmbientLight=!0;this.type="AmbientLight"}}"[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]";
"undefined"!==typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:"143"}}));"undefined"!==typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__="143");var yh=window.lively.FreezerRuntime.recorderFor("lively.freezer/src/landing-page.cp.js");yh.main=Sb;yh.Morph=se;yh.component=Rc;yh.part=ad;yh.easings=Ne;yh.promise=Cb;yh.Color=Sd;yh.pt=ve;yh.WebGLRenderer=function(t={}){function A(Ld,
Ff){for(let Wf=0;Wf<Ld.length;Wf++){const Nf=nc.getContext(Ld[Wf],Ff);if(null!==Nf)return Nf}return null}function F(){Pa=new Na(Ja);Za=new rb(Ja,Pa,t);Pa.init(Za);Uj=new Xf(Ja,Pa,Za);Zb=new pf(Ja,Pa,Za);Vc=new ba;Jc=new E;cd=new ig(Ja,Pa,Zb,Jc,Za,Uj,Vc);sd=new da(Jg);Pe=new wb(Jg);gf=new Vb(Ja,Za);$l=new Nb(Ja,Pa,gf,Za);ag=new hb(Ja,gf,Vc,$l);Af=new Ia(Ja,ag,gf,Vc);Zl=new vb(Ja,Za,cd);Ah=new Ib(Jc);ph=new mb(Jg,sd,Pe,Pa,Za,$l,Ah);Ug=new Vg(Jg,Jc);$i=new $b;rh=new Ce(Pa,Za);tk=new pb(Jg,sd,Zb,Af,Lf,
Jf);hk=new $e(Jg,Af,Za);Wk=new Re(Ja,Vc,Za,Zb);Ph=new zb(Ja,Pa,Vc,Za);vl=new Bb(Ja,Pa,Vc,Za);Vc.programs=ph.programs;Jg.capabilities=Za;Jg.extensions=Pa;Jg.properties=Jc;Jg.renderLists=$i;Jg.shadowMap=hk;Jg.state=Zb;Jg.info=Vc}function Q(Ld){Ld.preventDefault();console.log("THREE.WebGLRenderer: Context Lost.");zh=!0}function X(){console.log("THREE.WebGLRenderer: Context Restored.");zh=!1;const Ld=Vc.autoReset,Ff=hk.enabled,Wf=hk.autoUpdate,Nf=hk.needsUpdate,Wg=hk.type;F();Vc.autoReset=Ld;hk.enabled=
Ff;hk.autoUpdate=Wf;hk.needsUpdate=Nf;hk.type=Wg}function bb(Ld){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",Ld.statusMessage)}function Wa(Ld){Ld=Ld.target;Ld.removeEventListener("dispose",Wa);Ab(Ld);Jc.remove(Ld)}function Ab(Ld){const Ff=Jc.get(Ld).programs;void 0!==Ff&&(Ff.forEach(function(Wf){ph.releaseProgram(Wf)}),Ld.isShaderMaterial&&ph.releaseShaderCache(Ld))}function fc(){Xg.stop()}function Lc(){Xg.start()}function wd(Ld,Ff,Wf,Nf){if(!1!==Ld.visible){if(Ld.layers.test(Ff.layers))if(Ld.isGroup)Wf=
Ld.renderOrder;else if(Ld.isLOD)!0===Ld.autoUpdate&&Ld.update(Ff);else if(Ld.isLight)Qe.pushLight(Ld),Ld.castShadow&&Qe.pushShadow(Ld);else if(Ld.isSprite){if(!Ld.frustumCulled||Xe.intersectsSprite(Ld)){Nf&&Ra.setFromMatrixPosition(Ld.matrixWorld).applyMatrix4(lb);var Wg=Af.update(Ld),ki=Ld.material;ki.visible&&yf.push(Ld,Wg,ki,Wf,Ra.z,null)}}else if(Ld.isMesh||Ld.isLine||Ld.isPoints)if(Ld.isSkinnedMesh&&Ld.skeleton.frame!==Vc.render.frame&&(Ld.skeleton.update(),Ld.skeleton.frame=Vc.render.frame),
!Ld.frustumCulled||Xe.intersectsObject(Ld))if(Nf&&Ra.setFromMatrixPosition(Ld.matrixWorld).applyMatrix4(lb),Wg=Af.update(Ld),ki=Ld.material,Array.isArray(ki)){const li=Wg.groups;for(let Yh=0,ai=li.length;Yh<ai;Yh++){const Yj=li[Yh],ik=ki[Yj.materialIndex];ik&&ik.visible&&yf.push(Ld,Wg,ik,Wf,Ra.z,Yj)}}else ki.visible&&yf.push(Ld,Wg,ki,Wf,Ra.z,null);Ld=Ld.children;for(let li=0,Yh=Ld.length;li<Yh;li++)wd(Ld[li],Ff,Wf,Nf)}}function le(Ld,Ff,Wf,Nf){const Wg=Ld.opaque,ki=Ld.transmissive;Ld=Ld.transparent;
Qe.setupLightsView(Wf);if(0<ki.length){{var li=Za.isWebGL2;null===ca&&(ca=new be(1,1,{generateMipmaps:!0,type:Pa.has("EXT_color_buffer_half_float")?1016:1009,minFilter:1008,samples:li&&!0===ug?4:0}));Jg.getDrawingBufferSize(S);li?ca.setSize(S.x,S.y):ca.setSize(Wb(S.x),Wb(S.y));li=Jg.getRenderTarget();Jg.setRenderTarget(ca);Jg.clear();const Yh=Jg.toneMapping;Jg.toneMapping=0;je(Wg,Ff,Wf);Jg.toneMapping=Yh;cd.updateMultisampleRenderTarget(ca);cd.updateRenderTargetMipmap(ca);Jg.setRenderTarget(li)}}Nf&&
Zb.viewport(vi.copy(Nf));0<Wg.length&&je(Wg,Ff,Wf);0<ki.length&&je(ki,Ff,Wf);0<Ld.length&&je(Ld,Ff,Wf);Zb.buffers.depth.setTest(!0);Zb.buffers.depth.setMask(!0);Zb.buffers.color.setMask(!0);Zb.setPolygonOffset(!1)}function je(Ld,Ff,Wf){const Nf=!0===Ff.isScene?Ff.overrideMaterial:null;for(let ik=0,jk=Ld.length;ik<jk;ik++){var Wg=Ld[ik],ki=Wg.object,li=Wg.geometry,Yh=null===Nf?Wg.material:Nf,ai=Wg.group;if(ki.layers.test(Wf.layers)){Wg=Ff;var Yj=Wf;ki.onBeforeRender(Jg,Wg,Yj,li,Yh,ai);ki.modelViewMatrix.multiplyMatrices(Yj.matrixWorldInverse,
ki.matrixWorld);ki.normalMatrix.getNormalMatrix(ki.modelViewMatrix);Yh.onBeforeRender(Jg,Wg,Yj,li,ki,ai);!0===Yh.transparent&&2===Yh.side?(Yh.side=1,Yh.needsUpdate=!0,Jg.renderBufferDirect(Yj,Wg,li,Yh,ki,ai),Yh.side=0,Yh.needsUpdate=!0,Jg.renderBufferDirect(Yj,Wg,li,Yh,ki,ai),Yh.side=2):Jg.renderBufferDirect(Yj,Wg,li,Yh,ki,ai);ki.onAfterRender(Jg,Wg,Yj,li,Yh,ai)}}}function pe(Ld,Ff,Wf){!0!==Ff.isScene&&(Ff=Da);const Nf=Jc.get(Ld),Wg=Qe.state.lights,ki=Wg.state.version,li=ph.getParameters(Ld,Wg.state,
Qe.state.shadowsArray,Ff,Wf),Yh=ph.getProgramCacheKey(li);let ai=Nf.programs;Nf.environment=Ld.isMeshStandardMaterial?Ff.environment:null;Nf.fog=Ff.fog;Nf.envMap=(Ld.isMeshStandardMaterial?Pe:sd).get(Ld.envMap||Nf.environment);void 0===ai&&(Ld.addEventListener("dispose",Wa),ai=new Map,Nf.programs=ai);Ff=ai.get(Yh);if(void 0!==Ff){if(Nf.currentProgram===Ff&&Nf.lightsStateVersion===ki)return qe(Ld,li),Ff}else li.uniforms=ph.getUniforms(Ld),Ld.onBuild(Wf,li,Jg),Ld.onBeforeCompile(li,Jg),Ff=ph.acquireProgram(li,
Yh),ai.set(Yh,Ff),Nf.uniforms=li.uniforms;Wf=Nf.uniforms;if(!Ld.isShaderMaterial&&!Ld.isRawShaderMaterial||!0===Ld.clipping)Wf.clippingPlanes=Ah.uniform;qe(Ld,li);Nf.needsLights=Ld.isMeshLambertMaterial||Ld.isMeshToonMaterial||Ld.isMeshPhongMaterial||Ld.isMeshStandardMaterial||Ld.isShadowMaterial||Ld.isShaderMaterial&&!0===Ld.lights;Nf.lightsStateVersion=ki;Nf.needsLights&&(Wf.ambientLightColor.value=Wg.state.ambient,Wf.lightProbe.value=Wg.state.probe,Wf.directionalLights.value=Wg.state.directional,
Wf.directionalLightShadows.value=Wg.state.directionalShadow,Wf.spotLights.value=Wg.state.spot,Wf.spotLightShadows.value=Wg.state.spotShadow,Wf.rectAreaLights.value=Wg.state.rectArea,Wf.ltc_1.value=Wg.state.rectAreaLTC1,Wf.ltc_2.value=Wg.state.rectAreaLTC2,Wf.pointLights.value=Wg.state.point,Wf.pointLightShadows.value=Wg.state.pointShadow,Wf.hemisphereLights.value=Wg.state.hemi,Wf.directionalShadowMap.value=Wg.state.directionalShadowMap,Wf.directionalShadowMatrix.value=Wg.state.directionalShadowMatrix,
Wf.spotShadowMap.value=Wg.state.spotShadowMap,Wf.spotShadowMatrix.value=Wg.state.spotShadowMatrix,Wf.pointShadowMap.value=Wg.state.pointShadowMap,Wf.pointShadowMatrix.value=Wg.state.pointShadowMatrix);Ld=Ff.getUniforms();Ld=In.seqWithValue(Ld.seq,Wf);Nf.currentProgram=Ff;Nf.uniformsList=Ld;return Ff}function qe(Ld,Ff){Ld=Jc.get(Ld);Ld.outputEncoding=Ff.outputEncoding;Ld.instancing=Ff.instancing;Ld.skinning=Ff.skinning;Ld.morphTargets=Ff.morphTargets;Ld.morphNormals=Ff.morphNormals;Ld.morphColors=
Ff.morphColors;Ld.morphTargetsCount=Ff.morphTargetsCount;Ld.numClippingPlanes=Ff.numClippingPlanes;Ld.numIntersection=Ff.numClipIntersection;Ld.vertexAlphas=Ff.vertexAlphas;Ld.vertexTangents=Ff.vertexTangents;Ld.toneMapping=Ff.toneMapping}this.isWebGLRenderer=!0;const nc=void 0!==t.canvas?t.canvas:ae();var Ke=void 0!==t.context?t.context:null,$f=void 0!==t.depth?t.depth:!0;const Te=void 0!==t.stencil?t.stencil:!0,ug=void 0!==t.antialias?t.antialias:!1,Jf=void 0!==t.premultipliedAlpha?t.premultipliedAlpha:
!0,Hf=void 0!==t.preserveDrawingBuffer?t.preserveDrawingBuffer:!1,Ig=void 0!==t.powerPreference?t.powerPreference:"default",Tg=void 0!==t.failIfMajorPerformanceCaveat?t.failIfMajorPerformanceCaveat:!1;let Lf;Lf=null!==Ke?Ke.getContextAttributes().alpha:void 0!==t.alpha?t.alpha:!1;let yf=null,Qe=null;const zg=[],Dh=[];this.domElement=nc;this.debug={checkShaderErrors:!0};this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0;this.clippingPlanes=[];this.localClippingEnabled=
!1;this.outputEncoding=3E3;this.physicallyCorrectLights=!1;this.toneMapping=0;this.toneMappingExposure=1;Object.defineProperties(this,{gammaFactor:{get:function(){console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.");return 2},set:function(){console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.")}}});const Jg=this;let zh=!1,jh=0,Pg=0,ah=null,nh=-1,Fi=null;const vi=new eg,Bj=new eg;let lj=null,sj=nc.width,Qd=nc.height,Ec=1,If=null,Mf=null;const sg=new eg(0,0,sj,Qd),Ei=new eg(0,
0,sj,Qd);let oh=!1;const Xe=new zo;let Bg=!1,G=!1,ca=null;const lb=new Ub,S=new tg,Ra=new Tb,Da={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let Ja=Ke;try{Ke={alpha:!0,depth:$f,stencil:Te,antialias:ug,premultipliedAlpha:Jf,preserveDrawingBuffer:Hf,powerPreference:Ig,failIfMajorPerformanceCaveat:Tg};"setAttribute"in nc&&nc.setAttribute("data-engine","three.js r143");nc.addEventListener("webglcontextlost",Q,!1);nc.addEventListener("webglcontextrestored",X,!1);nc.addEventListener("webglcontextcreationerror",
bb,!1);if(null===Ja&&($f=["webgl2","webgl","experimental-webgl"],!0===Jg.isWebGL1Renderer&&$f.shift(),Ja=A($f,Ke),null===Ja)){if(A($f))throw Error("Error creating WebGL context with your selected attributes.");throw Error("Error creating WebGL context.");}void 0===Ja.getShaderPrecisionFormat&&(Ja.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(Ld){throw console.error("THREE.WebGLRenderer: "+Ld.message),Ld;}let Pa,Za,Zb,Vc,Jc,cd,sd,Pe,gf,ag,Af,ph,Ug,$i,rh,Ah,hk,
tk,Zl,Ph,vl,Uj,$l,Wk;F();const Ie=new uf(Jg,Ja);this.xr=Ie;this.getContext=function(){return Ja};this.getContextAttributes=function(){return Ja.getContextAttributes()};this.forceContextLoss=function(){const Ld=Pa.get("WEBGL_lose_context");Ld&&Ld.loseContext()};this.forceContextRestore=function(){const Ld=Pa.get("WEBGL_lose_context");Ld&&Ld.restoreContext()};this.getPixelRatio=function(){return Ec};this.setPixelRatio=function(Ld){void 0!==Ld&&(Ec=Ld,this.setSize(sj,Qd,!1))};this.getSize=function(Ld){return Ld.set(sj,
Qd)};this.setSize=function(Ld,Ff,Wf){Ie.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(sj=Ld,Qd=Ff,nc.width=Math.floor(Ld*Ec),nc.height=Math.floor(Ff*Ec),!1!==Wf&&(nc.style.width=Ld+"px",nc.style.height=Ff+"px"),this.setViewport(0,0,Ld,Ff))};this.getDrawingBufferSize=function(Ld){return Ld.set(sj*Ec,Qd*Ec).floor()};this.setDrawingBufferSize=function(Ld,Ff,Wf){sj=Ld;Qd=Ff;Ec=Wf;nc.width=Math.floor(Ld*Wf);nc.height=Math.floor(Ff*Wf);this.setViewport(0,
0,Ld,Ff)};this.getCurrentViewport=function(Ld){return Ld.copy(vi)};this.getViewport=function(Ld){return Ld.copy(sg)};this.setViewport=function(Ld,Ff,Wf,Nf){Ld.isVector4?sg.set(Ld.x,Ld.y,Ld.z,Ld.w):sg.set(Ld,Ff,Wf,Nf);Zb.viewport(vi.copy(sg).multiplyScalar(Ec).floor())};this.getScissor=function(Ld){return Ld.copy(Ei)};this.setScissor=function(Ld,Ff,Wf,Nf){Ld.isVector4?Ei.set(Ld.x,Ld.y,Ld.z,Ld.w):Ei.set(Ld,Ff,Wf,Nf);Zb.scissor(Bj.copy(Ei).multiplyScalar(Ec).floor())};this.getScissorTest=function(){return oh};
this.setScissorTest=function(Ld){Zb.setScissorTest(oh=Ld)};this.setOpaqueSort=function(Ld){If=Ld};this.setTransparentSort=function(Ld){Mf=Ld};this.getClearColor=function(Ld){return Ld.copy(tk.getClearColor())};this.setClearColor=function(){tk.setClearColor.apply(tk,arguments)};this.getClearAlpha=function(){return tk.getClearAlpha()};this.setClearAlpha=function(){tk.setClearAlpha.apply(tk,arguments)};this.clear=function(Ld=!0,Ff=!0,Wf=!0){let Nf=0;Ld&&(Nf|=16384);Ff&&(Nf|=256);Wf&&(Nf|=1024);Ja.clear(Nf)};
this.clearColor=function(){this.clear(!0,!1,!1)};this.clearDepth=function(){this.clear(!1,!0,!1)};this.clearStencil=function(){this.clear(!1,!1,!0)};this.dispose=function(){nc.removeEventListener("webglcontextlost",Q,!1);nc.removeEventListener("webglcontextrestored",X,!1);nc.removeEventListener("webglcontextcreationerror",bb,!1);$i.dispose();rh.dispose();Jc.dispose();sd.dispose();Pe.dispose();Af.dispose();$l.dispose();Wk.dispose();ph.dispose();Ie.dispose();Ie.removeEventListener("sessionstart",fc);
Ie.removeEventListener("sessionend",Lc);ca&&(ca.dispose(),ca=null);Xg.stop()};this.renderBufferDirect=function(Ld,Ff,Wf,Nf,Wg,ki){null===Ff&&(Ff=Da);var li=Wg.isMesh&&0>Wg.matrixWorld.determinant();{var Yh=Ff;!0!==Yh.isScene&&(Yh=Da);cd.resetTextureUnits();Ff=Yh.fog;var ai=Nf.isMeshStandardMaterial?Yh.environment:null,Yj=null===ah?Jg.outputEncoding:!0===ah.isXRRenderTarget?ah.texture.encoding:3E3,ik=(Nf.isMeshStandardMaterial?Pe:sd).get(Nf.envMap||ai),jk=!0===Nf.vertexColors&&!!Wf.attributes.color&&
4===Wf.attributes.color.itemSize,Pm=!!Nf.normalMap&&!!Wf.attributes.tangent,Qm=!!Wf.morphAttributes.position;const Bp=!!Wf.morphAttributes.normal,Bl=!!Wf.morphAttributes.color,al=Nf.toneMapped?Jg.toneMapping:0;ai=Wf.morphAttributes.position||Wf.morphAttributes.normal||Wf.morphAttributes.color;const tn=void 0!==ai?ai.length:0;ai=Jc.get(Nf);const Zq=Qe.state.lights;!0!==Bg||!0!==G&&Ld===Fi||Ah.setState(Nf,Ld,Ld===Fi&&Nf.id===nh);let Tk=!1;Nf.version===ai.__version?ai.needsLights&&ai.lightsStateVersion!==
Zq.state.version?Tk=!0:ai.outputEncoding!==Yj?Tk=!0:Wg.isInstancedMesh&&!1===ai.instancing?Tk=!0:Wg.isInstancedMesh||!0!==ai.instancing?Wg.isSkinnedMesh&&!1===ai.skinning?Tk=!0:Wg.isSkinnedMesh||!0!==ai.skinning?ai.envMap!==ik?Tk=!0:!0===Nf.fog&&ai.fog!==Ff?Tk=!0:void 0===ai.numClippingPlanes||ai.numClippingPlanes===Ah.numPlanes&&ai.numIntersection===Ah.numIntersection?ai.vertexAlphas!==jk?Tk=!0:ai.vertexTangents!==Pm?Tk=!0:ai.morphTargets!==Qm?Tk=!0:ai.morphNormals!==Bp?Tk=!0:ai.morphColors!==Bl?
Tk=!0:ai.toneMapping!==al?Tk=!0:!0===Za.isWebGL2&&ai.morphTargetsCount!==tn&&(Tk=!0):Tk=!0:Tk=!0:Tk=!0:(Tk=!0,ai.__version=Nf.version);Yj=ai.currentProgram;!0===Tk&&(Yj=pe(Nf,Yh,Wg));jk=Pm=Qm=!1;Yh=Yj.getUniforms();ik=ai.uniforms;Zb.useProgram(Yj.program)&&(jk=Pm=Qm=!0);Nf.id!==nh&&(nh=Nf.id,Pm=!0);if(Qm||Fi!==Ld){Yh.setValue(Ja,"projectionMatrix",Ld.projectionMatrix);Za.logarithmicDepthBuffer&&Yh.setValue(Ja,"logDepthBufFC",2/(Math.log(Ld.far+1)/Math.LN2));Fi!==Ld&&(Fi=Ld,jk=Pm=!0);if(Nf.isShaderMaterial||
Nf.isMeshPhongMaterial||Nf.isMeshToonMaterial||Nf.isMeshStandardMaterial||Nf.envMap)Qm=Yh.map.cameraPosition,void 0!==Qm&&Qm.setValue(Ja,Ra.setFromMatrixPosition(Ld.matrixWorld));(Nf.isMeshPhongMaterial||Nf.isMeshToonMaterial||Nf.isMeshLambertMaterial||Nf.isMeshBasicMaterial||Nf.isMeshStandardMaterial||Nf.isShaderMaterial)&&Yh.setValue(Ja,"isOrthographic",!0===Ld.isOrthographicCamera);(Nf.isMeshPhongMaterial||Nf.isMeshToonMaterial||Nf.isMeshLambertMaterial||Nf.isMeshBasicMaterial||Nf.isMeshStandardMaterial||
Nf.isShaderMaterial||Nf.isShadowMaterial||Wg.isSkinnedMesh)&&Yh.setValue(Ja,"viewMatrix",Ld.matrixWorldInverse)}Wg.isSkinnedMesh&&(Yh.setOptional(Ja,Wg,"bindMatrix"),Yh.setOptional(Ja,Wg,"bindMatrixInverse"),Ld=Wg.skeleton)&&(Za.floatVertexTextures?(null===Ld.boneTexture&&Ld.computeBoneTexture(),Yh.setValue(Ja,"boneTexture",Ld.boneTexture,cd),Yh.setValue(Ja,"boneTextureSize",Ld.boneTextureSize)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."));
Ld=Wf.morphAttributes;(void 0!==Ld.position||void 0!==Ld.normal||void 0!==Ld.color&&!0===Za.isWebGL2)&&Zl.update(Wg,Wf,Nf,Yj);if(Pm||ai.receiveShadow!==Wg.receiveShadow)ai.receiveShadow=Wg.receiveShadow,Yh.setValue(Ja,"receiveShadow",Wg.receiveShadow);Pm&&(Yh.setValue(Ja,"toneMappingExposure",Jg.toneMappingExposure),ai.needsLights&&(Ld=ik,Ld.ambientLightColor.needsUpdate=jk,Ld.lightProbe.needsUpdate=jk,Ld.directionalLights.needsUpdate=jk,Ld.directionalLightShadows.needsUpdate=jk,Ld.pointLights.needsUpdate=
jk,Ld.pointLightShadows.needsUpdate=jk,Ld.spotLights.needsUpdate=jk,Ld.spotLightShadows.needsUpdate=jk,Ld.rectAreaLights.needsUpdate=jk,Ld.hemisphereLights.needsUpdate=jk),Ff&&!0===Nf.fog&&Ug.refreshFogUniforms(ik,Ff),Ug.refreshMaterialUniforms(ik,Nf,Ec,Qd,ca),In.upload(Ja,ai.uniformsList,ik,cd));Nf.isShaderMaterial&&!0===Nf.uniformsNeedUpdate&&(In.upload(Ja,ai.uniformsList,ik,cd),Nf.uniformsNeedUpdate=!1);Nf.isSpriteMaterial&&Yh.setValue(Ja,"center",Wg.center);Yh.setValue(Ja,"modelViewMatrix",Wg.modelViewMatrix);
Yh.setValue(Ja,"normalMatrix",Wg.normalMatrix);Yh.setValue(Ja,"modelMatrix",Wg.matrixWorld);if(Nf.isShaderMaterial||Nf.isRawShaderMaterial){Ff=Nf.uniformsGroups;for(let rq=0,$r=Ff.length;rq<$r;rq++)Za.isWebGL2?(ai=Ff[rq],Wk.update(ai,Yj),Wk.bind(ai,Yj)):console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}Yh=Yj}Zb.setMaterial(Nf,li);Ff=Wf.index;ai=Wf.attributes.position;if(null===Ff){if(void 0===ai||0===ai.count)return}else if(0===Ff.count)return;Ld=1;!0===Nf.wireframe&&
(Ff=ag.getWireframeAttribute(Wf),Ld=2);$l.setup(Wg,Nf,Yh,Wf,Ff);li=Ph;null!==Ff&&(Yh=gf.get(Ff),li=vl,li.setIndex(Yh));Yj=Wf.drawRange.start*Ld;ik=null!==ki?ki.start*Ld:0;Yh=Math.max(Yj,ik);ki=Math.max(0,Math.min(null!==Ff?Ff.count:ai.count,Yj+Wf.drawRange.count*Ld,ik+(null!==ki?ki.count*Ld:Infinity))-1-Yh+1);0!==ki&&(Wg.isMesh?!0===Nf.wireframe?(Zb.setLineWidth(Nf.wireframeLinewidth*(null===ah?Ec:1)),li.setMode(1)):li.setMode(4):Wg.isLine?(Nf=Nf.linewidth,void 0===Nf&&(Nf=1),Zb.setLineWidth(Nf*(null===
ah?Ec:1)),Wg.isLineSegments?li.setMode(1):Wg.isLineLoop?li.setMode(2):li.setMode(3)):Wg.isPoints?li.setMode(0):Wg.isSprite&&li.setMode(4),Wg.isInstancedMesh?li.renderInstances(Yh,ki,Wg.count):Wf.isInstancedBufferGeometry?li.renderInstances(Yh,ki,Math.min(Wf.instanceCount,Wf._maxInstanceCount)):li.render(Yh,ki))};this.compile=function(Ld,Ff){Qe=rh.get(Ld);Qe.init();Dh.push(Qe);Ld.traverseVisible(function(Wf){Wf.isLight&&Wf.layers.test(Ff.layers)&&(Qe.pushLight(Wf),Wf.castShadow&&Qe.pushShadow(Wf))});
Qe.setupLights(Jg.physicallyCorrectLights);Ld.traverse(function(Wf){const Nf=Wf.material;if(Nf)if(Array.isArray(Nf))for(let Wg=0;Wg<Nf.length;Wg++)pe(Nf[Wg],Ld,Wf);else pe(Nf,Ld,Wf)});Dh.pop();Qe=null};let ce=null;const Xg=new kc;Xg.setAnimationLoop(function(Ld){ce&&ce(Ld)});"undefined"!==typeof self&&Xg.setContext(self);this.setAnimationLoop=function(Ld){ce=Ld;Ie.setAnimationLoop(Ld);null===Ld?Xg.stop():Xg.start()};Ie.addEventListener("sessionstart",fc);Ie.addEventListener("sessionend",Lc);this.render=
function(Ld,Ff){if(void 0!==Ff&&!0!==Ff.isCamera)console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");else if(!0!==zh){!0===Ld.autoUpdate&&Ld.updateMatrixWorld();null===Ff.parent&&Ff.updateMatrixWorld();!0===Ie.enabled&&!0===Ie.isPresenting&&(!0===Ie.cameraAutoUpdate&&Ie.updateCamera(Ff),Ff=Ie.getCamera());if(!0===Ld.isScene)Ld.onBeforeRender(Jg,Ld,Ff,ah);Qe=rh.get(Ld,Dh.length);Qe.init();Dh.push(Qe);lb.multiplyMatrices(Ff.projectionMatrix,Ff.matrixWorldInverse);
Xe.setFromProjectionMatrix(lb);G=this.localClippingEnabled;Bg=Ah.init(this.clippingPlanes,G,Ff);yf=$i.get(Ld,zg.length);yf.init();zg.push(yf);wd(Ld,Ff,0,Jg.sortObjects);yf.finish();!0===Jg.sortObjects&&yf.sort(If,Mf);!0===Bg&&Ah.beginShadows();hk.render(Qe.state.shadowsArray,Ld,Ff);!0===Bg&&Ah.endShadows();!0===this.info.autoReset&&this.info.reset();tk.render(yf,Ld);Qe.setupLights(Jg.physicallyCorrectLights);if(Ff.isArrayCamera){const Wf=Ff.cameras;for(let Nf=0,Wg=Wf.length;Nf<Wg;Nf++){const ki=Wf[Nf];
le(yf,Ld,ki,ki.viewport)}}else le(yf,Ld,Ff);null!==ah&&(cd.updateMultisampleRenderTarget(ah),cd.updateRenderTargetMipmap(ah));if(!0===Ld.isScene)Ld.onAfterRender(Jg,Ld,Ff);$l.resetDefaultState();nh=-1;Fi=null;Dh.pop();Qe=0<Dh.length?Dh[Dh.length-1]:null;zg.pop();yf=0<zg.length?zg[zg.length-1]:null}};this.getActiveCubeFace=function(){return jh};this.getActiveMipmapLevel=function(){return Pg};this.getRenderTarget=function(){return ah};this.setRenderTargetTextures=function(Ld,Ff,Wf){Jc.get(Ld.texture).__webglTexture=
Ff;Jc.get(Ld.depthTexture).__webglTexture=Wf;Ld=Jc.get(Ld);Ld.__hasExternalTextures=!0;Ld.__hasExternalTextures&&(Ld.__autoAllocateDepthBuffer=void 0===Wf,Ld.__autoAllocateDepthBuffer||!0!==Pa.has("WEBGL_multisampled_render_to_texture")||(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),Ld.__useRenderToTexture=!1))};this.setRenderTargetFramebuffer=function(Ld,Ff){Ld=Jc.get(Ld);Ld.__webglFramebuffer=Ff;Ld.__useDefaultFramebuffer=
void 0===Ff};this.setRenderTarget=function(Ld,Ff=0,Wf=0){ah=Ld;jh=Ff;Pg=Wf;let Nf=!0;if(Ld){var Wg=Jc.get(Ld);void 0!==Wg.__useDefaultFramebuffer?(Zb.bindFramebuffer(36160,null),Nf=!1):void 0===Wg.__webglFramebuffer?cd.setupRenderTarget(Ld):Wg.__hasExternalTextures&&cd.rebindTextures(Ld,Jc.get(Ld.texture).__webglTexture,Jc.get(Ld.depthTexture).__webglTexture)}var ki=null;let li=Wg=!1;if(Ld){ki=Ld.texture;if(ki.isData3DTexture||ki.isDataArrayTexture)li=!0;ki=Jc.get(Ld).__webglFramebuffer;Ld.isWebGLCubeRenderTarget?
(ki=ki[Ff],Wg=!0):ki=Za.isWebGL2&&0<Ld.samples&&!1===cd.useMultisampledRTT(Ld)?Jc.get(Ld).__webglMultisampledFramebuffer:ki;vi.copy(Ld.viewport);Bj.copy(Ld.scissor);lj=Ld.scissorTest}else vi.copy(sg).multiplyScalar(Ec).floor(),Bj.copy(Ei).multiplyScalar(Ec).floor(),lj=oh;Zb.bindFramebuffer(36160,ki)&&Za.drawBuffers&&Nf&&Zb.drawBuffers(Ld,ki);Zb.viewport(vi);Zb.scissor(Bj);Zb.setScissorTest(lj);Wg?(Ld=Jc.get(Ld.texture),Ja.framebufferTexture2D(36160,36064,34069+Ff,Ld.__webglTexture,Wf)):li&&(Ld=Jc.get(Ld.texture),
Ja.framebufferTextureLayer(36160,36064,Ld.__webglTexture,Wf||0,Ff||0));nh=-1};this.readRenderTargetPixels=function(Ld,Ff,Wf,Nf,Wg,ki,li){if(Ld&&Ld.isWebGLRenderTarget){var Yh=Jc.get(Ld).__webglFramebuffer;Ld.isWebGLCubeRenderTarget&&void 0!==li&&(Yh=Yh[li]);if(Yh){Zb.bindFramebuffer(36160,Yh);try{const Yj=Ld.texture,ik=Yj.format,jk=Yj.type;if(1023!==ik&&Uj.convert(ik)!==Ja.getParameter(35739))console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
else{var ai=1016===jk&&(Pa.has("EXT_color_buffer_half_float")||Za.isWebGL2&&Pa.has("EXT_color_buffer_float"));1009===jk||Uj.convert(jk)===Ja.getParameter(35738)||1015===jk&&(Za.isWebGL2||Pa.has("OES_texture_float")||Pa.has("WEBGL_color_buffer_float"))||ai?0<=Ff&&Ff<=Ld.width-Nf&&0<=Wf&&Wf<=Ld.height-Wg&&Ja.readPixels(Ff,Wf,Nf,Wg,Uj.convert(ik),Uj.convert(jk),ki):console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.")}}finally{Ld=
null!==ah?Jc.get(ah).__webglFramebuffer:null,Zb.bindFramebuffer(36160,Ld)}}}else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")};this.copyFramebufferToTexture=function(Ld,Ff,Wf=0){var Nf=Math.pow(2,-Wf);const Wg=Math.floor(Ff.image.width*Nf);Nf=Math.floor(Ff.image.height*Nf);cd.setTexture2D(Ff,0);Ja.copyTexSubImage2D(3553,Wf,0,0,Ld.x,Ld.y,Wg,Nf);Zb.unbindTexture()};this.copyTextureToTexture=function(Ld,Ff,Wf,Nf=0){const Wg=Ff.image.width,
ki=Ff.image.height,li=Uj.convert(Wf.format),Yh=Uj.convert(Wf.type);cd.setTexture2D(Wf,0);Ja.pixelStorei(37440,Wf.flipY);Ja.pixelStorei(37441,Wf.premultiplyAlpha);Ja.pixelStorei(3317,Wf.unpackAlignment);Ff.isDataTexture?Ja.texSubImage2D(3553,Nf,Ld.x,Ld.y,Wg,ki,li,Yh,Ff.image.data):Ff.isCompressedTexture?Ja.compressedTexSubImage2D(3553,Nf,Ld.x,Ld.y,Ff.mipmaps[0].width,Ff.mipmaps[0].height,li,Ff.mipmaps[0].data):Ja.texSubImage2D(3553,Nf,Ld.x,Ld.y,li,Yh,Ff.image);0===Nf&&Wf.generateMipmaps&&Ja.generateMipmap(3553);
Zb.unbindTexture()};this.copyTextureToTexture3D=function(Ld,Ff,Wf,Nf,Wg=0){if(Jg.isWebGL1Renderer)console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");else{var ki=Ld.max.x-Ld.min.x+1,li=Ld.max.y-Ld.min.y+1,Yh=Ld.max.z-Ld.min.z+1,ai=Uj.convert(Nf.format),Yj=Uj.convert(Nf.type);if(Nf.isData3DTexture){cd.setTexture3D(Nf,0);var ik=32879}else if(Nf.isDataArrayTexture)cd.setTexture2DArray(Nf,0),ik=35866;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
return}Ja.pixelStorei(37440,Nf.flipY);Ja.pixelStorei(37441,Nf.premultiplyAlpha);Ja.pixelStorei(3317,Nf.unpackAlignment);var jk=Ja.getParameter(3314),Pm=Ja.getParameter(32878),Qm=Ja.getParameter(3316),Bp=Ja.getParameter(3315),Bl=Ja.getParameter(32877),al=Wf.isCompressedTexture?Wf.mipmaps[0]:Wf.image;Ja.pixelStorei(3314,al.width);Ja.pixelStorei(32878,al.height);Ja.pixelStorei(3316,Ld.min.x);Ja.pixelStorei(3315,Ld.min.y);Ja.pixelStorei(32877,Ld.min.z);Wf.isDataTexture||Wf.isData3DTexture?Ja.texSubImage3D(ik,
Wg,Ff.x,Ff.y,Ff.z,ki,li,Yh,ai,Yj,al.data):Wf.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),Ja.compressedTexSubImage3D(ik,Wg,Ff.x,Ff.y,Ff.z,ki,li,Yh,ai,al.data)):Ja.texSubImage3D(ik,Wg,Ff.x,Ff.y,Ff.z,ki,li,Yh,ai,Yj,al);Ja.pixelStorei(3314,jk);Ja.pixelStorei(32878,Pm);Ja.pixelStorei(3316,Qm);Ja.pixelStorei(3315,Bp);Ja.pixelStorei(32877,Bl);0===Wg&&Nf.generateMipmaps&&Ja.generateMipmap(ik);Zb.unbindTexture()}};this.initTexture=
function(Ld){Ld.isCubeTexture?cd.setTextureCube(Ld,0):Ld.isData3DTexture?cd.setTexture3D(Ld,0):Ld.isDataArrayTexture?cd.setTexture2DArray(Ld,0):cd.setTexture2D(Ld,0);Zb.unbindTexture()};this.resetState=function(){Pg=jh=0;ah=null;Zb.reset();$l.reset()};"undefined"!==typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))};yh.Scene=Yf;yh.AmbientLight=Vq;yh.PerspectiveCamera=Fl;yh.SpotLight=Yr;yh.ThreeColor=Cd;yh.TextureLoader=Mk;yh.BackSide=1;yh.MeshBasicMaterial=
Hg;yh.MeshPhongMaterial=Fh;yh.SphereGeometry=Ch;yh.Mesh=Nl;yh.Canvas=Ed;yh.World=uc;yh.connect=dd;yh.DarkUserFlap=fe;yh.WorldBrowser=jc;(function(t){var A=window.lively.FreezerRuntime.recorderFor("lively.freezer/src/landing-page.cp.js"),F=A.hasOwnProperty("WebGLCanvas")&&"function"===typeof A.WebGLCanvas?A.WebGLCanvas:A.WebGLCanvas=function(Q){if(!Q||!Q[Symbol["for"]("lively-instance-restorer")])return this[Symbol["for"]("lively-instance-initialize")].apply(this,arguments)};return vd(F,t,[{key:"context",
get:function(){return navigator.webdriver?this._canvas&&this._canvas.getContext("2d"):this._canvas&&this._canvas.getContext(this.contextType,{preserveDrawingBuffer:!0})}},{key:"restoreContent",value:function(Q,X){this.contextType;this.preserveContents;this.renderer&&Q&&Q!==X&&(this.owner.context.drawImage(this.renderer.getContext().canvas,0,0),this.renderer=new yh.WebGLRenderer({context:this.context,antialiasing:!0}),this.renderer.setSize(this.width,this.height))}},{key:"onExtentChanged",value:function(){}},
{key:"relayout",value:function(){this.renderLoop&&(this.renderer.setSize(this.width,this.height),this.camera.aspect=this.width/this.height,this.camera.updateProjectionMatrix())}},{key:"stopAnimation",value:function(){this.renderLoop&&(cancelAnimationFrame(this.renderLoop),this.renderer.dispose())}},{key:"limitLoop",value:function(Q,X){var bb=this,Wa=(new Date).getTime(),Ab=this,fc;return(fc=function(Lc){Ab.renderLoop=requestAnimationFrame(fc);Lc=(new Date).getTime();var wd=Lc-Wa,le=1E3/(X||bb.fps);
wd>le&&(Wa=Lc-wd%le,Q(),Ab.firstFrameRendered&&Ab.firstFrameRendered())})(0)}}],[{key:Symbol["for"]("__LivelyClassName__"),get:function(){return"WebGLCanvas"}},{key:"properties",get:function(){return{fps:{}}}}],A,{pathInPackage:function(){return"./src/landing-page.cp.js"},unsubscribeFromToplevelDefinitionChanges:function(){return function(){}},subscribeToToplevelDefinitionChanges:function(){return function(){}},"package":function(){return{name:"lively.freezer",version:"0.1.0"}}},{start:683,end:2740})})(yh.Canvas);
(function(t){var A=window.lively.FreezerRuntime.recorderFor("lively.freezer/src/landing-page.cp.js"),F=A.hasOwnProperty("Globe")&&"function"===typeof A.Globe?A.Globe:A.Globe=function(Q){if(!Q||!Q[Symbol["for"]("lively-instance-restorer")])return this[Symbol["for"]("lively-instance-initialize")].apply(this,arguments)};return vd(F,t,[{key:"fullyLoaded",value:function(){var Q=Dd(regeneratorRuntime.mark(function bb(){var Wa;return regeneratorRuntime.wrap(function(Ab){for(;;)switch(Ab.prev=Ab.next){case 0:return yh.__inter0__=
yh.promise.deferred(),this.firstFrameRendered=yh.__inter0__.resolve,Wa=yh.__inter0__.promise,Ab.next=3,Wa;case 3:case "end":return Ab.stop()}},bb,this)}));return function(){return Q.apply(this,arguments)}}()},{key:"onLoad",value:function(){var Q=Dd(regeneratorRuntime.mark(function bb(){return regeneratorRuntime.wrap(function(Wa){for(;;)switch(Wa.prev=Wa.next){case 0:return Wa.next=2,this.whenRendered();case 2:return this.renderGlobe(),Wa.next=5,this.fullyLoaded();case 5:return Wa.next=7,yh.promise.delay(500);
case 7:this.get("cover").animate({opacity:0,easing:yh.easings.inOutCubic}),this.relayout(),yh.connect(this,"extent",this,"onExtentChanged");case 10:case "end":return Wa.stop()}},bb,this)}));return function(){return Q.apply(this,arguments)}}()},{key:"renderGlobe",value:function(){var Q=this;this.stopAnimation();this.withContextDo(function(X){var bb=Q.width,Wa=Q.height,Ab=new yh.Scene,fc=new yh.PerspectiveCamera(45,bb/Wa,.01,1E3);fc.position.z=1;fc.position.x=.4;fc.position.y=.25;Q.camera=fc;Ab.add(new yh.AmbientLight(3355443));
var Lc=new yh.SpotLight(16777215,1,200,Math.PI/2,1);Lc.position.set(1,1,0);Lc.castShadow=!0;Lc.shadow.mapSize.width=1024;Lc.shadow.mapSize.height=1024;Lc.shadow.camera.near=10;Lc.shadow.camera.far=100;Lc.shadow.bias=.01;Ab.add(Lc);var wd=function(je,pe){var qe=new yh.TextureLoader;return new yh.Mesh(new yh.SphereGeometry(je,pe,pe),new yh.MeshPhongMaterial({map:qe.load("/lively.morphic/assets/globe-textures/2_no_clouds_4k.jpg"),bumpMap:qe.load("/lively.morphic/assets/globe-textures/elev_bump_4k.jpg"),
bumpScale:.005,shininess:5,specularMap:qe.load("/lively.morphic/assets/globe-textures/water_4k.png"),specular:new yh.ThreeColor("grey")}))}(.5,32);wd.rotation.y=5.2;Ab.add(wd);var le=function(je,pe){var qe=new yh.TextureLoader;return new yh.Mesh(new yh.SphereGeometry(je+.003,pe,pe),new yh.MeshPhongMaterial({map:qe.load("/lively.morphic/assets/globe-textures/fair_clouds_4k.png"),transparent:!0}))}(.5,32);le.rotation.y=5.2;Ab.add(le);Lc=function(je,pe){var qe=new yh.TextureLoader;return new yh.Mesh(new yh.SphereGeometry(je,
pe,pe),new yh.MeshBasicMaterial({map:qe.load("/lively.morphic/assets/globe-textures//galaxy_starfield.png"),side:yh.BackSide}))}(90,64);Ab.add(Lc);Q.renderer=new yh.WebGLRenderer({context:X,antialias:!0});Q.renderer.setSize(bb,Wa);Q.limitLoop(function(){if(!document.body.contains(Q.renderer.getContext().canvas)){if(Q.removeScheduled)return;Q.removeScheduled=setTimeout(function(){document.body.contains(Q.renderer.getContext().canvas)||Q.stopAnimation()},5E3)}wd.rotation.y+=5E-4;le.rotation.y+=5E-4;
Q.renderer.render(Ab,fc)});Q.camera.position.z=1;Q.camera.position.x=.4;Q.camera.position.y=.25})}},{key:"beforePublish",value:function(){this.get("cover").opacity=1}},{key:"onExtentChanged",value:function(){vd._get(Object.getPrototypeOf(F.prototype),"onExtentChanged",this).call(this);this.get("cover").extent=this.extent}}],[{key:Symbol["for"]("__LivelyClassName__"),get:function(){return"Globe"}}],A,{pathInPackage:function(){return"./src/landing-page.cp.js"},unsubscribeFromToplevelDefinitionChanges:function(){return function(){}},
subscribeToToplevelDefinitionChanges:function(){return function(){}},"package":function(){return{name:"lively.freezer",version:"0.1.0"}}},{start:2742,end:6608})})(yh.WebGLCanvas);(function(t){var A=window.lively.FreezerRuntime.recorderFor("lively.freezer/src/landing-page.cp.js"),F=A.hasOwnProperty("WorldLandingPage")&&"function"===typeof A.WorldLandingPage?A.WorldLandingPage:A.WorldLandingPage=function(Q){if(!Q||!Q[Symbol["for"]("lively-instance-restorer")])return this[Symbol["for"]("lively-instance-initialize")].apply(this,
arguments)};return vd(F,t,[{key:"__loading_html__",get:function(){return"\n      <style>\n        ".concat(this.loadingScreen.cssDeclaration,"\n      </style>\n      ").concat(this.loadingScreen.html,"\n    ")}},{key:"__head_html__",get:function(){return'\n<script> window.AUTH_SERVER_URL; \x3c/script>\n<link type="text/css" rel="stylesheet" id="lively-font-awesome" href="/lively.morphic/assets/font-awesome/css/font-awesome.css">\n<link type="text/css" rel="stylesheet" id="lively-font-inconsolata" href="/lively.morphic/assets/inconsolata/inconsolata.css">\n<style type="text/css" id="WorldLandingPage_7068CDA9_749E_4EC1_9BC4_50DF06EAA2BA-Nunito">@import url("https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i&display=swap");</style>'}},
{key:"commands",get:function(){var Q=this;return[{name:"resize on client",exec:function(){Q.relayout()}}]}},{key:"relayout",value:function(){$world._cachedWindowBounds=null;document.body.style.overflowY="hidden";this.setBounds($world.windowBounds());this.getSubmorphNamed("globe").extent=this.extent;this.ensureUserFlap();var Q=this.getSubmorphNamed("a project browser");Q&&(Q.center=this.extent.scaleBy(.5))}},{key:"ensureUserFlap",value:function(){var Q=Dd(regeneratorRuntime.mark(function bb(){var Wa;
return regeneratorRuntime.wrap(function(Ab){for(;;)switch(Ab.prev=Ab.next){case 0:if(!(Wa=$world.get("user flap"))){Ab.next=2;break}return Ab.abrupt("return",Wa.alignInWorld());case 2:return Wa=yh.part(yh.DarkUserFlap),Wa.name="user flap",Wa.showMorphControls=!1,Wa.hasFixedPosition=!0,Wa.openInWorld(),Wa.opacity=0,Wa.alignInWorld(),Wa.get("fast load toggler").refresh(),Ab.next=12,yh.promise.delay(1E3);case 12:Wa.animate({opacity:1});case 13:case "end":return Ab.stop()}},bb)}));return function(){return Q.apply(this,
arguments)}}()},{key:"beforePublish",value:function(){var Q=this.getSubmorphNamed("a project browser");Q&&Q.remove()}},{key:"onLoad",value:function(){var Q=Dd(regeneratorRuntime.mark(function bb(){return regeneratorRuntime.wrap(function(Wa){for(;;)switch(Wa.prev=Wa.next){case 0:return Wa.next=2,this.whenRendered();case 2:if(lively.FreezerRuntime){Wa.next=4;break}return Wa.abrupt("return");case 4:$world.fill=yh.Color.black,document.documentElement.style.background=yh.Color.black,this.showWorldList();
case 7:case "end":return Wa.stop()}},bb,this)}));return function(){return Q.apply(this,arguments)}}()},{key:"showWorldList",value:function(){var Q=Dd(regeneratorRuntime.mark(function bb(){var Wa;return regeneratorRuntime.wrap(function(Ab){for(;;)switch(Ab.prev=Ab.next){case 0:return Wa=this.getSubmorphNamed("a poject browser")||this.addMorph(yh.part(yh.WorldBrowser,{name:"a project browser"})),this.reset(),Wa.showCloseButton=!1,Wa.extent=yh.pt(1110,800).minPt(this.extent.subPt(yh.pt(50,150))),Wa.center=
this.innerBounds().center(),Ab.next=7,Wa.allFontsLoaded();case 7:Wa.animate({opacity:1,duration:300}),Wa.displayWorlds(),Wa.hasFixedPosition=!1;case 10:case "end":return Ab.stop()}},bb,this)}));return function(){return Q.apply(this,arguments)}}()},{key:"reset",value:function(){var Q=this.getSubmorphNamed("a project browser");Q.opacity=0;Q.center=this.innerBounds().center()}}],[{key:Symbol["for"]("__LivelyClassName__"),get:function(){return"WorldLandingPage"}},{key:"properties",get:function(){return{title:{derived:!0,
get:function(){return"lively.next (".concat(document.location.hostname,")")}},loadingScreen:{}}}}],A,{pathInPackage:function(){return"./src/landing-page.cp.js"},unsubscribeFromToplevelDefinitionChanges:function(){return function(){}},subscribeToToplevelDefinitionChanges:function(){return function(){}},"package":function(){return{name:"lively.freezer",version:"0.1.0"}}},{start:6610,end:9591})})(yh.Morph);yh.LandingPage=yh.component["for"](function(){return yh.component({type:yh.WorldLandingPage,name:"landing page",
extent:yh.pt(500,500),fill:yh.Color.black,submorphs:[{name:"globe",type:yh.Globe,contextType:"webgl",extent:yh.pt(500,500),fps:60},{name:"cover",fill:yh.Color.black,extent:yh.pt(500,500)}]})},{module:"lively.freezer/src/landing-page.cp.js","export":"LandingPage",range:{start:9635,end:9953}},yh.LandingPage);yh.main=Sb;var Ho=bd("TITLE","lively.next");yh.TITLE=Ho;yh.TITLE=Ho;var yp=bd("WORLD_CLASS",yh.World);yh.WORLD_CLASS=yp;yh.WORLD_CLASS=yp;var Wq=bd("EXCLUDED_MODULES","lively.collab mocha-es6 mocha picomatch path-is-absolute fs.realpath rollup @babel/preset-env @babel/plugin-syntax-import-meta @rollup/plugin-json @rollup/plugin-commonjs rollup-plugin-polyfill-node babel-plugin-transform-es2015-modules-systemjs".split(" "));
yh.EXCLUDED_MODULES=Wq;yh.EXCLUDED_MODULES=Wq}}});